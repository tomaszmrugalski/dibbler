#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 54
#define YY_END_OF_BUFFER 55
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[492] =
    {   0,
        1,    1,    0,    0,    0,    0,   55,   53,    2,    1,
        1,   53,   36,   53,   53,   52,   52,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   40,   40,   54,    1,    1,    1,
        0,   48,   36,    0,   48,   38,   37,   52,    0,    0,
       51,    0,   45,   49,   49,   49,   49,   49,   49,   49,
        6,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   17,   18,    7,   49,   49,   49,   49,
       39,   37,   52,    0,    0,   44,   50,   43,   43,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   52,    0,    0,    0,   42,   42,    0,   43,    0,
       43,   49,   49,   49,   49,   26,    8,   49,   49,   49,
        0,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   52,    0,    0,    0,    0,
       42,    0,   42,    0,   43,   43,   43,   43,   49,   49,
       49,   49,    3,   49,   49,   49,   49,    0,   49,   49,
       49,    9,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,    0,    0,    0,    0,   42,   42,
       42,   42,    0,   43,   43,   43,    0,   43,   49,   49,

       21,   49,   49,   49,   49,    0,    0,   49,   49,   49,
       49,   19,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,    0,    0,    0,   42,   42,   42,    0,   42,
        0,    0,   43,   43,   43,   43,    5,   49,   49,   49,
       49,   49,    0,    0,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   35,   49,   49,    0,    0,
        0,    0,    0,   42,   42,   42,   42,    0,   43,   43,
       43,    0,   43,   49,   31,   49,   12,   13,    0,    0,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   14,    0,    0,    0,   42,   42,   42,    0,

       42,   47,   43,   43,   43,   43,   49,   11,    0,    0,
       49,   49,    4,   49,   49,   49,   49,   49,   49,   10,
       23,   49,    0,    0,    0,   46,   42,   42,   42,   42,
       43,   43,   43,    0,   43,   20,    0,    0,   28,   27,
       22,   49,   49,   49,   49,   25,   24,   49,    0,    0,
       42,   42,   42,    0,   42,   43,   43,   43,   43,   30,
       29,   49,   49,   49,   49,   49,    0,    0,    0,   42,
       42,   42,   42,   43,   43,   43,    0,   43,   49,   49,
       34,   49,   49,    0,    0,   42,   42,   42,    0,   42,
       43,   43,   43,   43,   49,   49,   32,   49,    0,    0,

        0,   42,   42,   42,   42,   43,   43,   43,    0,   43,
       49,   49,   16,    0,   41,   44,   42,   42,   42,    0,
       42,   43,   43,   43,   43,   49,   33,    0,   41,    0,
       42,   42,   42,   42,   42,   43,   43,   43,    0,   43,
       49,   41,   44,   42,    0,   42,   42,   42,   42,   43,
       43,   43,   15,   41,   42,   42,   42,   42,   43,   43,
       43,   42,   42,    0,   42,   42,   43,   42,   42,   43,
       42,   42,    0,   42,   42,   42,   42,    0,   42,   42,
       42,   42,    0,   42,   42,   42,   42,    0,   42,   42,
        0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[571] =
    {   0,
        0,    0, 1733, 1732,    0,    0, 1739, 1742, 1742,   41,
       43, 1733,    0, 1730,   40,   40, 1695, 1718,   69,   82,
       18, 1700, 1716,   49,   47,   89,   60,   34,   53,   91,
       96,   92,  101,   95, 1742, 1720, 1742,  121,  126,  128,
     1726, 1742,    0, 1723, 1722, 1742,    0,  120, 1711,  133,
     1742,    0,  137, 1710,  141, 1705, 1708,  141,  148,   57,
      149,  150,  153,  155,  152,  163,  154,  157,  164,  165,
      166,  167,  172, 1707, 1706, 1705,  174,  175,   51,  168,
     1742,    0,  192,  205, 1704,  209,    0,  215,  228,  232,
     1685,  185,  179,  232,   99,  239,  240,  248,  251,  247,

      259,  249,  254,  253,  261,  264,  255,  263,  267,  265,
      199,  280,  293, 1702, 1701,  299,  312,  316,  322,  333,
      339,  343,  350,  334,  343, 1700, 1699,  351,  287,  354,
     1705,  357,  358,  271,  359,  360,  364,  269,  362,  370,
      372,  386,  380,  383,  391,  396, 1697, 1696, 1695,  401,
      407,  418,  424,  430,  436,  449,  455,  468, 1694,  363,
      385,  388, 1693,  463,  468,  469,  470,  470,  475,  476,
      477, 1692,  478,  479,  480,  492,  482,  486,  494,  419,
      487,  425,  495,  496, 1691, 1690, 1689,  509,  520,  533,
      539,  552,  513,  558, 1688,  565,  576,  582,  515,  577,

     1687,  547,  582,  583,  584, 1671, 1680,  585,  588,  586,
      589, 1684,  591,  590,  504,  599,  600,  603,  594,  601,
      602,  610, 1683, 1682,  626,  632, 1681,  639,  650,  656,
      662,  668,  674,  687,  693,  706, 1680,  605,  611,  615,
      701,  707, 1666, 1660,  708,  688,  711,  713,  613,  714,
      663,  715,  717,  718,  719, 1677,  721,  651, 1676, 1675,
     1674,  728,  744,  750,  763,  769,  782,  786,  792, 1673,
      799,  810,  816,  723, 1672,  811, 1671, 1670, 1668, 1646,
      736,  816,  787,  817,  825,  764,  819,  820,  826,  827,
      828,  830, 1667, 1666, 1665,  841,  851, 1664,  858,  845,

      871,  875,  881,  894,  900,  913,  835, 1663, 1653, 1656,
      908,  895, 1660,  914,  915,  876,  917,  916,  918, 1659,
     1658,  919, 1657, 1656, 1655,  941,  947,  960,  966,  979,
      985, 1654,  992, 1003, 1009, 1653, 1638, 1633, 1650, 1649,
     1648,  920,  921,  933,  987, 1647, 1646, 1004, 1645, 1644,
     1016, 1643, 1031, 1021, 1044, 1050, 1063, 1069, 1082, 1742,
     1742,  925, 1021, 1064,  923, 1077, 1642, 1641, 1640, 1093,
     1106, 1112, 1125, 1131, 1639, 1138, 1149, 1155, 1083, 1023,
     1638, 1150,  961, 1542, 1529, 1161, 1508, 1175, 1166, 1188,
     1194, 1207, 1213, 1226, 1208, 1221, 1501, 1227, 1495, 1487,

     1482, 1239, 1252, 1258, 1271, 1277, 1476, 1284, 1295, 1301,
     1296, 1229, 1463, 1457, 1449,    0, 1310, 1444, 1317, 1328,
     1334, 1340, 1353, 1359, 1372, 1107, 1437, 1431, 1418, 1411,
     1405, 1378, 1391, 1397, 1410, 1416, 1386, 1423,    0, 1436,
     1392, 1373, 1742, 1367,    0, 1442, 1354, 1449, 1462, 1468,
     1481,    0, 1348, 1335, 1329, 1312, 1487, 1500, 1506, 1303,
        0, 1302, 1301,    0, 1513, 1742,    0, 1279, 1272, 1742,
     1266, 1253,    0, 1234, 1231, 1230, 1202,    0, 1189, 1183,
     1170, 1167,    0, 1166, 1156, 1133, 1126,    0, 1101, 1085,
     1742, 1529, 1534, 1539, 1544, 1549, 1552, 1557, 1559, 1095,

     1071, 1561, 1039, 1563, 1565, 1035, 1567, 1569, 1024, 1571,
     1573,  993, 1575, 1577,  968, 1579, 1581,  879, 1583, 1585,
      847, 1587, 1589,  845, 1591, 1593,  771, 1595, 1597,  747,
     1599, 1601,  745, 1603, 1605,  744, 1607, 1609,  670,  647,
     1611, 1613,  566, 1615, 1617,  541,  463, 1619, 1621,  384,
     1623,  330,  307, 1625, 1627, 1629,  236, 1631, 1633, 1635,
      195, 1637, 1639, 1641,  140, 1643, 1645, 1647,   72, 1649
    } ;

static yyconst flex_int16_t yy_def[571] =
    {   0,
      491,    1,  492,  492,  493,  493,  491,  491,  491,  491,
      491,  494,  495,  496,  491,  491,   16,  491,  497,  497,
       20,   20,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  491,  491,  491,  491,  491,  491,
      494,  491,  495,  496,  491,  491,  498,  491,  499,   48,
      491,  500,  501,  497,   20,   55,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      491,  498,  491,   83,  502,  503,  500,  491,   88,   55,
       90,  497,  497,  497,  497,  497,  497,  497,  497,  497,

      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  491,  112,  504,  505,  491,  116,  491,  491,  506,
      119,   90,  497,  497,  497,  497,  497,  497,  497,  497,
      491,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  113,  113,  507,  508,  491,
      491,  509,  151,  491,  491,  155,  491,  157,  122,  497,
      497,  497,  497,  497,  497,  497,  497,  491,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  491,  510,  511,  491,  491,  189,
      491,  191,  491,  491,  491,  491,  512,  196,  497,  497,

      497,  497,  497,  497,  497,  491,  491,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  513,  514,  491,  491,  491,  491,  515,  228,
      491,  491,  491,  233,  491,  235,  497,  497,  497,  497,
      497,  497,  491,  491,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  491,  516,
      517,  491,  491,  491,  264,  491,  266,  491,  491,  491,
      491,  518,  271,  497,  497,  497,  497,  497,  491,  491,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  519,  520,  491,  491,  491,  491,  521,

      299,  491,  491,  303,  491,  305,  497,  497,  491,  491,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  491,  522,  523,  491,  491,  327,  491,  329,
      491,  491,  491,  524,  333,  497,  491,  491,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  525,  526,
      491,  491,  491,  527,  353,  491,  356,  491,  358,  491,
      491,  497,  497,  497,  497,  497,  491,  528,  529,  491,
      370,  491,  372,  491,  491,  491,  530,  376,  497,  497,
      497,  497,  497,  531,  532,  491,  491,  491,  533,  388,
      491,  391,  491,  393,  497,  497,  497,  497,  491,  534,

      535,  491,  402,  491,  404,  491,  491,  491,  536,  408,
      497,  497,  497,  537,  538,  539,  491,  491,  491,  540,
      419,  491,  422,  491,  424,  497,  497,  491,  541,  491,
      542,  491,  432,  491,  434,  491,  491,  491,  543,  438,
      497,  544,  491,  545,  546,  491,  491,  491,  448,  491,
      450,  547,  497,  491,  548,  549,  491,  457,  491,  491,
      550,  491,  551,  552,  491,  491,  553,  554,  555,  491,
      491,  556,  557,  558,  559,  491,  560,  561,  562,  563,
      491,  564,  565,  566,  567,  491,  568,  569,  570,  491,
        0,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491
    } ;

static yyconst flex_int16_t yy_nxt[1786] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,   58,   59,
      491,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,  491,   51,  491,   61,  491,   69,  491,
       70,   62,   63,  491,   71,  435,  491,   94,   64,  110,
       52,   55,   55,   55,   55,   49,   55,   55,   55,   56,
       55,   55,   68,   57,   55,   55,   55,   55,   49,   55,

       55,   55,   55,   55,   55,  491,   57,  491,  491,   74,
       75,  491,  491,   76,   65,  491,   72,  491,   79,  127,
       66,   77,   78,   38,   39,   67,   80,   73,   40,   39,
       38,   39,   83,   83,   83,   83,   49,   84,   84,   84,
       84,   84,   84,  485,   51,   84,   84,   84,   84,   88,
       88,   88,   88,   90,   90,   90,   90,  491,   90,   90,
       90,   90,   90,   90,  491,  491,  491,   96,  491,  491,
      491,  491,  100,  491,   95,   97,   92,   93,   98,  491,
      491,  491,  491,  491,  491,  103,  101,   99,  491,  107,
      491,  491,  105,  102,  124,  491,  125,  104,  480,  106,

      109,  491,  111,  108,  112,  112,  112,  112,   49,  113,
      113,  113,  113,  113,  113,  491,   51,  113,  113,  113,
      113,  116,  116,  116,  116,  118,  145,  119,  119,  119,
      119,  120,  121,  121,  121,  121,  121,  121,  491,  475,
      121,  121,  121,  121,  122,  122,  122,  122,  491,  122,
      122,  122,  122,  122,  122,  491,  491,  130,  128,  131,
      132,  129,  126,  491,  491,  491,  133,  491,  135,  491,
      491,  491,  134,  140,  136,  491,  137,  491,  138,  491,
      491,  491,  139,  491,  142,  491,  143,  491,  172,  176,
      144,  141,  146,  146,  146,  146,   49,  147,  147,  147,

      147,  147,  147,  491,   51,  147,  147,  147,  147,  150,
      470,  151,  151,  151,  151,  152,  153,  153,  153,  153,
      153,  153,  491,  164,  153,  153,  153,  153,  154,  154,
      154,  154,  118,  469,  155,  155,  155,  155,  120,  156,
      156,  156,  156,  156,  156,  157,  157,  157,  157,  491,
      491,  156,  156,  156,  156,  159,  159,  159,  159,  491,
      159,  159,  159,  159,  159,  159,  491,  491,  162,  161,
      491,  160,  163,  491,  491,  491,  491,  169,  491,  491,
      491,  177,  165,  166,  167,  175,  491,  467,  491,  171,
      178,  174,  170,  180,  173,  181,  491,  182,  199,  491,

      184,  491,  491,  183,  491,  179,  200,  491,  146,  146,
      146,  146,  491,  188,  188,  188,  188,  150,  201,  189,
      189,  189,  189,  152,  190,  190,  190,  190,  190,  190,
      191,  191,  191,  191,  491,  491,  190,  190,  190,  190,
      193,  491,  154,  154,  154,  154,  118,  218,  194,  194,
      194,  194,  120,  195,  195,  195,  195,  195,  195,  491,
      220,  195,  195,  195,  195,  118,  461,  196,  196,  196,
      196,  197,  198,  198,  198,  198,  198,  198,  491,  491,
      198,  198,  198,  198,  491,  491,  491,  205,  202,  203,
      206,  491,  491,  491,  491,  491,  491,  209,  491,  211,

      204,  214,  491,  491,  221,  207,  208,  210,  491,  212,
      491,  491,  491,  251,  213,  217,  222,  216,  215,  225,
      491,  188,  188,  188,  188,  231,  231,  231,  231,  219,
      150,  491,  226,  226,  226,  226,  152,  227,  227,  227,
      227,  227,  227,  491,  456,  227,  227,  227,  227,  150,
      237,  228,  228,  228,  228,  229,  230,  230,  230,  230,
      230,  230,  491,  491,  230,  230,  230,  230,  118,  452,
      232,  232,  232,  232,  120,  118,  239,  233,  233,  233,
      233,  197,  234,  234,  234,  234,  234,  234,  235,  235,
      235,  235,  491,  491,  234,  234,  234,  234,  491,  491,

      491,  491,  491,  241,  491,  491,  491,  491,  247,  250,
      491,  238,  249,  242,  245,  491,  491,  491,  491,  491,
      240,  491,  246,  248,  254,  255,  491,  491,  252,  491,
      257,  491,  275,  285,  253,  258,  276,  256,  262,  262,
      262,  262,  150,  274,  263,  263,  263,  263,  152,  150,
      435,  264,  264,  264,  264,  229,  265,  265,  265,  265,
      265,  265,  266,  266,  266,  266,  491,  491,  265,  265,
      265,  265,  268,  431,  231,  231,  231,  231,  118,  491,
      232,  232,  232,  232,  118,  293,  269,  269,  269,  269,
      197,  270,  270,  270,  270,  270,  270,  491,  287,  270,

      270,  270,  270,  118,  491,  271,  271,  271,  271,  272,
      273,  273,  273,  273,  273,  273,  491,  491,  273,  273,
      273,  273,  277,  491,  491,  281,  282,  491,  278,  491,
      491,  491,  288,  491,  491,  491,  283,  491,  296,  491,
      262,  262,  262,  262,  307,  286,  292,  425,  405,  291,
      394,  284,  491,  290,  150,  289,  263,  263,  263,  263,
      150,  311,  297,  297,  297,  297,  229,  298,  298,  298,
      298,  298,  298,  491,  373,  298,  298,  298,  298,  150,
      491,  299,  299,  299,  299,  300,  301,  301,  301,  301,
      301,  301,  491,  316,  301,  301,  301,  301,  302,  302,

      302,  302,  118,  491,  232,  232,  232,  232,  197,  118,
      313,  303,  303,  303,  303,  272,  304,  304,  304,  304,
      304,  304,  305,  305,  305,  305,  491,  491,  304,  304,
      304,  304,  491,  491,  315,  491,  491,  312,  314,  308,
      317,  491,  491,  491,  491,  318,  491,  319,  359,  321,
      330,  491,  322,  326,  326,  326,  326,  329,  329,  329,
      329,  150,  320,  263,  263,  263,  263,  229,  150,  336,
      327,  327,  327,  327,  300,  328,  328,  328,  328,  328,
      328,  491,  306,  328,  328,  328,  328,  302,  302,  302,
      302,  118,  491,  331,  331,  331,  331,  272,  332,  332,

      332,  332,  332,  332,  491,  344,  332,  332,  332,  332,
      118,  491,  333,  333,  333,  333,  334,  335,  335,  335,
      335,  335,  335,  491,  491,  335,  335,  335,  335,  340,
      491,  491,  491,  491,  491,  491,  491,  491,  339,  491,
      348,  491,  363,  342,  382,  362,  346,  379,  341,  491,
      343,  345,  347,  326,  326,  326,  326,  150,  364,  351,
      351,  351,  351,  300,  352,  352,  352,  352,  352,  352,
      491,  267,  352,  352,  352,  352,  150,  491,  353,  353,
      353,  353,  354,  355,  355,  355,  355,  355,  355,  491,
      398,  355,  355,  355,  355,  118,  236,  232,  232,  232,

      232,  272,  118,  491,  356,  356,  356,  356,  334,  357,
      357,  357,  357,  357,  357,  358,  358,  358,  358,  491,
      491,  357,  357,  357,  357,  365,  150,  192,  263,  263,
      263,  263,  300,  372,  372,  372,  372,  491,  158,  491,
      366,  150,  117,  370,  370,  370,  370,  354,  371,  371,
      371,  371,  371,  371,  491,  380,  371,  371,  371,  371,
      118,  396,  374,  374,  374,  374,  334,  375,  375,  375,
      375,  375,  375,  491,   89,  375,  375,  375,  375,  118,
      491,  376,  376,  376,  376,  377,  378,  378,  378,  378,
      378,  378,  491,  491,  378,  378,  378,  378,   87,  491,

      381,  488,  383,  150,  395,  386,  386,  386,  386,  354,
      387,  387,  387,  387,  387,  387,  491,  488,  387,  387,
      387,  387,  150,  491,  388,  388,  388,  388,  389,  390,
      390,  390,  390,  390,  390,  491,  441,  390,  390,  390,
      390,  118,  488,  232,  232,  232,  232,  334,  118,  483,
      391,  391,  391,  391,  377,  392,  392,  392,  392,  392,
      392,  393,  393,  393,  393,  491,  491,  392,  392,  392,
      392,  150,  488,  263,  263,  263,  263,  354,  404,  404,
      404,  404,  483,  483,  397,  150,  478,  402,  402,  402,
      402,  389,  403,  403,  403,  403,  403,  403,  491,  483,

      403,  403,  403,  403,  118,  478,  406,  406,  406,  406,
      377,  407,  407,  407,  407,  407,  407,  491,  478,  407,
      407,  407,  407,  118,  491,  408,  408,  408,  408,  409,
      410,  410,  410,  410,  410,  410,  491,  491,  410,  410,
      410,  410,  412,  491,  411,  491,  473,  478,  413,  150,
      473,  417,  417,  417,  417,  389,  418,  418,  418,  418,
      418,  418,  491,  427,  418,  418,  418,  418,  150,  473,
      419,  419,  419,  419,  420,  421,  421,  421,  421,  421,
      421,  491,  464,  421,  421,  421,  421,  118,  473,  232,
      232,  232,  232,  377,  118,  464,  422,  422,  422,  422,

      409,  423,  423,  423,  423,  423,  423,  424,  424,  424,
      424,  491,  491,  423,  423,  423,  423,  464,  445,  439,
      150,  426,  263,  263,  263,  263,  389,  150,  464,  432,
      432,  432,  432,  420,  433,  433,  433,  433,  433,  433,
      434,  434,  434,  434,  491,  445,  433,  433,  433,  433,
      118,  430,  436,  436,  436,  436,  409,  437,  437,  437,
      437,  437,  437,  491,  491,  437,  437,  437,  437,  118,
      420,  438,  438,  438,  438,  439,  440,  440,  440,  440,
      440,  440,  491,  445,  440,  440,  440,  440,  150,  430,
      446,  446,  446,  446,  420,  447,  447,  447,  447,  447,

      447,  491,  409,  447,  447,  447,  447,  150,  491,  448,
      448,  448,  448,  453,  449,  449,  449,  449,  449,  449,
      491,  445,  449,  449,  449,  449,  118,  443,  232,  232,
      232,  232,  409,  118,  430,  450,  450,  450,  450,  439,
      451,  451,  451,  451,  451,  451,  491,  401,  451,  451,
      451,  451,  150,  491,  263,  263,  263,  263,  420,  150,
      389,  457,  457,  457,  457,  430,  458,  458,  458,  458,
      458,  458,  491,  401,  458,  458,  458,  458,  118,  491,
      459,  459,  459,  459,  439,  460,  460,  460,  460,  460,
      460,  491,  377,  460,  460,  460,  460,  150,  416,  465,

      465,  465,  465,  401,  466,  466,  466,  466,  466,  466,
      491,  369,  466,  466,  466,  466,  118,  491,  232,  232,
      232,  232,  439,  150,  354,  263,  263,  263,  263,   35,
       35,   35,   35,   35,   37,   37,   37,   37,   37,   41,
       41,   41,   41,   41,   43,  401,   43,   43,   43,   44,
       44,   44,   44,   44,   54,   54,   54,   82,  369,   82,
       82,   82,   85,   85,  114,  114,  148,  148,  149,  149,
      185,  185,  186,  186,  223,  223,  224,  224,  259,  259,
      260,  260,  294,  294,  295,  295,  323,  323,  324,  324,
      349,  349,  350,  350,  367,  367,  368,  368,  384,  384,

      385,  385,  399,  399,  400,  400,  414,  414,  415,  415,
      428,  428,  429,  429,  442,  442,  444,  444,  454,  454,
      455,  455,  462,  462,  463,  463,  468,  468,  471,  471,
      472,  472,  474,  474,  476,  476,  477,  477,  479,  479,
      481,  481,  482,  482,  484,  484,  486,  486,  487,  487,
      489,  489,  490,  490,  491,  334,   86,  369,  325,  300,
      369,  325,  491,  491,  491,  491,  491,  361,  360,  491,
      272,   86,  325,  261,  491,  491,  491,  338,  337,  491,
      229,  325,  261,  491,  310,  309,  491,  491,  491,  197,
       86,  261,  187,  491,  280,  279,  491,  152,  261,  187,

      491,  244,  243,  491,  120,   86,  187,  115,  491,  491,
      491,  187,  115,  491,  168,  491,  491,   86,  115,  123,
      115,  491,  491,  491,  491,   91,  491,   86,   44,   45,
       42,   81,  491,   60,   53,  491,   45,   42,  491,   36,
       36,    7,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491
    } ;

static yyconst flex_int16_t yy_chk[1786] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   21,   21,
       28,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   25,   16,   24,   24,   79,   28,   29,
       29,   24,   25,   60,   29,  569,   27,   60,   25,   79,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   27,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   30,   32,   31,
       31,   34,   31,   31,   26,   95,   30,   33,   33,   95,
       26,   31,   32,   38,   38,   26,   34,   30,   39,   39,
       40,   40,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,  565,   48,   50,   50,   50,   50,   53,
       53,   53,   53,   55,   55,   55,   55,   58,   55,   55,
       55,   55,   55,   55,   59,   61,   62,   62,   65,   63,
       67,   64,   66,   68,   61,   63,   58,   59,   64,   66,
       69,   70,   71,   72,   80,   69,   67,   65,   73,   73,
       77,   78,   71,   68,   92,   93,   93,   70,  561,   72,

       78,   92,   80,   77,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,  111,   83,   84,   84,   84,
       84,   86,   86,   86,   86,   88,  111,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   89,  557,
       89,   89,   89,   89,   90,   90,   90,   90,   94,   90,
       90,   90,   90,   90,   90,   96,   97,   98,   96,   99,
       99,   97,   94,  100,   98,  102,  100,   99,  101,  104,
      103,  107,  100,  106,  102,  101,  103,  105,  104,  108,
      106,  110,  105,  109,  108,  138,  109,  134,  134,  138,
      110,  107,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  129,  112,  113,  113,  113,  113,  116,
      553,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  117,  129,  117,  117,  117,  117,  118,  118,
      118,  118,  119,  552,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  120,  120,  120,  120,  121,
      124,  121,  121,  121,  121,  122,  122,  122,  122,  125,
      122,  122,  122,  122,  122,  122,  123,  128,  125,  124,
      130,  123,  128,  132,  133,  135,  136,  132,  139,  160,
      137,  139,  130,  130,  130,  137,  140,  550,  141,  133,
      140,  136,  132,  141,  135,  142,  143,  143,  160,  144,

      145,  161,  142,  144,  162,  140,  161,  145,  146,  146,
      146,  146,  146,  150,  150,  150,  150,  151,  162,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      152,  152,  152,  152,  153,  180,  153,  153,  153,  153,
      154,  182,  154,  154,  154,  154,  155,  180,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  156,
      182,  156,  156,  156,  156,  157,  547,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  158,  164,
      158,  158,  158,  158,  165,  166,  167,  167,  164,  165,
      168,  169,  170,  171,  173,  174,  175,  170,  177,  173,

      166,  176,  178,  181,  183,  168,  169,  171,  176,  174,
      179,  183,  184,  215,  175,  179,  184,  178,  177,  188,
      215,  188,  188,  188,  188,  193,  193,  193,  193,  181,
      189,  199,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  190,  546,  190,  190,  190,  190,  191,
      199,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  192,  202,  192,  192,  192,  192,  194,  543,
      194,  194,  194,  194,  194,  196,  202,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  197,  197,
      197,  197,  198,  200,  198,  198,  198,  198,  203,  204,

      205,  208,  210,  204,  209,  211,  214,  213,  210,  214,
      219,  200,  213,  205,  208,  216,  217,  220,  221,  218,
      203,  238,  209,  211,  218,  219,  222,  239,  216,  249,
      221,  240,  239,  249,  217,  222,  240,  220,  225,  225,
      225,  225,  226,  238,  226,  226,  226,  226,  226,  228,
      540,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  229,  229,  229,  229,  230,  258,  230,  230,
      230,  230,  231,  539,  231,  231,  231,  231,  232,  251,
      232,  232,  232,  232,  233,  258,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  234,  251,  234,

      234,  234,  234,  235,  246,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  236,  241,  236,  236,
      236,  236,  241,  242,  245,  245,  246,  247,  242,  248,
      250,  252,  252,  253,  254,  255,  247,  257,  262,  274,
      262,  262,  262,  262,  274,  250,  257,  536,  533,  255,
      530,  248,  281,  254,  263,  253,  263,  263,  263,  263,
      264,  281,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  265,  527,  265,  265,  265,  265,  266,
      286,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  267,  286,  267,  267,  267,  267,  268,  268,

      268,  268,  269,  283,  269,  269,  269,  269,  269,  271,
      283,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  272,  272,  272,  272,  273,  276,  273,  273,
      273,  273,  282,  284,  285,  287,  288,  282,  284,  276,
      287,  285,  289,  290,  291,  288,  292,  289,  524,  291,
      521,  307,  292,  296,  296,  296,  296,  300,  300,  300,
      300,  297,  290,  297,  297,  297,  297,  297,  299,  307,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  301,  518,  301,  301,  301,  301,  302,  302,  302,
      302,  303,  316,  303,  303,  303,  303,  303,  303,  303,

      303,  303,  303,  303,  304,  316,  304,  304,  304,  304,
      305,  312,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  306,  311,  306,  306,  306,  306,  312,
      314,  315,  318,  317,  319,  322,  342,  343,  311,  365,
      322,  362,  343,  315,  365,  342,  318,  362,  314,  344,
      315,  317,  319,  326,  326,  326,  326,  327,  344,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      328,  515,  328,  328,  328,  328,  329,  383,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  330,
      383,  330,  330,  330,  330,  331,  512,  331,  331,  331,

      331,  331,  333,  345,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  334,  334,  334,  334,  335,
      348,  335,  335,  335,  335,  345,  351,  509,  351,  351,
      351,  351,  351,  354,  354,  354,  354,  363,  506,  380,
      348,  353,  503,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  355,  363,  355,  355,  355,  355,
      356,  380,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  357,  501,  357,  357,  357,  357,  358,
      364,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  359,  366,  359,  359,  359,  359,  500,  379,

      364,  490,  366,  370,  379,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  371,  489,  371,  371,
      371,  371,  372,  426,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  373,  426,  373,  373,  373,
      373,  374,  487,  374,  374,  374,  374,  374,  376,  486,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  377,  377,  377,  377,  378,  382,  378,  378,  378,
      378,  386,  485,  386,  386,  386,  386,  386,  389,  389,
      389,  389,  484,  482,  382,  388,  481,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  390,  480,

      390,  390,  390,  390,  391,  479,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  392,  477,  392,
      392,  392,  392,  393,  395,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  394,  396,  394,  394,
      394,  394,  396,  398,  395,  412,  476,  475,  398,  402,
      474,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  403,  412,  403,  403,  403,  403,  404,  472,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  405,  471,  405,  405,  405,  405,  406,  469,  406,
      406,  406,  406,  406,  408,  468,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  409,  409,  409,
      409,  410,  411,  410,  410,  410,  410,  463,  462,  460,
      417,  411,  417,  417,  417,  417,  417,  419,  456,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      420,  420,  420,  420,  421,  455,  421,  421,  421,  421,
      422,  454,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  423,  453,  423,  423,  423,  423,  424,
      447,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  425,  444,  425,  425,  425,  425,  432,  442,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,

      432,  433,  437,  433,  433,  433,  433,  434,  441,  434,
      434,  434,  434,  441,  434,  434,  434,  434,  434,  434,
      435,  431,  435,  435,  435,  435,  436,  430,  436,  436,
      436,  436,  436,  438,  429,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  440,  428,  440,  440,
      440,  440,  446,  427,  446,  446,  446,  446,  446,  448,
      418,  448,  448,  448,  448,  415,  448,  448,  448,  448,
      448,  448,  449,  414,  449,  449,  449,  449,  450,  413,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  451,  407,  451,  451,  451,  451,  457,  401,  457,

      457,  457,  457,  400,  457,  457,  457,  457,  457,  457,
      458,  399,  458,  458,  458,  458,  459,  397,  459,  459,
      459,  459,  459,  465,  387,  465,  465,  465,  465,  492,
      492,  492,  492,  492,  493,  493,  493,  493,  493,  494,
      494,  494,  494,  494,  495,  385,  495,  495,  495,  496,
      496,  496,  496,  496,  497,  497,  497,  498,  384,  498,
      498,  498,  499,  499,  502,  502,  504,  504,  505,  505,
      507,  507,  508,  508,  510,  510,  511,  511,  513,  513,
      514,  514,  516,  516,  517,  517,  519,  519,  520,  520,
      522,  522,  523,  523,  525,  525,  526,  526,  528,  528,

      529,  529,  531,  531,  532,  532,  534,  534,  535,  535,
      537,  537,  538,  538,  541,  541,  542,  542,  544,  544,
      545,  545,  548,  548,  549,  549,  551,  551,  554,  554,
      555,  555,  556,  556,  558,  558,  559,  559,  560,  560,
      562,  562,  563,  563,  564,  564,  566,  566,  567,  567,
      568,  568,  570,  570,  381,  375,  369,  368,  367,  352,
      350,  349,  347,  346,  341,  340,  339,  338,  337,  336,
      332,  325,  324,  323,  321,  320,  313,  310,  309,  308,
      298,  295,  294,  293,  280,  279,  278,  277,  275,  270,
      261,  260,  259,  256,  244,  243,  237,  227,  224,  223,

      212,  207,  206,  201,  195,  187,  186,  185,  172,  163,
      159,  149,  148,  147,  131,  127,  126,  115,  114,   91,
       85,   76,   75,   74,   57,   56,   54,   49,   45,   44,
       41,   36,   23,   22,   18,   17,   14,   12,    7,    4,
        3,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[55] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_clntParser_stype yylval;
}
#line 1008 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1113 "ClntLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 492 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1742 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{return clntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{return clntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{return clntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{return clntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{return clntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{return clntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{return clntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{return clntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{return clntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{return clntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{return clntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{return clntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return clntParser::PREF_TIME_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return clntParser::VALID_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return clntParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return clntParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{return clntParser::OPTION_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return clntParser::DNS_SERVER_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return clntParser::DOMAIN_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return clntParser::NTP_SERVER_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return clntParser::TIME_ZONE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return clntParser::SIP_SERVER_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return clntParser::SIP_DOMAIN_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return clntParser::FQDN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return clntParser::NIS_SERVER_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return clntParser::NIS_DOMAIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return clntParser::NISP_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return clntParser::NISP_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return clntParser::LIFETIME_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return clntParser::REJECT_SERVERS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
{ return clntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{ return clntParser::RAPID_COMMIT_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
{ return clntParser::UNICAST_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 89 "ClntLexer.l"
;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 91 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 98 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 99 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 41:
YY_RULE_SETUP
#line 106 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 115 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 124 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 134 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 143 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 152 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 161 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 170 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return clntParser::STRING_;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 177 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return clntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return clntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return clntParser::STRING_;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 198 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return clntParser::DUID_;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 229 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return clntParser::HEXNUMBER_;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 238 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return clntParser::INTNUMBER_;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 248 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 252 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1607 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 492 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 492 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 491);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 252 "ClntLexer.l"



