#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 71
#define YY_END_OF_BUFFER 72
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[640] =
    {   0,
        1,    1,    0,    0,    0,    0,   72,   70,    2,    1,
        1,   70,   53,   70,   70,   69,   69,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   57,   57,   71,    1,    1,
        1,    0,   65,   53,    0,   65,   55,   54,   69,    0,
        0,   68,    0,   62,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,    6,   66,   66,   66,
       66,   66,   66,   66,   66,   39,   66,   66,   66,   66,
       66,   66,   18,   19,    7,   66,   66,   66,   66,   66,
       56,   54,   69,    0,    0,   61,   67,   60,   60,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   69,    0,    0,    0,   59,   59,    0,   60,    0,
       60,   66,   66,   66,   45,   66,   66,   66,   66,   66,
       27,    8,   66,   66,   66,   66,   66,    0,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   69,    0,    0,    0,    0,
       59,    0,   59,    0,   60,   60,   60,   60,   66,   66,
       66,   66,   66,   66,   66,   66,   66,    3,   66,   66,

       66,   66,   66,   66,    0,   66,   66,   66,    9,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,    0,    0,    0,    0,   59,
       59,   59,   59,    0,   60,   60,   60,    0,   60,   66,
       66,   66,   66,   66,   22,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,    0,    0,   66,   66,   66,
       66,   20,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,    0,    0,    0,   59,
       59,   59,    0,   59,    0,    0,   60,   60,   60,   60,
       66,    5,   66,   66,   66,   43,   41,   66,   66,   66,

       66,   66,   66,   66,   66,    0,    0,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   36,   66,   66,   66,    0,    0,    0,    0,    0,
       59,   59,   59,   59,    0,   60,   60,   60,    0,   60,
       66,   66,   66,   66,   66,   42,   66,   66,   66,   66,
       32,   66,   12,   13,    0,    0,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   14,    0,    0,    0,   59,   59,   59,    0,
       59,   64,   60,   60,   60,   60,   66,   66,   66,   66,
       66,   40,   66,   66,   66,   11,    0,    0,   66,   66,

        4,   66,   66,   66,   66,   66,   66,   66,   66,   10,
       66,   24,   66,   66,    0,    0,    0,   63,   59,   59,
       59,   59,   60,   60,   60,    0,   60,   66,   66,   66,
       66,   21,   66,   66,   66,    0,    0,   29,   28,   23,
       66,   66,   66,   66,   66,   66,   26,   25,   66,   66,
       66,    0,    0,   59,   59,   59,    0,   59,   60,   60,
       60,   60,   52,   66,   66,   46,   66,   66,   49,   31,
       30,   66,   66,   66,   66,   66,   15,   66,   66,   44,
        0,    0,    0,   59,   59,   59,   59,   60,   60,   60,
        0,   60,   66,   66,   51,   66,   66,   66,   66,   35,

       66,   66,   66,    0,    0,   59,   59,   59,    0,   59,
       60,   60,   60,   60,   66,   66,   50,   66,   66,   66,
       33,   66,   66,    0,    0,    0,   59,   59,   59,   59,
       60,   60,   60,    0,   60,   66,   66,   66,   66,   66,
       66,   17,    0,   58,   61,   59,   59,   59,    0,   59,
       60,   60,   60,   60,   66,   66,   66,   34,   66,   66,
        0,   58,    0,   59,   59,   59,   59,   59,   60,   60,
       60,    0,   60,   66,   47,   66,   66,   66,   58,   61,
       59,    0,   59,   59,   59,   59,   60,   60,   60,   66,
       16,   38,   66,   58,   59,   59,   59,   59,   60,   60,

       60,   66,   66,   59,   59,    0,   59,   59,   60,   66,
       66,   59,   59,   60,   66,   66,   59,   59,    0,   48,
       37,   59,   59,   59,   59,    0,   59,   59,   59,   59,
        0,   59,   59,   59,   59,    0,   59,   59,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    4,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[718] =
    {   0,
        0,    0, 1695, 1694,    0,    0, 1701, 1704, 1704,   41,
       43, 1695,    0, 1692,   40,   40, 1657, 1680,   72,   46,
       95,   97,   98,  126,   48,   38,   43, 1663,   96,   50,
      130,  140, 1664,   56, 1662, 1704, 1681, 1704,   46,  119,
      121, 1687, 1704,    0, 1684, 1683, 1704,    0,  155, 1672,
      146, 1704,    0,  168,    0,  172, 1667,    0, 1655, 1649,
     1661, 1648, 1653, 1656, 1648, 1659, 1653, 1660,  116, 1654,
     1652, 1639, 1664, 1640, 1635,    0, 1649, 1637, 1642, 1633,
     1634,  102,    0,    0,    0, 1636, 1639, 1635, 1632, 1627,
     1704,    0,  185,  198, 1644,  202,    0,  208,  221,  225,

     1625, 1628, 1633, 1635, 1646, 1637, 1633, 1631, 1621, 1630,
     1630, 1629, 1622, 1625, 1636,  240,  231, 1635, 1618, 1620,
     1616, 1619, 1614, 1629, 1601, 1611, 1614, 1615, 1608, 1612,
     1604,  245,  239, 1614, 1613,  260,  273,  277,  283,  294,
      300,  304,  143, 1587,    0, 1592, 1591, 1600, 1615, 1589,
        0,    0, 1601, 1585, 1585, 1583,  299, 1609,  300, 1586,
     1599, 1580, 1583,  309, 1593, 1593, 1579,  311, 1589, 1590,
     1599, 1590, 1586, 1574, 1595,  324, 1587, 1586, 1585,  329,
      337,  348,  354,  360,  366,  379,  385,  398, 1584, 1567,
     1563, 1568, 1560, 1574, 1564,  388, 1568,    0, 1567, 1555,

     1565, 1568, 1557, 1570,  313, 1555, 1564, 1554,    0, 1562,
     1552, 1547, 1540, 1570, 1542, 1541, 1545, 1554, 1546, 1537,
     1530, 1536, 1561, 1535, 1548, 1551, 1550, 1549,  405,  415,
      428,  434,  447,  451,  457, 1548,  464,  475,  481, 1546,
     1527, 1530, 1551, 1525,    0, 1528, 1529, 1515, 1526, 1516,
     1544, 1523, 1513, 1530, 1520, 1517, 1526, 1517, 1511, 1522,
     1509,    0, 1521, 1532, 1521, 1530, 1503, 1508, 1502, 1514,
     1525, 1502, 1496, 1503, 1521, 1504, 1512, 1511,  485,  491,
     1510,  498,  509,  515,  521,  527,  533,  546,  552,  565,
     1491,    0, 1487,  341, 1485,    0, 1486, 1489, 1499, 1498,

     1489, 1496, 1495, 1494, 1493, 1484, 1478, 1494, 1472, 1484,
     1470, 1487, 1486, 1474, 1469, 1494, 1485, 1463, 1465, 1465,
     1468,    0, 1472, 1461, 1461, 1478, 1477, 1476,  571,  577,
      583,  596,  602,  615,  619,  625, 1475,  632,  643,  649,
     1473, 1454, 1459, 1456, 1465,    0, 1464, 1454, 1474, 1451,
        0, 1453,    0,    0, 1463, 1441, 1453, 1456, 1453, 1454,
     1465, 1452, 1443, 1450, 1450, 1444, 1447, 1432, 1444, 1444,
     1442, 1431,    0, 1446, 1445,  653,  659, 1444,  666,  677,
      683,  687,  693,  706,  712,  725, 1430, 1449, 1440, 1426,
     1421,    0, 1418, 1424, 1432,    0, 1426, 1429, 1419, 1414,

        0, 1413,  386, 1418, 1416, 1410, 1418, 1412, 1407,    0,
     1421,    0, 1418, 1417, 1421, 1420, 1419,  729,  735,  748,
      754,  767,  773, 1418,  780,  791,  797, 1398, 1407, 1412,
     1409,    0, 1412, 1397, 1406, 1396, 1391,    0,    0,    0,
     1399, 1402, 1401, 1396, 1382, 1385,    0,    0, 1409, 1381,
     1397, 1399, 1398,  803, 1397,  810,  821,  827,  833,  846,
      852,  865,    0, 1382, 1402,    0, 1382, 1295,    0, 1704,
     1704, 1285, 1255, 1259, 1240, 1247,    0, 1233, 1232,    0,
     1228, 1222, 1214,  871,  884,  890,  903,  909, 1209,  916,
      927,  933, 1196, 1177,    0, 1178, 1171, 1148, 1161,    0,

     1139, 1136, 1125, 1132, 1119,  939, 1113,  946,  957,  963,
      969,  982,  988, 1001, 1107, 1086,    0, 1057, 1065, 1044,
        0, 1054, 1035, 1034, 1021, 1015, 1007, 1020, 1026, 1039,
     1045, 1002, 1052, 1063, 1069,  978,  982,  968,  946,  949,
      923,    0,  934,  928,    0, 1075,  911, 1082, 1093, 1099,
     1105, 1118, 1124, 1137,  899,  901,  872,    0,  864,  851,
      860,  847,  841,  828, 1143, 1156, 1162, 1175, 1181,  822,
     1188,    0, 1201,  788,    0,  793,  778,  754,  768, 1704,
      762,    0, 1207,  749, 1214, 1227, 1233, 1246,    0,  722,
        0,    0,  710,  720,  707,  701, 1252, 1265, 1271,  688,

        0,  673,  652,  654,  644,    0, 1278, 1704,    0,  608,
      606,  610,  597, 1704,  571,  571,  572,  566,    0,    0,
        0,  560,  547,  541,  528,    0,  522,  516,  510,  493,
        0,  486,  476,  459,  452,    0,  442,  429, 1704, 1294,
     1298, 1302, 1306, 1310, 1314, 1316,  437,  424, 1318,  421,
     1320, 1322,  420, 1324, 1326,  394, 1328, 1330,  388, 1332,
     1334,  375, 1336, 1338,  343, 1340, 1342,  330, 1344, 1346,
      309, 1348, 1350,  292, 1352, 1354,  282, 1356, 1358,  269,
     1360, 1362,  266, 1364, 1366,  253,  239, 1368, 1370,  230,
     1372, 1374,  217,  206, 1376, 1378,  193, 1380,  176,  160,

     1382, 1384, 1386,  127, 1388, 1390, 1392,   73, 1394, 1396,
     1398,   70, 1400, 1402, 1404,   48, 1406
    } ;

static yyconst flex_int16_t yy_def[718] =
    {   0,
      639,    1,  640,  640,  641,  641,  639,  639,  639,  639,
      639,  642,  643,  644,  639,  639,   16,  639,  639,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  639,  639,  639,  639,  639,
      639,  642,  639,  643,  644,  639,  639,  645,  639,  646,
       49,  639,  647,  648,   24,   24,   56,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      639,  645,  639,   93,  649,  650,  647,  639,   98,   56,

      100,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  639,  132,  651,  652,  639,  136,  639,  639,  653,
      139,  100,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  639,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  133,  133,  654,  655,  639,
      639,  656,  181,  639,  639,  185,  639,  187,  142,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,  639,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  639,  657,  658,  639,  639,
      230,  639,  232,  639,  639,  639,  639,  659,  237,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  639,  639,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  660,  661,  639,  639,
      639,  639,  662,  282,  639,  639,  639,  287,  639,  289,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,  639,  639,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  639,  663,  664,  639,  639,
      639,  331,  639,  333,  639,  639,  639,  639,  665,  338,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  639,  639,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  666,  667,  639,  639,  639,  639,  668,
      379,  639,  639,  383,  639,  385,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  639,  639,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  639,  669,  670,  639,  639,  419,
      639,  421,  639,  639,  639,  671,  425,   24,   24,   24,
       24,   24,   24,   24,   24,  639,  639,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  672,  673,  639,  639,  639,  674,  456,  639,  459,
      639,  461,   24,   24,   24,   24,   24,   24,   24,  639,
      639,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      639,  675,  676,  639,  484,  639,  486,  639,  639,  639,
      677,  490,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  678,  679,  639,  639,  639,  680,  508,
      639,  511,  639,  513,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  639,  681,  682,  639,  527,  639,  529,
      639,  639,  639,  683,  533,   24,   24,   24,   24,   24,
       24,   24,  684,  685,  686,  639,  639,  639,  687,  548,
      639,  551,  639,  553,   24,   24,   24,   24,   24,   24,
      639,  688,  639,  689,  639,  565,  639,  567,  639,  639,
      639,  690,  571,   24,   24,   24,   24,   24,  691,  639,
      692,  693,  639,  639,  639,  585,  639,  587,  694,   24,
       24,   24,   24,  639,  695,  696,  639,  597,  639,  639,

      697,   24,   24,  639,  698,  699,  639,  639,  700,   24,
       24,  701,  702,  639,   24,   24,  639,  703,  704,   24,
       24,  705,  706,  639,  707,  708,  709,  710,  639,  711,
      712,  713,  714,  639,  715,  716,  717,  639,    0,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639
    } ;

static yyconst flex_int16_t yy_nxt[1748] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   22,   23,   24,   24,   25,   24,   24,   26,   24,
       27,   28,   29,   24,   30,   31,   32,   33,   34,   35,
       24,   24,   24,   39,   40,   41,   40,   47,   39,   40,
      568,   48,   49,   49,   49,   49,   50,   51,   51,   51,
       51,   51,   51,   70,   52,   67,   56,   78,   72,   71,
       68,   79,  633,   88,   73,  628,   55,   89,   69,   74,
       53,   55,   55,   55,   56,   56,   56,   56,   50,   56,
       56,   56,   57,   56,   56,   55,   58,   55,   55,   55,

       55,   55,   59,   55,   55,   55,   55,   55,   55,   60,
       55,   55,   55,   55,   55,   56,   76,   56,   56,  125,
       61,   41,   40,   39,   40,   62,   63,   55,   55,  623,
       77,   66,   64,  112,   55,   55,  126,   65,   55,   55,
       55,   55,  639,   55,   55,   55,   55,   55,   55,   80,
       55,  113,  190,   83,   84,   81,   55,   85,   94,   94,
       94,   94,  614,   55,  191,   86,   82,   93,   93,   93,
       93,   50,   94,   94,   94,   94,   94,   94,  613,   52,
       98,   98,   98,   98,  100,  100,  100,  100,   50,  100,
      100,  100,  100,  100,  100,  609,   58,  132,  132,  132,

      132,   50,  133,  133,  133,  133,  133,  133,  601,   52,
      133,  133,  133,  133,  136,  136,  136,  136,  138,  596,
      139,  139,  139,  139,  140,  141,  141,  141,  141,  141,
      141,  639,  589,  141,  141,  141,  141,  142,  142,  142,
      142,  568,  142,  142,  142,  142,  142,  142,  158,  159,
      160,  177,  177,  177,  177,  564,  161,  176,  176,  176,
      176,   50,  177,  177,  177,  177,  177,  177,  554,   52,
      180,  530,  181,  181,  181,  181,  182,  183,  183,  183,
      183,  183,  183,  639,  514,  183,  183,  183,  183,  184,
      184,  184,  184,  138,  487,  185,  185,  185,  185,  140,

      186,  186,  186,  186,  186,  186,  187,  187,  187,  187,
      639,  462,  186,  186,  186,  186,  189,  189,  189,  189,
      206,  189,  189,  189,  189,  189,  189,  202,  203,  204,
      212,  217,  422,  256,  213,  207,  176,  176,  176,  176,
      639,  229,  229,  229,  229,  386,  218,  180,  257,  230,
      230,  230,  230,  182,  231,  231,  231,  231,  231,  231,
      232,  232,  232,  232,  639,  343,  231,  231,  231,  231,
      234,  344,  184,  184,  184,  184,  138,  334,  235,  235,
      235,  235,  140,  236,  236,  236,  236,  236,  236,  639,
      290,  236,  236,  236,  236,  138,  233,  237,  237,  237,

      237,  238,  239,  239,  239,  239,  239,  239,  639,  246,
      239,  239,  239,  239,  441,  279,  247,  229,  229,  229,
      229,  442,  188,  137,  248,  180,   99,  280,  280,  280,
      280,  182,  281,  281,  281,  281,  281,  281,  639,   97,
      281,  281,  281,  281,  180,  636,  282,  282,  282,  282,
      283,  284,  284,  284,  284,  284,  284,  639,  636,  284,
      284,  284,  284,  285,  285,  285,  285,  138,  636,  286,
      286,  286,  286,  140,  138,  631,  287,  287,  287,  287,
      238,  288,  288,  288,  288,  288,  288,  289,  289,  289,
      289,  639,  636,  288,  288,  288,  288,  329,  329,  329,

      329,  180,  631,  330,  330,  330,  330,  182,  180,  631,
      331,  331,  331,  331,  283,  332,  332,  332,  332,  332,
      332,  333,  333,  333,  333,  639,  626,  332,  332,  332,
      332,  335,  631,  285,  285,  285,  285,  138,  626,  286,
      286,  286,  286,  138,  626,  336,  336,  336,  336,  238,
      337,  337,  337,  337,  337,  337,  639,  619,  337,  337,
      337,  337,  138,  626,  338,  338,  338,  338,  339,  340,
      340,  340,  340,  340,  340,  639,  619,  340,  340,  340,
      340,  376,  619,  329,  329,  329,  329,  180,  606,  330,
      330,  330,  330,  180,  621,  377,  377,  377,  377,  283,

      378,  378,  378,  378,  378,  378,  639,  620,  378,  378,
      378,  378,  180,  619,  379,  379,  379,  379,  380,  381,
      381,  381,  381,  381,  381,  639,  606,  381,  381,  381,
      381,  382,  382,  382,  382,  138,  616,  286,  286,  286,
      286,  238,  138,  615,  383,  383,  383,  383,  339,  384,
      384,  384,  384,  384,  384,  385,  385,  385,  385,  639,
      606,  384,  384,  384,  384,  418,  418,  418,  418,  180,
      582,  330,  330,  330,  330,  283,  180,  611,  419,  419,
      419,  419,  380,  420,  420,  420,  420,  420,  420,  421,
      421,  421,  421,  639,  610,  420,  420,  420,  420,  382,

      382,  382,  382,  138,  572,  423,  423,  423,  423,  339,
      424,  424,  424,  424,  424,  424,  639,  606,  424,  424,
      424,  424,  138,  582,  425,  425,  425,  425,  426,  427,
      427,  427,  427,  427,  427,  639,  563,  427,  427,  427,
      427,  418,  418,  418,  418,  180,  603,  454,  454,  454,
      454,  380,  455,  455,  455,  455,  455,  455,  639,  602,
      455,  455,  455,  455,  180,  549,  456,  456,  456,  456,
      457,  458,  458,  458,  458,  458,  458,  639,  582,  458,
      458,  458,  458,  138,  563,  286,  286,  286,  286,  339,
      138,  593,  459,  459,  459,  459,  426,  460,  460,  460,

      460,  460,  460,  461,  461,  461,  461,  639,  592,  460,
      460,  460,  460,  180,  591,  330,  330,  330,  330,  380,
      180,  590,  484,  484,  484,  484,  457,  485,  485,  485,
      485,  485,  485,  486,  486,  486,  486,  639,  534,  485,
      485,  485,  485,  138,  582,  488,  488,  488,  488,  426,
      489,  489,  489,  489,  489,  489,  639,  580,  489,  489,
      489,  489,  138,  563,  490,  490,  490,  490,  491,  492,
      492,  492,  492,  492,  492,  639,  526,  492,  492,  492,
      492,  180,  578,  506,  506,  506,  506,  457,  507,  507,
      507,  507,  507,  507,  639,  577,  507,  507,  507,  507,

      180,  576,  508,  508,  508,  508,  509,  510,  510,  510,
      510,  510,  510,  639,  575,  510,  510,  510,  510,  138,
      574,  286,  286,  286,  286,  426,  138,  509,  511,  511,
      511,  511,  491,  512,  512,  512,  512,  512,  512,  513,
      513,  513,  513,  639,  563,  512,  512,  512,  512,  180,
      526,  330,  330,  330,  330,  457,  180,  560,  527,  527,
      527,  527,  509,  528,  528,  528,  528,  528,  528,  529,
      529,  529,  529,  639,  559,  528,  528,  528,  528,  138,
      558,  531,  531,  531,  531,  491,  532,  532,  532,  532,
      532,  532,  639,  557,  532,  532,  532,  532,  138,  556,

      533,  533,  533,  533,  534,  535,  535,  535,  535,  535,
      535,  639,  555,  535,  535,  535,  535,  180,  491,  546,
      546,  546,  546,  509,  547,  547,  547,  547,  547,  547,
      639,  545,  547,  547,  547,  547,  180,  526,  548,  548,
      548,  548,  549,  550,  550,  550,  550,  550,  550,  639,
      483,  550,  550,  550,  550,  138,  542,  286,  286,  286,
      286,  491,  138,  541,  551,  551,  551,  551,  534,  552,
      552,  552,  552,  552,  552,  553,  553,  553,  553,  639,
      540,  552,  552,  552,  552,  180,  539,  330,  330,  330,
      330,  509,  180,  538,  565,  565,  565,  565,  549,  566,

      566,  566,  566,  566,  566,  567,  567,  567,  567,  639,
      537,  566,  566,  566,  566,  138,  536,  569,  569,  569,
      569,  534,  570,  570,  570,  570,  570,  570,  639,  457,
      570,  570,  570,  570,  138,  526,  571,  571,  571,  571,
      572,  573,  573,  573,  573,  573,  573,  639,  483,  573,
      573,  573,  573,  180,  523,  583,  583,  583,  583,  549,
      584,  584,  584,  584,  584,  584,  639,  522,  584,  584,
      584,  584,  180,  521,  585,  585,  585,  585,  520,  586,
      586,  586,  586,  586,  586,  639,  519,  586,  586,  586,
      586,  138,  518,  286,  286,  286,  286,  534,  138,  517,

      587,  587,  587,  587,  572,  588,  588,  588,  588,  588,
      588,  639,  516,  588,  588,  588,  588,  180,  515,  330,
      330,  330,  330,  549,  180,  426,  597,  597,  597,  597,
       96,  598,  598,  598,  598,  598,  598,  639,  483,  598,
      598,  598,  598,  138,  417,  599,  599,  599,  599,  572,
      600,  600,  600,  600,  600,  600,  639,  503,  600,  600,
      600,  600,  180,  502,  607,  607,  607,  607,  501,  608,
      608,  608,  608,  608,  608,  639,  500,  608,  608,  608,
      608,  138,  499,  286,  286,  286,  286,  572,  180,  498,
      330,  330,  330,  330,   36,   36,   36,   36,   38,   38,

       38,   38,   42,   42,   42,   42,   44,  497,   44,   44,
       45,   45,   45,   45,   92,  496,   92,   92,   95,   95,
      134,  134,  178,  178,  179,  179,  226,  226,  227,  227,
      277,  277,  278,  278,  326,  326,  327,  327,  374,  374,
      375,  375,  415,  415,  416,  416,  452,  452,  453,  453,
      481,  481,  482,  482,  504,  504,  505,  505,  524,  524,
      525,  525,  543,  543,  544,  544,  561,  561,  562,  562,
      579,  579,  581,  581,  594,  594,  595,  595,  604,  604,
      605,  605,  612,  612,  617,  617,  618,  618,  622,  622,
      624,  624,  625,  625,  627,  627,  629,  629,  630,  630,

      632,  632,  634,  634,  635,  635,  637,  637,  638,  638,
      495,  494,  493,  380,  483,  417,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  339,   96,  417,  328,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  440,  439,  438,
      437,  436,  435,  434,  433,  432,  431,  430,  429,  428,
      283,  417,  328,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  405,  404,  403,  402,  401,  400,  399,  398,
      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  238,   96,  328,  228,  373,  372,  371,  370,  369,

      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  342,  341,  182,  328,  228,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  140,   96,  228,  135,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  258,  255,  254,  253,
      252,  251,  250,  249,  245,  244,  243,  242,  241,  240,

      639,  228,  135,  639,  225,  224,  223,  222,  221,  220,
      219,  216,  215,  214,  211,  210,  209,  208,  205,  201,
      200,  199,  198,  197,  196,  195,  194,  193,  192,   96,
      135,  175,  174,  173,  172,  171,  170,  169,  168,  167,
      166,  165,  164,  163,  162,  157,  156,  155,  154,  153,
      152,  151,  150,  149,  148,  147,  146,  145,  144,  143,
      135,  131,  130,  129,  128,  127,  124,  123,  122,  121,
      120,  119,  118,  117,  116,  115,  114,  111,  110,  109,
      108,  107,  106,  105,  104,  103,  102,  101,   96,   45,
       46,   43,   91,   90,   87,   75,   54,  639,   46,   43,

      639,   37,   37,    7,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639
    } ;

static yyconst flex_int16_t yy_chk[1748] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   39,   39,
      716,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   26,   16,   25,   20,   30,   27,   26,
       25,   30,  712,   34,   27,  708,   20,   34,   25,   27,
       16,   19,   19,   20,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   21,   29,   22,   23,   82,
       21,   40,   40,   41,   41,   21,   21,   22,   23,  704,
       29,   23,   21,   69,   22,   23,   82,   22,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   31,
       24,   69,  143,   32,   32,   31,   24,   32,   51,   51,
       51,   51,  700,   24,  143,   32,   31,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  699,   49,
       54,   54,   54,   54,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,  697,   56,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,  694,   93,
       94,   94,   94,   94,   96,   96,   96,   96,   98,  693,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   99,  690,   99,   99,   99,   99,  100,  100,  100,
      100,  687,  100,  100,  100,  100,  100,  100,  116,  116,
      117,  133,  133,  133,  133,  686,  117,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  683,  132,
      136,  680,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  137,  677,  137,  137,  137,  137,  138,
      138,  138,  138,  139,  674,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  140,  140,  140,  140,
      141,  671,  141,  141,  141,  141,  142,  142,  142,  142,
      159,  142,  142,  142,  142,  142,  142,  157,  157,  157,
      164,  168,  668,  205,  164,  159,  176,  176,  176,  176,
      176,  180,  180,  180,  180,  665,  168,  181,  205,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      182,  182,  182,  182,  183,  294,  183,  183,  183,  183,
      184,  294,  184,  184,  184,  184,  185,  662,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  186,
      659,  186,  186,  186,  186,  187,  656,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  188,  196,
      188,  188,  188,  188,  403,  229,  196,  229,  229,  229,
      229,  403,  653,  650,  196,  230,  648,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  231,  647,
      231,  231,  231,  231,  232,  638,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  233,  637,  233,
      233,  233,  233,  234,  234,  234,  234,  235,  635,  235,
      235,  235,  235,  235,  237,  634,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  238,  238,  238,
      238,  239,  633,  239,  239,  239,  239,  279,  279,  279,

      279,  280,  632,  280,  280,  280,  280,  280,  282,  630,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  283,  283,  283,  283,  284,  629,  284,  284,  284,
      284,  285,  628,  285,  285,  285,  285,  286,  627,  286,
      286,  286,  286,  287,  625,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  288,  624,  288,  288,
      288,  288,  289,  623,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  290,  622,  290,  290,  290,
      290,  329,  618,  329,  329,  329,  329,  330,  617,  330,
      330,  330,  330,  331,  616,  331,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  331,  332,  615,  332,  332,
      332,  332,  333,  613,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  334,  612,  334,  334,  334,
      334,  335,  335,  335,  335,  336,  611,  336,  336,  336,
      336,  336,  338,  610,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  339,  339,  339,  339,  340,
      605,  340,  340,  340,  340,  376,  376,  376,  376,  377,
      604,  377,  377,  377,  377,  377,  379,  603,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  380,
      380,  380,  380,  381,  602,  381,  381,  381,  381,  382,

      382,  382,  382,  383,  600,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  384,  596,  384,  384,
      384,  384,  385,  595,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  386,  594,  386,  386,  386,
      386,  418,  418,  418,  418,  419,  593,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  420,  590,
      420,  420,  420,  420,  421,  584,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  422,  581,  422,
      422,  422,  422,  423,  579,  423,  423,  423,  423,  423,
      425,  578,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  426,  426,  426,  426,  427,  577,  427,
      427,  427,  427,  454,  576,  454,  454,  454,  454,  454,
      456,  574,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  457,  457,  457,  457,  458,  570,  458,
      458,  458,  458,  459,  564,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  460,  563,  460,  460,
      460,  460,  461,  562,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  462,  561,  462,  462,  462,
      462,  484,  560,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  485,  559,  485,  485,  485,  485,

      486,  557,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  487,  556,  487,  487,  487,  487,  488,
      555,  488,  488,  488,  488,  488,  490,  547,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  491,
      491,  491,  491,  492,  544,  492,  492,  492,  492,  506,
      543,  506,  506,  506,  506,  506,  508,  541,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  509,
      509,  509,  509,  510,  540,  510,  510,  510,  510,  511,
      539,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  512,  538,  512,  512,  512,  512,  513,  537,

      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  514,  536,  514,  514,  514,  514,  527,  532,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      528,  526,  528,  528,  528,  528,  529,  525,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  530,
      524,  530,  530,  530,  530,  531,  523,  531,  531,  531,
      531,  531,  533,  522,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  534,  534,  534,  534,  535,
      520,  535,  535,  535,  535,  546,  519,  546,  546,  546,
      546,  546,  548,  518,  548,  548,  548,  548,  548,  548,

      548,  548,  548,  548,  548,  549,  549,  549,  549,  550,
      516,  550,  550,  550,  550,  551,  515,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  552,  507,
      552,  552,  552,  552,  553,  505,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  554,  504,  554,
      554,  554,  554,  565,  503,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  566,  502,  566,  566,
      566,  566,  567,  501,  567,  567,  567,  567,  499,  567,
      567,  567,  567,  567,  567,  568,  498,  568,  568,  568,
      568,  569,  497,  569,  569,  569,  569,  569,  571,  496,

      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  573,  494,  573,  573,  573,  573,  583,  493,  583,
      583,  583,  583,  583,  585,  489,  585,  585,  585,  585,
      483,  585,  585,  585,  585,  585,  585,  586,  482,  586,
      586,  586,  586,  587,  481,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  588,  479,  588,  588,
      588,  588,  597,  478,  597,  597,  597,  597,  476,  597,
      597,  597,  597,  597,  597,  598,  475,  598,  598,  598,
      598,  599,  474,  599,  599,  599,  599,  599,  607,  473,
      607,  607,  607,  607,  640,  640,  640,  640,  641,  641,

      641,  641,  642,  642,  642,  642,  643,  472,  643,  643,
      644,  644,  644,  644,  645,  468,  645,  645,  646,  646,
      649,  649,  651,  651,  652,  652,  654,  654,  655,  655,
      657,  657,  658,  658,  660,  660,  661,  661,  663,  663,
      664,  664,  666,  666,  667,  667,  669,  669,  670,  670,
      672,  672,  673,  673,  675,  675,  676,  676,  678,  678,
      679,  679,  681,  681,  682,  682,  684,  684,  685,  685,
      688,  688,  689,  689,  691,  691,  692,  692,  695,  695,
      696,  696,  698,  698,  701,  701,  702,  702,  703,  703,
      705,  705,  706,  706,  707,  707,  709,  709,  710,  710,

      711,  711,  713,  713,  714,  714,  715,  715,  717,  717,
      467,  465,  464,  455,  453,  452,  451,  450,  449,  446,
      445,  444,  443,  442,  441,  437,  436,  435,  434,  433,
      431,  430,  429,  428,  424,  417,  416,  415,  414,  413,
      411,  409,  408,  407,  406,  405,  404,  402,  400,  399,
      398,  397,  395,  394,  393,  391,  390,  389,  388,  387,
      378,  375,  374,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,
      355,  352,  350,  349,  348,  347,  345,  344,  343,  342,
      341,  337,  328,  327,  326,  325,  324,  323,  321,  320,

      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  295,  293,  291,  281,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  264,  263,  261,  260,  259,  258,  257,  256,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  246,  244,
      243,  242,  241,  240,  236,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  218,  217,  216,  215,  214,
      213,  212,  211,  210,  208,  207,  206,  204,  203,  202,
      201,  200,  199,  197,  195,  194,  193,  192,  191,  190,

      189,  179,  178,  177,  175,  174,  173,  172,  171,  170,
      169,  167,  166,  165,  163,  162,  161,  160,  158,  156,
      155,  154,  153,  150,  149,  148,  147,  146,  144,  135,
      134,  131,  130,  129,  128,  127,  126,  125,  124,  123,
      122,  121,  120,  119,  118,  115,  114,  113,  112,  111,
      110,  109,  108,  107,  106,  105,  104,  103,  102,  101,
       95,   90,   89,   88,   87,   86,   81,   80,   79,   78,
       77,   75,   74,   73,   72,   71,   70,   68,   67,   66,
       65,   64,   63,   62,   61,   60,   59,   57,   50,   46,
       45,   42,   37,   35,   33,   28,   18,   17,   14,   12,

        7,    4,    3,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[72] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1065 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1170 "ClntLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 640 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1704 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "ClntLexer.l"
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "ClntLexer.l"
{ return ClntParser::AUTH_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "ClntLexer.l"
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "ClntLexer.l"
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "ClntLexer.l"
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "ClntLexer.l"
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "ClntLexer.l"
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "ClntLexer.l"
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "ClntLexer.l"
;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "ClntLexer.l"
;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 102 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 109 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 110 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 58:
YY_RULE_SETUP
#line 117 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 126 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 145 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 154 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 163 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 172 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 181 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 188 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 209 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 240 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 249 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 259 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 263 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1749 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 640 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 640 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 639);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 263 "ClntLexer.l"



