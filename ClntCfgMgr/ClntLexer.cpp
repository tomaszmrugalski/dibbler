
#line 3 "ClntLexer.cpp"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* The c++ scanner is a mess. The FlexLexer.h header file relies on the
 * following macro. This is required in order to pass the c++-multiple-scanners
 * test in the regression suite. We get reports that it breaks inheritance.
 * We will address this in a future release of flex, or omit the C++ scanner
 * altogether.
 */
#define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <errno.h>
#include <iostream>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined(__STDC__)

#define YY_USE_CONST

#endif /* defined (__STDC__) */
#endif /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start)-1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the
 * main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* Note: We specifically omit the test for yy_rule_can_match_eol because it
 * requires access to the local variable yy_act. Since yyless() is a macro, it
 * would break existing scanners that call yyless() from OUTSIDE yylex. One
 * obvious solution it to make yy_act a global. I tried that, and saw a 5%
 * performance hit in a non-yylineno scanner, because yy_act is normally
 * declared as a register variable-- so it is not worth it.
 */
#define YY_LESS_LINENO(n)                  \
  do {                                     \
    int yyl;                               \
    for (yyl = n; yyl < yyleng; ++yyl)     \
      if (yytext[yyl] == '\n') --yylineno; \
  } while (0)
#define YY_LINENO_REWIND_TO(dst)         \
  do {                                   \
    const char *p;                       \
    for (p = yy_cp - 1; p >= (dst); --p) \
      if (*p == '\n') --yylineno;        \
  } while (0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                                           \
  do {                                                                                      \
    /* Undo effects of setting up yytext. */                                                \
    int yyless_macro_arg = (n);                                                             \
    YY_LESS_LINENO(yyless_macro_arg);                                                       \
    *yy_cp = (yy_hold_char);                                                                \
    YY_RESTORE_YY_MORE_OFFSET(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yytext again */                                          \
  } while (0)

#define unput(c) yyunput(c, (yytext_ptr))

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {

  std::istream *yy_input_file;

  char *yy_ch_buf;  /* input buffer */
  char *yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  yy_size_t yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc(yy_size_t);
void *yyrealloc(void *, yy_size_t);
void yyfree(void *);

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive)                            \
  {                                                                   \
    if (!YY_CURRENT_BUFFER) {                                         \
      yyensure_buffer_stack();                                        \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE); \
    }                                                                 \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;     \
  }

#define yy_set_bol(at_bol)                                            \
  {                                                                   \
    if (!YY_CURRENT_BUFFER) {                                         \
      yyensure_buffer_stack();                                        \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE); \
    }                                                                 \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                     \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION         \
  (yytext_ptr) = yy_bp;             \
  yyleng = (size_t)(yy_cp - yy_bp); \
  (yy_hold_char) = *yy_cp;          \
  *yy_cp = '\0';                    \
  (yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 101
#define YY_END_OF_BUFFER 102
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[867] = {
    0,   1,   1,   0,   0,   0,   0,   102, 100, 2,   1,   1,   100, 82,  100, 100, 99,
    99,  100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
    100, 100, 100, 100, 86,  86,  101, 1,   1,   1,   0,   94,  82,  0,   94,  84,  83,
    99,  0,   0,   98,  0,   91,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
    95,  95,  95,  95,  95,  11,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  53,
    95,  95,  95,  95,  95,  95,  95,  95,  25,  26,  12,  95,  95,  95,  95,  95,

    85,  83,  99,  0,   0,   0,   90,  96,  89,  89,  95,  95,  95,  95,  95,  95,  95,
    95,  95,  95,  95,  95,  95,  95,  8,   95,  95,  95,  95,  95,  95,  95,  95,  95,
    95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
    95,  95,  99,  0,   0,   0,   0,   88,  88,  0,   89,  0,   89,  95,  95,  77,  95,
    95,  95,  95,  95,  95,  95,  95,  7,   95,  34,  13,  95,  95,  95,  95,  95,  10,
    0,   95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,

    95,  95,  95,  95,  95,  95,  95,  99,  0,   97,  0,   0,   0,   88,  0,   88,  0,
    89,  89,  89,  89,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
    95,  3,   95,  95,  95,  95,  95,  95,  95,  0,   95,  95,  95,  95,  95,  95,  95,
    95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
    95,  0,   0,   0,   0,   0,   88,  88,  88,  88,  0,   89,  89,  89,  0,   89,  95,
    95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  29,  95,  95,  95,

    95,  95,  35,  95,  95,  95,  95,  95,  95,  95,  0,   0,   95,  95,  95,  95,  95,
    27,  95,  54,  95,  95,  95,  95,  95,  20,  95,  95,  95,  95,  95,  6,   95,  95,
    95,  95,  95,  0,   0,   0,   0,   88,  88,  88,  0,   88,  0,   0,   89,  89,  89,
    89,  95,  5,   95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  58,  56,  95,
    95,  95,  95,  95,  95,  95,  95,  95,  0,   0,   95,  95,  95,  95,  95,  95,  95,
    95,  95,  95,  95,  95,  43,  95,  95,  95,  95,  95,  95,  49,  95,  95,

    95,  97,  0,   0,   0,   0,   0,   88,  88,  88,  88,  0,   89,  89,  89,  0,   89,
    95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  57,
    95,  95,  95,  95,  42,  95,  95,  16,  17,  0,   0,   95,  95,  95,  95,  95,  95,
    95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  19,  0,   0,
    0,   0,   88,  88,  88,  0,   88,  93,  89,  89,  89,  89,  95,  95,  95,  95,  95,
    95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  55,  95,  95,  95,

    95,  15,  0,   0,   95,  95,  4,   95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
    95,  95,  14,  95,  31,  95,  95,  0,   0,   0,   0,   92,  88,  88,  88,  88,  89,
    89,  89,  0,   89,  95,  95,  95,  95,  95,  95,  67,  95,  95,  95,  95,  95,  95,
    95,  28,  95,  95,  95,  95,  18,  0,   0,   39,  38,  30,  95,  95,  95,  95,  95,
    95,  95,  95,  95,  33,  32,  95,  95,  95,  95,  97,  0,   0,   88,  88,  88,  0,
    88,  89,  89,  89,  89,  81,  95,  95,  95,  95,  95,  66,  95,  95,  95,

    95,  68,  95,  95,  95,  95,  61,  41,  40,  95,  95,  95,  95,  95,  95,  95,  95,
    95,  95,  95,  95,  95,  59,  0,   0,   0,   0,   88,  88,  88,  88,  89,  89,  89,
    0,   89,  9,   95,  95,  63,  95,  95,  95,  37,  95,  69,  95,  80,  95,  51,  95,
    95,  95,  95,  95,  47,  95,  95,  95,  76,  95,  95,  0,   0,   0,   88,  88,  88,
    0,   88,  89,  89,  89,  89,  95,  95,  64,  95,  36,  95,  95,  95,  62,  95,  95,
    95,  95,  95,  95,  95,  95,  95,  95,  97,  0,   0,   0,   88,  88,  88,

    88,  89,  89,  89,  0,   89,  95,  65,  95,  95,  95,  95,  95,  95,  95,  95,  95,
    95,  44,  95,  95,  23,  0,   0,   87,  90,  88,  88,  88,  0,   88,  89,  89,  89,
    89,  95,  79,  70,  95,  95,  95,  95,  95,  95,  95,  95,  24,  95,  0,   0,   87,
    0,   88,  88,  88,  88,  88,  89,  89,  89,  0,   89,  95,  71,  95,  95,  95,  95,
    95,  46,  95,  95,  95,  95,  95,  97,  87,  90,  88,  0,   88,  88,  88,  88,  89,
    89,  89,  95,  95,  95,  95,  95,  95,  21,  95,  45,  52,  95,  95,  0,

    87,  88,  88,  88,  88,  89,  89,  89,  95,  72,  73,  74,  75,  95,  22,  48,  95,
    0,   88,  88,  0,   88,  88,  89,  95,  95,  95,  97,  88,  88,  89,  95,  95,  95,
    0,   88,  88,  0,   60,  95,  50,  87,  88,  88,  78,  87,  88,  88,  0,   0,   88,
    88,  0,   88,  88,  0,   97,  88,  88,  0,   88,  88,  0,   88,  88,  0};

static yyconst flex_int32_t yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  1,  4,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  5,  6,  1,  1,  1,  7,  1,  1,
    8,  9,  1,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 20, 22, 1,  1,  1,  1,
    1,  1,  23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
    42, 43, 44, 45, 46, 47, 48, 1,  1,  1,  1,  1,  1,  49, 50, 51, 52,

    53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
    74, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,

    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

static yyconst flex_int32_t yy_meta[75] = {0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
                                           3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1,
                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

static yyconst flex_int16_t yy_base[952] = {
    0,    0,    0,    1425, 1415, 0,    0,    1393, 4032, 4032, 72,   74,   1380, 0,    1377,
    71,   71,   34,   1361, 134,  183,  184,  228,  215,  240,  297,  54,   77,   71,   321,
    210,  223,  308,  331,  354,  67,   87,   67,   4032, 1370, 4032, 108,  112,  115,  1376,
    4032, 0,    1373, 1371, 4032, 0,    399,  1355, 417,  4032, 0,    443,  0,    485,  83,
    171,  0,    179,  176,  185,  188,  200,  190,  227,  239,  235,  252,  235,  269,  280,
    331,  278,  279,  304,  300,  1330, 317,  333,  332,  0,    348,  338,  489,  336,  343,
    390,  408,  493,  0,    0,    0,    411,  416,  457,  482,  479,

    4032, 0,    547,  1317, 461,  1316, 591,  0,    635,  565,  677,  480,  482,  487,  495,
    500,  486,  501,  1327, 506,  494,  505,  505,  551,  0,    568,  570,  577,  607,  612,
    1326, 620,  123,  655,  1325, 634,  651,  655,  679,  674,  685,  676,  672,  684,  1324,
    678,  675,  687,  692,  695,  690,  696,  690,  737,  616,  1311, 1283, 1267, 783,  755,
    764,  827,  869,  801,  911,  803,  0,    784,  1277, 1276, 1275, 798,  831,  842,  840,
    1274, 835,  1273, 0,    864,  865,  873,  873,  917,  0,    1272, 917,  907,  904,  1262,
    909,  923,  921,  912,  924,  913,  925,  919,  959,  1261,

    939,  961,  1260, 944,  961,  951,  1259, 988,  1245, 1101, 1092, 1091, 1014, 1025, 1067,
    1043, 1085, 1111, 1129, 1155, 1173, 1090, 951,  949,  956,  1162, 952,  957,  954,  971,
    1035, 1058, 1176, 1110, 1154, 0,    1165, 1156, 1168, 1164, 1185, 1176, 1191, 1189, 1179,
    1190, 1183, 1193, 1191, 1196, 1193, 1188, 1101, 1207, 1195, 1220, 1212, 1207, 1213, 1224,
    1227, 1219, 1212, 1226, 1214, 1223, 1100, 1225, 1240, 1087, 1086, 1085, 1051, 1282, 1293,
    1311, 1337, 1355, 1138, 1381, 1050, 1393, 1435, 1411, 1245, 1282, 1304, 1345, 1411, 1399,
    1413, 1404, 1417, 1437, 1060, 1429, 0,    1434, 1435, 1438,

    1426, 1439, 0,    1431, 1059, 1441, 1443, 1434, 1453, 1445, 1444, 1455, 1455, 1451, 1464,
    1453, 1486, 0,    1483, 1058, 1486, 1481, 1057, 1056, 1484, 0,    1479, 1475, 1483, 1494,
    1055, 0,    1485, 1482, 1491, 1045, 1495, 1015, 997,  996,  1540, 1551, 937,  1563, 1605,
    1581, 1623, 1649, 1660, 1678, 1704, 1722, 1569, 906,  1584, 1617, 1648, 1671, 1721, 903,
    1708, 1711, 1730, 1703, 1715, 0,    1707, 1712, 1724, 1725, 1726, 1735, 1726, 1737, 1738,
    1740, 1734, 1739, 1757, 1737, 1751, 1739, 902,  1758, 1769, 1771, 1761, 1770, 1759, 1778,
    0,    1779, 1759, 1768, 1770, 1772, 1777, 0,    1783, 1774,

    1776, 889,  888,  887,  886,  1832, 1843, 1854, 1872, 1898, 1916, 1881, 1942, 884,  1954,
    1996, 1972, 1795, 1850, 1887, 1903, 1969, 1958, 1967, 1968, 1995, 1987, 2003, 1996, 1995,
    1999, 2007, 895,  0,    2008, 2000, 894,  2000, 0,    1998, 2005, 0,    0,    2017, 1997,
    2011, 2016, 2022, 2025, 2029, 893,  2028, 2043, 2036, 2029, 2046, 2031, 2044, 2049, 2053,
    2041, 2055, 2057, 2057, 2048, 0,    880,  849,  848,  2074, 2102, 847,  2114, 2156, 2132,
    2141, 2200, 2174, 2244, 2218, 2143, 2155, 858,  2190, 2210, 2211, 2240, 2253, 2251, 2241,
    2242, 2257, 2245, 2259, 2243, 2246, 0,    2243, 2251, 2261,

    2247, 0,    2258, 2263, 2255, 2252, 0,    2259, 2269, 2286, 857,  2285, 2286, 2282, 2283,
    2282, 2292, 2289, 2299, 0,    2306, 0,    2305, 2306, 844,  842,  841,  840,  2321, 2349,
    2367, 2393, 2411, 2437, 839,  2449, 2491, 2467, 2338, 2356, 2404, 2463, 2469, 2471, 0,
    2450, 2487, 2499, 2482, 2501, 2500, 2497, 0,    2489, 2507, 2494, 2505, 0,    2497, 2494,
    0,    0,    0,    2493, 2505, 2510, 2530, 2519, 2516, 2521, 2505, 2528, 0,    0,    2526,
    850,  2525, 2543, 837,  836,  807,  2565, 806,  2587, 2629, 2605, 2673, 2647, 2717, 2691,
    0,    2527, 2534, 2591, 2610, 2666, 0,    2680, 2684, 2706,

    817,  0,    2713, 2723, 2717, 2726, 0,    4032, 4032, 2712, 2726, 2715, 2725, 2730, 2729,
    2717, 816,  2733, 2736, 2727, 2727, 2733, 0,    803,  802,  801,  773,  2780, 2798, 2824,
    2842, 2868, 770,  2880, 2922, 2898, 0,    2782, 2798, 0,    2832, 2898, 2892, 0,    2918,
    0,    2900, 0,    2917, 0,    2928, 2912, 2929, 2918, 2937, 0,    2938, 2922, 2926, 0,
    2927, 2930, 713,  712,  711,  2981, 710,  2993, 3035, 3011, 3079, 3053, 3123, 3097, 715,
    2932, 0,    2998, 0,    3031, 3079, 3095, 0,    3085, 3127, 3128, 3112, 3115, 3133, 3118,
    3124, 714,  3134, 657,  656,  655,  654,  3177, 3195, 3221,

    3239, 3265, 653,  3277, 3319, 3295, 3123, 0,    3166, 656,  3202, 3217, 3291, 3283, 3282,
    3298, 3310, 3327, 0,    3325, 3314, 0,    650,  649,  648,  0,    3344, 647,  3370, 3412,
    3388, 3456, 3430, 3500, 3474, 3329, 0,    0,    377,  658,  3339, 3375, 3403, 3446, 3466,
    3477, 0,    3494, 645,  644,  605,  604,  603,  3547, 3521, 3591, 3565, 3609, 602,  3635,
    0,    3653, 3494, 0,    123,  602,  608,  3546, 3560, 0,    3560, 3598, 3639, 3638, 3634,
    571,  570,  4032, 569,  0,    3693, 568,  3705, 3679, 3749, 3723, 0,    3636, 572,  569,
    526,  475,  3663, 0,    3700, 0,    0,    3693, 3710, 467,

    466,  465,  464,  3793, 3768, 3811, 463,  0,    3770, 0,    0,    0,    0,    3792, 0,
    0,    3803, 462,  461,  423,  0,    3837, 4032, 0,    3794, 3811, 3801, 422,  421,  420,
    4032, 3796, 3812, 3811, 419,  418,  388,  0,    0,    3808, 0,    386,  385,  384,  0,
    382,  375,  374,  0,    372,  365,  321,  0,    320,  316,  0,    315,  314,  308,  306,
    279,  273,  0,    271,  264,  4032, 3875, 3879, 3883, 3887, 3891, 3895, 3897, 230,  3899,
    3901, 3903, 3905, 3907, 3909, 3911, 3913, 3915, 3917, 3919, 3921, 3923, 3925, 3927, 3929,
    3931, 3933, 3935, 3937, 3939, 3941, 3943, 3945, 3947, 3949,

    3951, 3953, 3955, 3957, 3959, 3961, 3963, 3965, 3967, 3969, 229,  3971, 3973, 3975, 227,
    3977, 3979, 3981, 225,  222,  3983, 3985, 3987, 220,  3989, 3991, 219,  214,  3993, 3995,
    3997, 3999, 4001, 212,  4003, 4005, 4007, 4009, 4011, 143,  4013, 4015, 4017, 139,  4019,
    134,  4021, 4023, 4025, 79,   4027};

static yyconst flex_int16_t yy_def[952] = {
    0,   866, 1,   867, 867, 868, 868, 866, 866, 866, 866, 866, 869, 870, 871, 866, 866,
    16,  866, 866, 19,  19,  19,  19,  19,  19,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  866, 866, 866, 866, 866, 866, 869, 866, 870, 871, 866, 866, 872,
    866, 873, 51,  866, 874, 866, 25,  25,  58,  58,  25,  25,  25,  25,  58,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,

    866, 872, 866, 875, 103, 876, 866, 874, 866, 109, 58,  111, 25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  866, 154, 877, 878, 879, 866, 159, 866, 866, 866, 162, 111, 25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    866, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,

    25,  25,  25,  25,  25,  25,  25,  155, 155, 878, 880, 881, 866, 866, 866, 214, 866,
    866, 218, 866, 220, 165, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  866, 25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  882, 866, 883, 884, 866, 866, 275, 866, 277, 866, 866, 866, 866, 866, 282, 25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,

    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  866, 866, 25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  885, 886, 887, 866, 866, 866, 866, 866, 344, 866, 866, 866, 349, 866,
    351, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  866, 866, 25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,

    25,  883, 866, 888, 889, 866, 866, 866, 408, 866, 410, 866, 866, 866, 866, 866, 415,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  866, 866, 25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  890, 891,
    892, 866, 866, 866, 866, 866, 473, 866, 866, 477, 866, 479, 25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,

    25,  25,  866, 866, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  893, 866, 894, 895, 866, 866, 530, 866, 532, 866,
    866, 866, 866, 536, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  866, 866, 25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  896, 897, 898, 866, 866, 866, 866,
    584, 866, 587, 866, 589, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,

    25,  25,  25,  25,  25,  25,  25,  866, 866, 25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  899, 866, 900, 901, 866, 628, 866, 630, 866, 866, 866,
    866, 634, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  902, 903, 904, 866, 866, 866,
    866, 668, 866, 671, 866, 673, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  905, 866, 906, 907, 866, 698, 866,

    700, 866, 866, 866, 866, 704, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  908, 909, 910, 911, 866, 866, 866, 866, 729, 866, 732, 866,
    734, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  912, 866, 913,
    866, 914, 866, 754, 866, 756, 866, 866, 866, 915, 760, 25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  916, 917, 866, 918, 919, 866, 866, 866, 783, 866,
    785, 920, 25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  921,

    866, 922, 923, 866, 804, 866, 866, 924, 25,  25,  25,  25,  25,  25,  25,  25,  25,
    925, 866, 926, 927, 866, 866, 928, 25,  25,  25,  929, 930, 931, 866, 25,  25,  25,
    932, 866, 933, 934, 25,  25,  25,  935, 936, 937, 25,  938, 866, 939, 940, 941, 942,
    943, 944, 866, 945, 946, 866, 947, 948, 941, 866, 949, 950, 951, 866, 0,   866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,

    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866};

static yyconst flex_int16_t yy_nxt[4107] = {
    0,   8,   9,   10,  11,  12,  13,  14,  8,   8,   8,   8,   15,  16,  17,  17,  17,
    17,  17,  17,  17,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  25,  25,
    28,  25,  29,  30,  31,  25,  32,  33,  34,  35,  36,  37,  25,  25,  25,  19,  20,
    21,  22,  23,  24,  25,  26,  27,  25,  25,  28,  25,  29,  30,  31,  25,  32,  33,
    34,  35,  36,  37,  25,  25,  25,  41,  42,  43,  42,  49,  866, 72,  757, 50,  51,
    51,  51,  51,  51,  51,  51,  51,  51,  52,  53,  53,  53,  53,  53,  53,  73,

    54,  76,  97,  100, 74,  866, 72,  77,  112, 98,  41,  42,  75,  99,  43,  42,  55,
    41,  42,  53,  53,  53,  53,  53,  53,  73,  54,  76,  97,  100, 74,  186, 187, 77,
    112, 98,  859, 789, 75,  99,  790, 857, 55,  57,  57,  852, 58,  58,  58,  58,  58,
    58,  58,  58,  58,  52,  58,  58,  58,  59,  58,  60,  57,  61,  57,  57,  57,  57,
    57,  62,  57,  57,  57,  57,  57,  57,  63,  57,  57,  57,  57,  57,  58,  58,  58,
    59,  58,  60,  57,  61,  57,  57,  57,  57,  57,  62,  57,  57,  57,  57,

    57,  57,  63,  57,  57,  57,  57,  57,  58,  58,  58,  58,  113, 64,  844, 114, 831,
    115, 57,  57,  116, 830, 824, 117, 808, 57,  57,  803, 118, 787, 119, 753, 108, 82,
    58,  58,  58,  58,  113, 64,  58,  114, 58,  115, 57,  57,  116, 83,  84,  117, 57,
    57,  57,  65,  118, 58,  119, 57,  66,  82,  70,  120, 85,  67,  68,  58,  58,  58,
    58,  122, 69,  121, 123, 83,  84,  57,  57,  124, 71,  65,  125, 58,  57,  57,  66,
    863, 70,  120, 85,  67,  68,  58,  863, 58,  863, 122, 69,  121, 123, 126,

    856, 57,  127, 124, 71,  130, 125, 131, 57,  57,  57,  57,  57,  57,  57,  57,  57,
    57,  866, 57,  57,  57,  57,  57,  57,  126, 57,  866, 127, 863, 86,  130, 57,  131,
    87,  856, 860, 856, 132, 57,  133, 849, 856, 78,  88,  57,  57,  57,  57,  57,  57,
    79,  57,  128, 135, 89,  86,  80,  57,  136, 87,  90,  81,  91,  132, 57,  133, 93,
    94,  78,  88,  129, 92,  137, 138, 139, 95,  79,  143, 128, 135, 89,  144, 80,  96,
    136, 849, 90,  81,  91,  764, 765, 766, 778, 767, 849, 838, 129, 92,  137,

    138, 139, 95,  850, 143, 849, 838, 752, 144, 838, 96,  103, 103, 103, 103, 103, 103,
    103, 103, 103, 104, 105, 105, 105, 105, 105, 105, 145, 54,  105, 105, 105, 105, 105,
    105, 105, 105, 105, 146, 821, 726, 838, 821, 835, 821, 149, 150, 105, 105, 105, 105,
    105, 105, 145, 54,  109, 109, 109, 109, 109, 109, 109, 109, 109, 146, 110, 110, 110,
    110, 110, 110, 149, 150, 155, 155, 155, 155, 155, 155, 155, 155, 155, 780, 697, 761,
    821, 780, 752, 107, 813, 151, 110, 110, 110, 110, 110, 110, 111, 111, 111,

    111, 111, 111, 111, 111, 111, 104, 111, 111, 111, 111, 111, 111, 140, 61,  147, 151,
    152, 153, 166, 141, 167, 168, 142, 169, 170, 171, 172, 174, 175, 176, 177, 148, 111,
    111, 111, 111, 111, 111, 140, 61,  147, 812, 152, 153, 166, 141, 167, 168, 142, 169,
    170, 171, 172, 174, 175, 176, 177, 148, 154, 154, 154, 154, 154, 154, 154, 154, 154,
    52,  155, 155, 155, 155, 155, 155, 866, 54,  164, 164, 164, 164, 164, 164, 164, 164,
    164, 178, 811, 810, 730, 780, 752, 800, 179, 180, 155, 155, 155, 155, 155,

    155, 181, 54,  159, 159, 159, 159, 159, 159, 159, 159, 159, 178, 160, 160, 160, 160,
    160, 160, 179, 180, 792, 791, 705, 780, 778, 752, 181, 209, 209, 209, 209, 209, 209,
    209, 209, 209, 182, 183, 160, 160, 160, 160, 160, 160, 161, 185, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 163, 164, 164, 164, 164, 164, 164, 182, 183, 697, 627, 768,
    669, 752, 697, 107, 185, 738, 635, 726, 697, 627, 723, 188, 190, 191, 192, 164, 164,
    164, 164, 164, 164, 165, 165, 165, 165, 165, 165, 165, 165, 165, 52,  165,

    165, 165, 165, 165, 165, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201,
    202, 203, 204, 205, 206, 207, 721, 707, 165, 165, 165, 165, 165, 165, 585, 697, 627,
    528, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208,
    208, 208, 208, 208, 208, 208, 208, 52,  209, 209, 209, 209, 209, 209, 866, 54,  216,
    216, 216, 216, 216, 216, 216, 216, 216, 217, 217, 217, 217, 217, 217, 217, 217, 217,
    209, 209, 209, 209, 209, 209, 537, 54,  213, 107, 214, 214, 214, 214, 214,

    214, 214, 214, 214, 215, 216, 216, 216, 216, 216, 216, 866, 223, 219, 219, 219, 219,
    219, 219, 219, 219, 219, 627, 528, 107, 657, 645, 474, 627, 224, 225, 216, 216, 216,
    216, 216, 216, 161, 229, 218, 218, 218, 218, 218, 218, 218, 218, 218, 163, 219, 219,
    219, 219, 219, 219, 224, 225, 528, 624, 621, 416, 107, 528, 405, 229, 405, 567, 541,
    345, 528, 405, 230, 231, 232, 234, 219, 219, 219, 219, 219, 219, 220, 220, 220, 220,
    220, 220, 220, 220, 220, 236, 221, 221, 221, 221, 221, 221, 230, 231, 232,

    234, 107, 510, 499, 496, 283, 237, 107, 405, 273, 467, 450, 426, 238, 239, 419, 236,
    221, 221, 221, 221, 221, 221, 222, 222, 222, 222, 222, 222, 222, 222, 222, 237, 222,
    222, 222, 222, 222, 222, 238, 239, 240, 245, 247, 248, 250, 253, 254, 255, 251, 241,
    242, 243, 252, 256, 257, 258, 246, 215, 222, 222, 222, 222, 222, 222, 262, 266, 240,
    245, 247, 248, 250, 253, 254, 255, 251, 241, 242, 243, 252, 256, 257, 258, 246, 259,
    263, 267, 268, 285, 286, 287, 262, 266, 292, 293, 295, 264, 296, 294, 260,

    208, 208, 208, 208, 208, 208, 208, 208, 208, 866, 259, 263, 267, 268, 285, 286, 287,
    405, 273, 292, 293, 295, 264, 296, 294, 260, 274, 274, 274, 274, 274, 274, 274, 274,
    274, 213, 273, 275, 275, 275, 275, 275, 275, 275, 275, 275, 215, 276, 276, 276, 276,
    276, 276, 866, 400, 276, 276, 276, 276, 276, 276, 276, 276, 276, 396, 390, 389, 386,
    371, 363, 297, 163, 107, 276, 276, 276, 276, 276, 276, 277, 277, 277, 277, 277, 277,
    277, 277, 277, 298, 278, 278, 278, 278, 278, 278, 279, 297, 217, 217, 217,

    217, 217, 217, 217, 217, 217, 273, 158, 107, 335, 321, 866, 273, 158, 298, 278, 278,
    278, 278, 278, 278, 161, 270, 280, 280, 280, 280, 280, 280, 280, 280, 280, 163, 281,
    281, 281, 281, 281, 281, 866, 302, 281, 281, 281, 281, 281, 281, 281, 281, 281, 347,
    347, 347, 347, 347, 347, 347, 347, 347, 281, 281, 281, 281, 281, 281, 161, 302, 282,
    282, 282, 282, 282, 282, 282, 282, 282, 283, 284, 284, 284, 284, 284, 284, 866, 288,
    284, 284, 284, 284, 284, 284, 284, 284, 284, 303, 304, 289, 305, 306, 290,

    307, 291, 299, 284, 284, 284, 284, 284, 284, 300, 288, 308, 309, 310, 311, 313, 314,
    301, 315, 316, 303, 304, 289, 305, 306, 290, 307, 291, 299, 312, 317, 318, 319, 320,
    322, 300, 323, 308, 309, 310, 311, 313, 314, 301, 315, 316, 324, 325, 326, 327, 328,
    329, 330, 331, 332, 312, 317, 318, 319, 320, 322, 333, 323, 334, 336, 337, 866, 353,
    269, 265, 261, 249, 324, 325, 326, 327, 328, 329, 330, 331, 332, 244, 235, 233, 228,
    227, 226, 333, 107, 334, 336, 337, 341, 353, 274, 274, 274, 274, 274, 274,

    274, 274, 274, 213, 158, 342, 342, 342, 342, 342, 342, 342, 342, 342, 215, 343, 343,
    343, 343, 343, 343, 866, 354, 343, 343, 343, 343, 343, 343, 343, 343, 343, 158, 199,
    189, 184, 173, 158, 107, 134, 355, 343, 343, 343, 343, 343, 343, 213, 354, 344, 344,
    344, 344, 344, 344, 344, 344, 344, 345, 346, 346, 346, 346, 346, 346, 866, 355, 346,
    346, 346, 346, 346, 346, 346, 346, 346, 107, 47,  356, 48,  45,  101, 56,  48,  45,
    346, 346, 346, 346, 346, 346, 161, 866, 348, 348, 348, 348, 348, 348, 348,

    348, 348, 163, 161, 356, 349, 349, 349, 349, 349, 349, 349, 349, 349, 283, 350, 350,
    350, 350, 350, 350, 866, 39,  350, 350, 350, 350, 350, 350, 350, 350, 350, 39,  866,
    866, 866, 866, 357, 358, 359, 360, 350, 350, 350, 350, 350, 350, 351, 351, 351, 351,
    351, 351, 351, 351, 351, 361, 352, 352, 352, 352, 352, 352, 357, 358, 359, 360, 362,
    364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 361, 352, 352,
    352, 352, 352, 352, 379, 380, 381, 382, 362, 364, 365, 366, 367, 368, 369,

    370, 372, 373, 374, 375, 376, 377, 378, 383, 384, 387, 388, 391, 392, 393, 379, 380,
    381, 382, 394, 395, 397, 385, 398, 399, 401, 866, 866, 866, 866, 866, 866, 866, 866,
    383, 384, 387, 388, 391, 392, 393, 866, 866, 866, 866, 394, 395, 397, 385, 398, 399,
    401, 406, 406, 406, 406, 406, 406, 406, 406, 406, 213, 866, 407, 407, 407, 407, 407,
    407, 407, 407, 407, 215, 213, 866, 408, 408, 408, 408, 408, 408, 408, 408, 408, 345,
    409, 409, 409, 409, 409, 409, 866, 866, 409, 409, 409, 409, 409, 409, 409,

    409, 409, 866, 866, 866, 866, 866, 866, 418, 866, 866, 409, 409, 409, 409, 409, 409,
    410, 410, 410, 410, 410, 410, 410, 410, 410, 420, 411, 411, 411, 411, 411, 411, 412,
    418, 347, 347, 347, 347, 347, 347, 347, 347, 347, 866, 421, 866, 866, 866, 866, 866,
    866, 420, 411, 411, 411, 411, 411, 411, 161, 866, 348, 348, 348, 348, 348, 348, 348,
    348, 348, 161, 421, 413, 413, 413, 413, 413, 413, 413, 413, 413, 283, 414, 414, 414,
    414, 414, 414, 866, 422, 414, 414, 414, 414, 414, 414, 414, 414, 414, 866,

    866, 866, 866, 866, 866, 866, 866, 423, 414, 414, 414, 414, 414, 414, 161, 422, 415,
    415, 415, 415, 415, 415, 415, 415, 415, 416, 417, 417, 417, 417, 417, 417, 866, 423,
    417, 417, 417, 417, 417, 417, 417, 417, 417, 424, 427, 428, 432, 433, 434, 435, 436,
    437, 417, 417, 417, 417, 417, 417, 425, 429, 438, 439, 440, 441, 442, 430, 443, 431,
    444, 424, 427, 428, 432, 433, 434, 435, 436, 437, 445, 446, 447, 448, 449, 451, 425,
    429, 438, 439, 440, 441, 442, 430, 443, 431, 444, 452, 453, 454, 455, 456,

    457, 458, 459, 460, 445, 446, 447, 448, 449, 451, 461, 462, 463, 464, 465, 466, 866,
    481, 866, 866, 866, 452, 453, 454, 455, 456, 457, 458, 459, 460, 866, 866, 866, 866,
    866, 866, 461, 462, 463, 464, 465, 466, 470, 481, 406, 406, 406, 406, 406, 406, 406,
    406, 406, 213, 866, 407, 407, 407, 407, 407, 407, 407, 407, 407, 213, 866, 471, 471,
    471, 471, 471, 471, 471, 471, 471, 345, 472, 472, 472, 472, 472, 472, 866, 482, 472,
    472, 472, 472, 472, 472, 472, 472, 472, 476, 476, 476, 476, 476, 476, 476,

    476, 476, 472, 472, 472, 472, 472, 472, 213, 482, 473, 473, 473, 473, 473, 473, 473,
    473, 473, 474, 475, 475, 475, 475, 475, 475, 866, 483, 475, 475, 475, 475, 475, 475,
    475, 475, 475, 866, 866, 484, 866, 866, 866, 866, 866, 866, 475, 475, 475, 475, 475,
    475, 161, 483, 348, 348, 348, 348, 348, 348, 348, 348, 348, 283, 161, 484, 477, 477,
    477, 477, 477, 477, 477, 477, 477, 416, 478, 478, 478, 478, 478, 478, 866, 866, 478,
    478, 478, 478, 478, 478, 478, 478, 478, 866, 866, 866, 866, 866, 485, 486,

    487, 488, 478, 478, 478, 478, 478, 478, 479, 479, 479, 479, 479, 479, 479, 479, 479,
    489, 480, 480, 480, 480, 480, 480, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495,
    497, 498, 500, 501, 502, 503, 504, 505, 506, 489, 480, 480, 480, 480, 480, 480, 507,
    508, 509, 511, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505,
    506, 512, 513, 514, 515, 516, 517, 518, 507, 508, 509, 511, 519, 520, 521, 522, 523,
    524, 529, 529, 529, 529, 529, 529, 529, 529, 529, 512, 513, 514, 515, 516,

    517, 518, 866, 866, 866, 866, 519, 520, 521, 522, 523, 524, 213, 866, 407, 407, 407,
    407, 407, 407, 407, 407, 407, 345, 213, 866, 530, 530, 530, 530, 530, 530, 530, 530,
    530, 474, 531, 531, 531, 531, 531, 531, 866, 866, 531, 531, 531, 531, 531, 531, 531,
    531, 531, 476, 476, 476, 476, 476, 476, 476, 476, 476, 531, 531, 531, 531, 531, 531,
    532, 532, 532, 532, 532, 532, 532, 532, 532, 539, 533, 533, 533, 533, 533, 533, 866,
    540, 535, 535, 535, 535, 535, 535, 535, 535, 535, 866, 866, 866, 866, 866,

    866, 866, 866, 539, 533, 533, 533, 533, 533, 533, 161, 540, 534, 534, 534, 534, 534,
    534, 534, 534, 534, 416, 535, 535, 535, 535, 535, 535, 866, 542, 538, 538, 538, 538,
    538, 538, 538, 538, 538, 866, 866, 866, 866, 866, 866, 866, 543, 544, 535, 535, 535,
    535, 535, 535, 161, 542, 536, 536, 536, 536, 536, 536, 536, 536, 536, 537, 538, 538,
    538, 538, 538, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
    556, 557, 558, 559, 560, 561, 562, 538, 538, 538, 538, 538, 538, 563, 564,

    545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
    562, 568, 565, 569, 570, 571, 572, 563, 564, 566, 573, 574, 575, 576, 577, 578, 529,
    529, 529, 529, 529, 529, 529, 529, 529, 866, 866, 568, 565, 569, 570, 571, 572, 866,
    866, 566, 573, 574, 575, 576, 577, 578, 213, 866, 582, 582, 582, 582, 582, 582, 582,
    582, 582, 474, 583, 583, 583, 583, 583, 583, 866, 591, 583, 583, 583, 583, 583, 583,
    583, 583, 583, 866, 866, 866, 866, 866, 866, 866, 866, 592, 583, 583, 583,

    583, 583, 583, 213, 591, 584, 584, 584, 584, 584, 584, 584, 584, 584, 585, 586, 586,
    586, 586, 586, 586, 866, 592, 586, 586, 586, 586, 586, 586, 586, 586, 586, 866, 866,
    593, 866, 866, 866, 866, 866, 866, 586, 586, 586, 586, 586, 586, 161, 866, 348, 348,
    348, 348, 348, 348, 348, 348, 348, 416, 161, 593, 587, 587, 587, 587, 587, 587, 587,
    587, 587, 537, 588, 588, 588, 588, 588, 588, 866, 866, 588, 588, 588, 588, 588, 588,
    588, 588, 588, 866, 866, 866, 866, 866, 594, 595, 596, 597, 588, 588, 588,

    588, 588, 588, 589, 589, 589, 589, 589, 589, 589, 589, 589, 598, 590, 590, 590, 590,
    590, 590, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609,
    610, 611, 612, 866, 598, 590, 590, 590, 590, 590, 590, 615, 616, 617, 618, 599, 600,
    601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 619, 620, 622, 623,
    637, 638, 614, 615, 616, 617, 618, 213, 866, 407, 407, 407, 407, 407, 407, 407, 407,
    407, 474, 866, 866, 613, 619, 620, 622, 623, 637, 638, 614, 213, 866, 628,

    628, 628, 628, 628, 628, 628, 628, 628, 585, 629, 629, 629, 629, 629, 629, 866, 866,
    629, 629, 629, 629, 629, 629, 629, 629, 629, 866, 866, 866, 866, 866, 866, 639, 866,
    866, 629, 629, 629, 629, 629, 629, 630, 630, 630, 630, 630, 630, 630, 630, 630, 640,
    631, 631, 631, 631, 631, 631, 866, 639, 633, 633, 633, 633, 633, 633, 633, 633, 633,
    866, 866, 866, 866, 866, 866, 866, 866, 640, 631, 631, 631, 631, 631, 631, 161, 866,
    632, 632, 632, 632, 632, 632, 632, 632, 632, 537, 633, 633, 633, 633, 633,

    633, 866, 641, 636, 636, 636, 636, 636, 636, 636, 636, 636, 866, 866, 866, 866, 866,
    866, 866, 642, 643, 633, 633, 633, 633, 633, 633, 161, 641, 634, 634, 634, 634, 634,
    634, 634, 634, 634, 635, 636, 636, 636, 636, 636, 636, 642, 643, 644, 646, 647, 648,
    649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 866, 636, 636, 636,
    636, 636, 636, 866, 866, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
    658, 659, 660, 661, 662, 213, 866, 666, 666, 666, 666, 666, 666, 666, 666,

    666, 585, 667, 667, 667, 667, 667, 667, 866, 675, 667, 667, 667, 667, 667, 667, 667,
    667, 667, 866, 866, 866, 866, 866, 866, 866, 866, 676, 667, 667, 667, 667, 667, 667,
    213, 675, 668, 668, 668, 668, 668, 668, 668, 668, 668, 669, 670, 670, 670, 670, 670,
    670, 866, 676, 670, 670, 670, 670, 670, 670, 670, 670, 670, 866, 866, 677, 866, 866,
    866, 866, 866, 866, 670, 670, 670, 670, 670, 670, 161, 866, 348, 348, 348, 348, 348,
    348, 348, 348, 348, 537, 161, 677, 671, 671, 671, 671, 671, 671, 671, 671,

    671, 635, 672, 672, 672, 672, 672, 672, 866, 866, 672, 672, 672, 672, 672, 672, 672,
    672, 672, 866, 866, 866, 866, 866, 678, 679, 866, 682, 672, 672, 672, 672, 672, 672,
    673, 673, 673, 673, 673, 673, 673, 673, 673, 683, 674, 674, 674, 674, 674, 674, 678,
    679, 680, 682, 684, 685, 686, 687, 681, 688, 689, 690, 691, 692, 693, 866, 708, 866,
    866, 683, 674, 674, 674, 674, 674, 674, 866, 866, 680, 866, 684, 685, 686, 687, 681,
    688, 689, 690, 691, 692, 693, 213, 708, 407, 407, 407, 407, 407, 407, 407,

    407, 407, 585, 213, 866, 698, 698, 698, 698, 698, 698, 698, 698, 698, 669, 699, 699,
    699, 699, 699, 699, 866, 866, 699, 699, 699, 699, 699, 699, 699, 699, 699, 866, 866,
    866, 866, 866, 866, 709, 866, 866, 699, 699, 699, 699, 699, 699, 700, 700, 700, 700,
    700, 700, 700, 700, 700, 710, 701, 701, 701, 701, 701, 701, 866, 709, 703, 703, 703,
    703, 703, 703, 703, 703, 703, 866, 866, 866, 866, 866, 866, 866, 866, 710, 701, 701,
    701, 701, 701, 701, 161, 866, 702, 702, 702, 702, 702, 702, 702, 702, 702,

    635, 703, 703, 703, 703, 703, 703, 866, 711, 706, 706, 706, 706, 706, 706, 706, 706,
    706, 866, 866, 866, 866, 866, 866, 866, 712, 713, 703, 703, 703, 703, 703, 703, 161,
    711, 704, 704, 704, 704, 704, 704, 704, 704, 704, 705, 706, 706, 706, 706, 706, 706,
    712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 866, 736, 866, 866, 866, 866, 866,
    866, 866, 866, 706, 706, 706, 706, 706, 706, 866, 866, 714, 715, 716, 717, 718, 719,
    720, 722, 213, 736, 727, 727, 727, 727, 727, 727, 727, 727, 727, 669, 728,

    728, 728, 728, 728, 728, 866, 737, 728, 728, 728, 728, 728, 728, 728, 728, 728, 866,
    866, 866, 866, 866, 866, 866, 866, 739, 728, 728, 728, 728, 728, 728, 213, 737, 729,
    729, 729, 729, 729, 729, 729, 729, 729, 730, 731, 731, 731, 731, 731, 731, 866, 739,
    731, 731, 731, 731, 731, 731, 731, 731, 731, 866, 866, 740, 866, 866, 866, 866, 866,
    866, 731, 731, 731, 731, 731, 731, 161, 866, 348, 348, 348, 348, 348, 348, 348, 348,
    348, 635, 161, 740, 732, 732, 732, 732, 732, 732, 732, 732, 732, 705, 733,

    733, 733, 733, 733, 733, 866, 866, 733, 733, 733, 733, 733, 733, 733, 733, 733, 866,
    866, 866, 866, 866, 741, 742, 743, 744, 733, 733, 733, 733, 733, 733, 734, 734, 734,
    734, 734, 734, 734, 734, 734, 745, 735, 735, 735, 735, 735, 735, 741, 742, 743, 744,
    746, 747, 748, 213, 763, 407, 407, 407, 407, 407, 407, 407, 407, 407, 669, 745, 735,
    735, 735, 735, 735, 735, 769, 866, 866, 866, 746, 747, 748, 213, 763, 754, 754, 754,
    754, 754, 754, 754, 754, 754, 730, 755, 755, 755, 755, 755, 755, 866, 769,

    755, 755, 755, 755, 755, 755, 755, 755, 755, 866, 866, 866, 866, 866, 866, 770, 866,
    866, 755, 755, 755, 755, 755, 755, 756, 756, 756, 756, 756, 756, 756, 756, 756, 771,
    757, 757, 757, 757, 757, 757, 866, 770, 759, 759, 759, 759, 759, 759, 759, 759, 759,
    866, 866, 866, 866, 866, 866, 866, 866, 771, 757, 757, 757, 757, 757, 757, 161, 866,
    758, 758, 758, 758, 758, 758, 758, 758, 758, 705, 759, 759, 759, 759, 759, 759, 866,
    772, 762, 762, 762, 762, 762, 762, 762, 762, 762, 866, 866, 866, 866, 866,

    866, 866, 773, 774, 759, 759, 759, 759, 759, 759, 161, 772, 760, 760, 760, 760, 760,
    760, 760, 760, 760, 761, 762, 762, 762, 762, 762, 762, 773, 774, 775, 866, 788, 782,
    782, 782, 782, 782, 782, 782, 782, 782, 866, 866, 866, 866, 866, 866, 762, 762, 762,
    762, 762, 762, 866, 866, 775, 213, 788, 781, 781, 781, 781, 781, 781, 781, 781, 781,
    730, 782, 782, 782, 782, 782, 782, 866, 793, 784, 784, 784, 784, 784, 784, 784, 784,
    784, 794, 866, 866, 866, 866, 866, 866, 866, 795, 782, 782, 782, 782, 782,

    782, 213, 793, 783, 783, 783, 783, 783, 783, 783, 783, 783, 794, 784, 784, 784, 784,
    784, 784, 161, 795, 348, 348, 348, 348, 348, 348, 348, 348, 348, 705, 866, 866, 866,
    866, 866, 866, 866, 796, 784, 784, 784, 784, 784, 784, 161, 866, 785, 785, 785, 785,
    785, 785, 785, 785, 785, 761, 786, 786, 786, 786, 786, 786, 866, 796, 786, 786, 786,
    786, 786, 786, 786, 786, 786, 797, 798, 799, 866, 809, 866, 866, 866, 866, 786, 786,
    786, 786, 786, 786, 866, 814, 805, 805, 805, 805, 805, 805, 805, 805, 805,

    797, 798, 799, 213, 809, 407, 407, 407, 407, 407, 407, 407, 407, 407, 730, 213, 814,
    804, 804, 804, 804, 804, 804, 804, 804, 804, 815, 805, 805, 805, 805, 805, 805, 866,
    816, 807, 807, 807, 807, 807, 807, 807, 807, 807, 866, 866, 866, 866, 866, 866, 866,
    817, 815, 805, 805, 805, 805, 805, 805, 161, 816, 806, 806, 806, 806, 806, 806, 806,
    806, 806, 761, 807, 807, 807, 807, 807, 807, 817, 866, 866, 823, 823, 823, 823, 823,
    823, 823, 823, 823, 866, 866, 866, 866, 866, 866, 866, 825, 807, 807, 807,

    807, 807, 807, 213, 866, 822, 822, 822, 822, 822, 822, 822, 822, 822, 826, 823, 823,
    823, 823, 823, 823, 161, 825, 348, 348, 348, 348, 348, 348, 348, 348, 348, 761, 827,
    832, 833, 834, 839, 840, 841, 826, 823, 823, 823, 823, 823, 823, 213, 845, 407, 407,
    407, 407, 407, 407, 407, 407, 407, 866, 827, 832, 833, 834, 839, 840, 841, 866, 866,
    866, 866, 866, 866, 866, 866, 845, 38,  38,  38,  38,  40,  40,  40,  40,  44,  44,
    44,  44,  46,  866, 46,  46,  47,  47,  47,  47,  102, 866, 102, 102, 106,

    106, 156, 156, 157, 157, 210, 210, 211, 211, 212, 212, 271, 271, 272, 272, 338, 338,
    339, 339, 340, 340, 402, 402, 403, 403, 404, 404, 468, 468, 469, 469, 525, 525, 526,
    526, 527, 527, 579, 579, 580, 580, 581, 581, 468, 468, 625, 625, 626, 626, 663, 663,
    664, 664, 665, 665, 694, 694, 695, 695, 696, 696, 580, 580, 724, 724, 725, 725, 749,
    749, 750, 750, 751, 751, 776, 776, 777, 777, 779, 779, 664, 664, 801, 801, 802, 802,
    818, 818, 819, 819, 820, 820, 828, 828, 829, 829, 724, 724, 836, 836, 837,

    837, 842, 842, 843, 843, 846, 846, 847, 847, 848, 848, 777, 777, 851, 851, 853, 853,
    854, 854, 855, 855, 858, 858, 861, 861, 862, 862, 864, 864, 865, 865, 7,   866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,

    866, 866, 866, 866, 866, 866};

static yyconst flex_int16_t yy_chk[4107] = {
    0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   10,  10,  11,  11,  15,  17,  26,  950, 15,  16,
    16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  27,

    16,  28,  35,  37,  27,  17,  26,  28,  59,  36,  41,  41,  27,  36,  42,  42,  16,
    43,  43,  16,  16,  16,  16,  16,  16,  27,  16,  28,  35,  37,  27,  133, 133, 28,
    59,  36,  946, 765, 27,  36,  765, 944, 16,  19,  19,  940, 19,  19,  19,  19,  19,
    19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
    19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
    19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,

    19,  19,  19,  19,  19,  19,  19,  19,  20,  21,  20,  21,  60,  20,  934, 62,  928,
    63,  20,  21,  64,  927, 924, 65,  920, 20,  21,  919, 66,  915, 67,  911, 874, 30,
    20,  21,  20,  21,  60,  20,  23,  62,  23,  63,  20,  21,  64,  30,  31,  65,  23,
    20,  21,  22,  66,  22,  67,  23,  22,  30,  23,  68,  31,  22,  22,  24,  23,  24,
    23,  69,  22,  68,  70,  30,  31,  24,  23,  71,  24,  22,  72,  22,  24,  23,  22,
    865, 23,  68,  31,  22,  22,  24,  864, 24,  862, 69,  22,  68,  70,  73,

    861, 24,  74,  71,  24,  76,  72,  77,  24,  25,  25,  25,  25,  25,  25,  25,  25,
    25,  25,  25,  25,  25,  25,  25,  25,  73,  25,  860, 74,  859, 32,  76,  25,  77,
    32,  858, 857, 855, 78,  25,  79,  854, 852, 29,  32,  25,  25,  25,  25,  25,  25,
    29,  25,  75,  81,  33,  32,  29,  25,  82,  32,  33,  29,  33,  78,  25,  79,  34,
    34,  29,  32,  75,  33,  83,  85,  86,  34,  29,  88,  75,  81,  33,  89,  29,  34,
    82,  851, 33,  29,  33,  739, 739, 739, 850, 739, 848, 847, 75,  33,  83,

    85,  86,  34,  846, 88,  844, 843, 842, 89,  837, 34,  51,  51,  51,  51,  51,  51,
    51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  90,  51,  53,  53,  53,  53,  53,
    53,  53,  53,  53,  91,  836, 835, 830, 829, 828, 820, 96,  97,  51,  51,  51,  51,
    51,  51,  90,  51,  56,  56,  56,  56,  56,  56,  56,  56,  56,  91,  56,  56,  56,
    56,  56,  56,  96,  97,  105, 105, 105, 105, 105, 105, 105, 105, 105, 819, 818, 807,
    803, 802, 801, 800, 792, 98,  56,  56,  56,  56,  56,  56,  58,  58,  58,

    58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  87,  58,  92,  98,
    99,  100, 112, 87,  113, 114, 87,  115, 116, 117, 118, 120, 121, 122, 123, 92,  58,
    58,  58,  58,  58,  58,  87,  58,  92,  791, 99,  100, 112, 87,  113, 114, 87,  115,
    116, 117, 118, 120, 121, 122, 123, 92,  103, 103, 103, 103, 103, 103, 103, 103, 103,
    103, 103, 103, 103, 103, 103, 103, 110, 103, 110, 110, 110, 110, 110, 110, 110, 110,
    110, 124, 790, 789, 782, 779, 777, 776, 126, 127, 103, 103, 103, 103, 103,

    103, 128, 103, 107, 107, 107, 107, 107, 107, 107, 107, 107, 124, 107, 107, 107, 107,
    107, 107, 126, 127, 767, 766, 759, 753, 752, 751, 128, 155, 155, 155, 155, 155, 155,
    155, 155, 155, 129, 130, 107, 107, 107, 107, 107, 107, 109, 132, 109, 109, 109, 109,
    109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 129, 130, 750, 749, 740,
    728, 725, 724, 723, 132, 710, 703, 697, 696, 695, 694, 134, 136, 137, 138, 109, 109,
    109, 109, 109, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111,

    111, 111, 111, 111, 111, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147,
    148, 149, 150, 151, 152, 153, 692, 675, 111, 111, 111, 111, 111, 111, 667, 665, 664,
    663, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 154,
    154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 160, 154, 160,
    160, 160, 160, 160, 160, 160, 160, 160, 161, 161, 161, 161, 161, 161, 161, 161, 161,
    154, 154, 154, 154, 154, 154, 633, 154, 159, 627, 159, 159, 159, 159, 159,

    159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 164, 166, 164, 164, 164, 164,
    164, 164, 164, 164, 164, 626, 625, 624, 617, 601, 583, 581, 166, 168, 159, 159, 159,
    159, 159, 159, 162, 172, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
    162, 162, 162, 162, 166, 168, 580, 579, 576, 535, 528, 527, 526, 172, 525, 511, 483,
    472, 469, 468, 173, 174, 175, 177, 162, 162, 162, 162, 162, 162, 163, 163, 163, 163,
    163, 163, 163, 163, 163, 180, 163, 163, 163, 163, 163, 163, 173, 174, 175,

    177, 467, 451, 437, 433, 414, 181, 405, 404, 403, 402, 383, 360, 182, 183, 354, 180,
    163, 163, 163, 163, 163, 163, 165, 165, 165, 165, 165, 165, 165, 165, 165, 181, 165,
    165, 165, 165, 165, 165, 182, 183, 184, 187, 188, 189, 191, 193, 194, 195, 192, 184,
    184, 184, 192, 196, 197, 198, 187, 343, 165, 165, 165, 165, 165, 165, 201, 204, 184,
    187, 188, 189, 191, 193, 194, 195, 192, 184, 184, 184, 192, 196, 197, 198, 187, 199,
    202, 205, 206, 223, 224, 225, 201, 204, 227, 228, 229, 202, 230, 228, 199,

    208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 199, 202, 205, 206, 223, 224, 225,
    340, 339, 227, 228, 229, 202, 230, 228, 199, 213, 213, 213, 213, 213, 213, 213, 213,
    213, 214, 338, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    214, 214, 216, 336, 216, 216, 216, 216, 216, 216, 216, 216, 216, 331, 324, 323, 320,
    305, 295, 231, 281, 273, 214, 214, 214, 214, 214, 214, 215, 215, 215, 215, 215, 215,
    215, 215, 215, 232, 215, 215, 215, 215, 215, 215, 217, 231, 217, 217, 217,

    217, 217, 217, 217, 217, 217, 272, 271, 270, 267, 253, 222, 212, 211, 232, 215, 215,
    215, 215, 215, 215, 218, 210, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
    218, 218, 218, 218, 218, 219, 234, 219, 219, 219, 219, 219, 219, 219, 219, 219, 279,
    279, 279, 279, 279, 279, 279, 279, 279, 218, 218, 218, 218, 218, 218, 220, 234, 220,
    220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 221, 226,
    221, 221, 221, 221, 221, 221, 221, 221, 221, 235, 237, 226, 238, 239, 226,

    240, 226, 233, 220, 220, 220, 220, 220, 220, 233, 226, 241, 242, 243, 244, 245, 246,
    233, 247, 248, 235, 237, 226, 238, 239, 226, 240, 226, 233, 244, 249, 250, 251, 252,
    254, 233, 255, 241, 242, 243, 244, 245, 246, 233, 247, 248, 256, 257, 258, 259, 260,
    261, 262, 263, 264, 244, 249, 250, 251, 252, 254, 265, 255, 266, 268, 269, 209, 285,
    207, 203, 200, 190, 256, 257, 258, 259, 260, 261, 262, 263, 264, 186, 178, 176, 171,
    170, 169, 265, 158, 266, 268, 269, 274, 285, 274, 274, 274, 274, 274, 274,

    274, 274, 274, 275, 157, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
    275, 275, 275, 275, 276, 286, 276, 276, 276, 276, 276, 276, 276, 276, 276, 156, 145,
    135, 131, 119, 106, 104, 80,  287, 275, 275, 275, 275, 275, 275, 277, 286, 277, 277,
    277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 278, 287, 278,
    278, 278, 278, 278, 278, 278, 278, 278, 52,  48,  288, 47,  44,  39,  18,  14,  12,
    277, 277, 277, 277, 277, 277, 280, 7,   280, 280, 280, 280, 280, 280, 280,

    280, 280, 280, 282, 288, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
    282, 282, 282, 282, 284, 4,   284, 284, 284, 284, 284, 284, 284, 284, 284, 3,   0,
    0,   0,   0,   289, 290, 291, 292, 282, 282, 282, 282, 282, 282, 283, 283, 283, 283,
    283, 283, 283, 283, 283, 293, 283, 283, 283, 283, 283, 283, 289, 290, 291, 292, 294,
    296, 298, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 312, 293, 283, 283,
    283, 283, 283, 283, 313, 314, 315, 316, 294, 296, 298, 299, 300, 301, 302,

    304, 306, 307, 308, 309, 310, 311, 312, 317, 319, 321, 322, 325, 327, 328, 313, 314,
    315, 316, 329, 330, 333, 319, 334, 335, 337, 0,   0,   0,   0,   0,   0,   0,   0,
    317, 319, 321, 322, 325, 327, 328, 0,   0,   0,   0,   329, 330, 333, 319, 334, 335,
    337, 341, 341, 341, 341, 341, 341, 341, 341, 341, 342, 0,   342, 342, 342, 342, 342,
    342, 342, 342, 342, 342, 344, 0,   344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
    344, 344, 344, 344, 344, 344, 346, 0,   346, 346, 346, 346, 346, 346, 346,

    346, 346, 0,   0,   0,   0,   0,   0,   353, 0,   0,   344, 344, 344, 344, 344, 344,
    345, 345, 345, 345, 345, 345, 345, 345, 345, 355, 345, 345, 345, 345, 345, 345, 347,
    353, 347, 347, 347, 347, 347, 347, 347, 347, 347, 0,   356, 0,   0,   0,   0,   0,
    0,   355, 345, 345, 345, 345, 345, 345, 348, 0,   348, 348, 348, 348, 348, 348, 348,
    348, 348, 349, 356, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
    349, 349, 349, 350, 357, 350, 350, 350, 350, 350, 350, 350, 350, 350, 0,

    0,   0,   0,   0,   0,   0,   0,   358, 349, 349, 349, 349, 349, 349, 351, 357, 351,
    351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 352, 358,
    352, 352, 352, 352, 352, 352, 352, 352, 352, 359, 361, 362, 364, 365, 367, 368, 369,
    370, 351, 351, 351, 351, 351, 351, 359, 363, 371, 372, 373, 374, 375, 363, 376, 363,
    377, 359, 361, 362, 364, 365, 367, 368, 369, 370, 378, 379, 380, 381, 382, 384, 359,
    363, 371, 372, 373, 374, 375, 363, 376, 363, 377, 385, 386, 387, 388, 389,

    390, 392, 393, 394, 378, 379, 380, 381, 382, 384, 395, 396, 397, 399, 400, 401, 0,
    418, 0,   0,   0,   385, 386, 387, 388, 389, 390, 392, 393, 394, 0,   0,   0,   0,
    0,   0,   395, 396, 397, 399, 400, 401, 406, 418, 406, 406, 406, 406, 406, 406, 406,
    406, 406, 407, 0,   407, 407, 407, 407, 407, 407, 407, 407, 407, 408, 0,   408, 408,
    408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 409, 419, 409,
    409, 409, 409, 409, 409, 409, 409, 409, 412, 412, 412, 412, 412, 412, 412,

    412, 412, 408, 408, 408, 408, 408, 408, 410, 419, 410, 410, 410, 410, 410, 410, 410,
    410, 410, 410, 410, 410, 410, 410, 410, 410, 411, 420, 411, 411, 411, 411, 411, 411,
    411, 411, 411, 0,   0,   421, 0,   0,   0,   0,   0,   0,   410, 410, 410, 410, 410,
    410, 413, 420, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 415, 421, 415, 415,
    415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 417, 0,   417,
    417, 417, 417, 417, 417, 417, 417, 417, 0,   0,   0,   0,   0,   422, 423,

    424, 425, 415, 415, 415, 415, 415, 415, 416, 416, 416, 416, 416, 416, 416, 416, 416,
    426, 416, 416, 416, 416, 416, 416, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432,
    435, 436, 438, 440, 441, 444, 445, 446, 447, 426, 416, 416, 416, 416, 416, 416, 448,
    449, 450, 452, 427, 428, 429, 430, 431, 432, 435, 436, 438, 440, 441, 444, 445, 446,
    447, 453, 454, 455, 456, 457, 458, 459, 448, 449, 450, 452, 460, 461, 462, 463, 464,
    465, 470, 470, 470, 470, 470, 470, 470, 470, 470, 453, 454, 455, 456, 457,

    458, 459, 0,   0,   0,   0,   460, 461, 462, 463, 464, 465, 471, 0,   471, 471, 471,
    471, 471, 471, 471, 471, 471, 471, 473, 0,   473, 473, 473, 473, 473, 473, 473, 473,
    473, 473, 473, 473, 473, 473, 473, 473, 475, 0,   475, 475, 475, 475, 475, 475, 475,
    475, 475, 476, 476, 476, 476, 476, 476, 476, 476, 476, 473, 473, 473, 473, 473, 473,
    474, 474, 474, 474, 474, 474, 474, 474, 474, 481, 474, 474, 474, 474, 474, 474, 478,
    482, 478, 478, 478, 478, 478, 478, 478, 478, 478, 0,   0,   0,   0,   0,

    0,   0,   0,   481, 474, 474, 474, 474, 474, 474, 477, 482, 477, 477, 477, 477, 477,
    477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 480, 484, 480, 480, 480, 480,
    480, 480, 480, 480, 480, 0,   0,   0,   0,   0,   0,   0,   485, 486, 477, 477, 477,
    477, 477, 477, 479, 484, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
    479, 479, 479, 479, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498,
    499, 500, 501, 503, 504, 505, 506, 479, 479, 479, 479, 479, 479, 508, 509,

    487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 503, 504, 505,
    506, 512, 510, 513, 514, 515, 516, 508, 509, 510, 517, 518, 519, 521, 523, 524, 529,
    529, 529, 529, 529, 529, 529, 529, 529, 0,   0,   512, 510, 513, 514, 515, 516, 0,
    0,   510, 517, 518, 519, 521, 523, 524, 530, 0,   530, 530, 530, 530, 530, 530, 530,
    530, 530, 530, 530, 530, 530, 530, 530, 530, 531, 539, 531, 531, 531, 531, 531, 531,
    531, 531, 531, 0,   0,   0,   0,   0,   0,   0,   0,   540, 530, 530, 530,

    530, 530, 530, 532, 539, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532,
    532, 532, 532, 532, 533, 540, 533, 533, 533, 533, 533, 533, 533, 533, 533, 0,   0,
    541, 0,   0,   0,   0,   0,   0,   532, 532, 532, 532, 532, 532, 534, 0,   534, 534,
    534, 534, 534, 534, 534, 534, 534, 534, 536, 541, 536, 536, 536, 536, 536, 536, 536,
    536, 536, 536, 536, 536, 536, 536, 536, 536, 538, 0,   538, 538, 538, 538, 538, 538,
    538, 538, 538, 0,   0,   0,   0,   0,   542, 543, 544, 546, 536, 536, 536,

    536, 536, 536, 537, 537, 537, 537, 537, 537, 537, 537, 537, 547, 537, 537, 537, 537,
    537, 537, 542, 543, 544, 546, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560,
    564, 565, 566, 0,   547, 537, 537, 537, 537, 537, 537, 568, 569, 570, 571, 548, 549,
    550, 551, 552, 554, 555, 556, 557, 559, 560, 564, 565, 566, 567, 572, 575, 577, 578,
    592, 593, 567, 568, 569, 570, 571, 582, 0,   582, 582, 582, 582, 582, 582, 582, 582,
    582, 582, 0,   0,   567, 572, 575, 577, 578, 592, 593, 567, 584, 0,   584,

    584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 586, 0,
    586, 586, 586, 586, 586, 586, 586, 586, 586, 0,   0,   0,   0,   0,   0,   594, 0,
    0,   584, 584, 584, 584, 584, 584, 585, 585, 585, 585, 585, 585, 585, 585, 585, 595,
    585, 585, 585, 585, 585, 585, 588, 594, 588, 588, 588, 588, 588, 588, 588, 588, 588,
    0,   0,   0,   0,   0,   0,   0,   0,   595, 585, 585, 585, 585, 585, 585, 587, 0,
    587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,

    587, 590, 596, 590, 590, 590, 590, 590, 590, 590, 590, 590, 0,   0,   0,   0,   0,
    0,   0,   598, 599, 587, 587, 587, 587, 587, 587, 589, 596, 589, 589, 589, 589, 589,
    589, 589, 589, 589, 589, 589, 589, 589, 589, 589, 589, 598, 599, 600, 603, 604, 605,
    606, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 0,   589, 589, 589,
    589, 589, 589, 0,   0,   600, 603, 604, 605, 606, 610, 611, 612, 613, 614, 615, 616,
    618, 619, 620, 621, 622, 628, 0,   628, 628, 628, 628, 628, 628, 628, 628,

    628, 628, 628, 628, 628, 628, 628, 628, 629, 638, 629, 629, 629, 629, 629, 629, 629,
    629, 629, 0,   0,   0,   0,   0,   0,   0,   0,   639, 628, 628, 628, 628, 628, 628,
    630, 638, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630, 630,
    630, 631, 639, 631, 631, 631, 631, 631, 631, 631, 631, 631, 0,   0,   641, 0,   0,
    0,   0,   0,   0,   630, 630, 630, 630, 630, 630, 632, 0,   632, 632, 632, 632, 632,
    632, 632, 632, 632, 632, 634, 641, 634, 634, 634, 634, 634, 634, 634, 634,

    634, 634, 634, 634, 634, 634, 634, 634, 636, 0,   636, 636, 636, 636, 636, 636, 636,
    636, 636, 0,   0,   0,   0,   0,   642, 643, 0,   647, 634, 634, 634, 634, 634, 634,
    635, 635, 635, 635, 635, 635, 635, 635, 635, 649, 635, 635, 635, 635, 635, 635, 642,
    643, 645, 647, 651, 652, 653, 654, 645, 655, 657, 658, 659, 661, 662, 0,   676, 0,
    0,   649, 635, 635, 635, 635, 635, 635, 0,   0,   645, 0,   651, 652, 653, 654, 645,
    655, 657, 658, 659, 661, 662, 666, 676, 666, 666, 666, 666, 666, 666, 666,

    666, 666, 666, 668, 0,   668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668,
    668, 668, 668, 668, 670, 0,   670, 670, 670, 670, 670, 670, 670, 670, 670, 0,   0,
    0,   0,   0,   0,   678, 0,   0,   668, 668, 668, 668, 668, 668, 669, 669, 669, 669,
    669, 669, 669, 669, 669, 680, 669, 669, 669, 669, 669, 669, 672, 678, 672, 672, 672,
    672, 672, 672, 672, 672, 672, 0,   0,   0,   0,   0,   0,   0,   0,   680, 669, 669,
    669, 669, 669, 669, 671, 0,   671, 671, 671, 671, 671, 671, 671, 671, 671,

    671, 671, 671, 671, 671, 671, 671, 674, 681, 674, 674, 674, 674, 674, 674, 674, 674,
    674, 0,   0,   0,   0,   0,   0,   0,   682, 684, 671, 671, 671, 671, 671, 671, 673,
    681, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673,
    682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 0,   707, 0,   0,   0,   0,   0,
    0,   0,   0,   673, 673, 673, 673, 673, 673, 0,   0,   685, 686, 687, 688, 689, 690,
    691, 693, 698, 707, 698, 698, 698, 698, 698, 698, 698, 698, 698, 698, 698,

    698, 698, 698, 698, 698, 699, 709, 699, 699, 699, 699, 699, 699, 699, 699, 699, 0,
    0,   0,   0,   0,   0,   0,   0,   711, 698, 698, 698, 698, 698, 698, 700, 709, 700,
    700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 701, 711,
    701, 701, 701, 701, 701, 701, 701, 701, 701, 0,   0,   712, 0,   0,   0,   0,   0,
    0,   700, 700, 700, 700, 700, 700, 702, 0,   702, 702, 702, 702, 702, 702, 702, 702,
    702, 702, 704, 712, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704,

    704, 704, 704, 704, 704, 706, 0,   706, 706, 706, 706, 706, 706, 706, 706, 706, 0,
    0,   0,   0,   0,   713, 714, 715, 716, 704, 704, 704, 704, 704, 704, 705, 705, 705,
    705, 705, 705, 705, 705, 705, 717, 705, 705, 705, 705, 705, 705, 713, 714, 715, 716,
    718, 720, 721, 727, 736, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 717, 705,
    705, 705, 705, 705, 705, 741, 0,   0,   0,   718, 720, 721, 729, 736, 729, 729, 729,
    729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 731, 741,

    731, 731, 731, 731, 731, 731, 731, 731, 731, 0,   0,   0,   0,   0,   0,   742, 0,
    0,   729, 729, 729, 729, 729, 729, 730, 730, 730, 730, 730, 730, 730, 730, 730, 743,
    730, 730, 730, 730, 730, 730, 733, 742, 733, 733, 733, 733, 733, 733, 733, 733, 733,
    0,   0,   0,   0,   0,   0,   0,   0,   743, 730, 730, 730, 730, 730, 730, 732, 0,
    732, 732, 732, 732, 732, 732, 732, 732, 732, 732, 732, 732, 732, 732, 732, 732, 735,
    744, 735, 735, 735, 735, 735, 735, 735, 735, 735, 0,   0,   0,   0,   0,

    0,   0,   745, 746, 732, 732, 732, 732, 732, 732, 734, 744, 734, 734, 734, 734, 734,
    734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 745, 746, 748, 755, 763, 755,
    755, 755, 755, 755, 755, 755, 755, 755, 0,   0,   0,   0,   0,   0,   734, 734, 734,
    734, 734, 734, 0,   0,   748, 754, 763, 754, 754, 754, 754, 754, 754, 754, 754, 754,
    754, 754, 754, 754, 754, 754, 754, 757, 768, 757, 757, 757, 757, 757, 757, 757, 757,
    757, 769, 0,   0,   0,   0,   0,   0,   0,   771, 754, 754, 754, 754, 754,

    754, 756, 768, 756, 756, 756, 756, 756, 756, 756, 756, 756, 769, 756, 756, 756, 756,
    756, 756, 758, 771, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 0,   0,   0,
    0,   0,   0,   0,   772, 756, 756, 756, 756, 756, 756, 760, 0,   760, 760, 760, 760,
    760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 762, 772, 762, 762, 762,
    762, 762, 762, 762, 762, 762, 773, 774, 775, 0,   788, 0,   0,   0,   0,   760, 760,
    760, 760, 760, 760, 784, 793, 784, 784, 784, 784, 784, 784, 784, 784, 784,

    773, 774, 775, 781, 788, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 783, 793,
    783, 783, 783, 783, 783, 783, 783, 783, 783, 795, 783, 783, 783, 783, 783, 783, 786,
    798, 786, 786, 786, 786, 786, 786, 786, 786, 786, 0,   0,   0,   0,   0,   0,   0,
    799, 795, 783, 783, 783, 783, 783, 783, 785, 798, 785, 785, 785, 785, 785, 785, 785,
    785, 785, 785, 785, 785, 785, 785, 785, 785, 799, 805, 0,   805, 805, 805, 805, 805,
    805, 805, 805, 805, 0,   0,   0,   0,   0,   0,   0,   809, 785, 785, 785,

    785, 785, 785, 804, 0,   804, 804, 804, 804, 804, 804, 804, 804, 804, 814, 804, 804,
    804, 804, 804, 804, 806, 809, 806, 806, 806, 806, 806, 806, 806, 806, 806, 806, 817,
    825, 826, 827, 832, 833, 834, 814, 804, 804, 804, 804, 804, 804, 822, 840, 822, 822,
    822, 822, 822, 822, 822, 822, 822, 0,   817, 825, 826, 827, 832, 833, 834, 0,   0,
    0,   0,   0,   0,   0,   0,   840, 867, 867, 867, 867, 868, 868, 868, 868, 869, 869,
    869, 869, 870, 0,   870, 870, 871, 871, 871, 871, 872, 0,   872, 872, 873,

    873, 875, 875, 876, 876, 877, 877, 878, 878, 879, 879, 880, 880, 881, 881, 882, 882,
    883, 883, 884, 884, 885, 885, 886, 886, 887, 887, 888, 888, 889, 889, 890, 890, 891,
    891, 892, 892, 893, 893, 894, 894, 895, 895, 896, 896, 897, 897, 898, 898, 899, 899,
    900, 900, 901, 901, 902, 902, 903, 903, 904, 904, 905, 905, 906, 906, 907, 907, 908,
    908, 909, 909, 910, 910, 912, 912, 913, 913, 914, 914, 916, 916, 917, 917, 918, 918,
    921, 921, 922, 922, 923, 923, 925, 925, 926, 926, 929, 929, 930, 930, 931,

    931, 932, 932, 933, 933, 935, 935, 936, 936, 937, 937, 938, 938, 939, 939, 941, 941,
    942, 942, 943, 943, 945, 945, 947, 947, 948, 948, 949, 949, 951, 951, 866, 866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,
    866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866, 866,

    866, 866, 866, 866, 866, 866};

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[102] = {
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)

using namespace std;

namespace std {
unsigned ComBeg;   // line, in which comment begins
unsigned LftCnt;   // how many signs : on the left side of :: sign was interpreted
unsigned RgtCnt;   // the same as above, but on the right side of ::
char Address[16];  // address, which is analizying right now
char AddrPart[16];
unsigned intpos, pos;
yy_ClntParser_stype yylval;
}  // namespace std

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput(yytext, yyleng)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                 \
                                                        \
  if ((result = LexerInput((char *)buf, max_size)) < 0) \
    YY_FATAL_ERROR("input in flex scanner failed");

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError(msg)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL {
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

  if (!(yy_init)) {
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!(yy_start)) (yy_start) = 1; /* first start state */

    if (!yyin) yyin = &std::cin;

    if (!yyout) yyout = &std::cout;

    if (!YY_CURRENT_BUFFER) {
      yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
    }

    yy_load_buffer_state();
  }

  {

    while (1) /* loops until end-of-file is reached */
    {
      yy_cp = (yy_c_buf_p);

      /* Support of yytext. */
      *yy_cp = (yy_hold_char);

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      yy_current_state = (yy_start);
    yy_match:
      do {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        if (yy_accept[yy_current_state]) {
          (yy_last_accepting_state) = yy_current_state;
          (yy_last_accepting_cpos) = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = (int)yy_def[yy_current_state];
          if (yy_current_state >= 867) yy_c = yy_meta[(unsigned int)yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
        ++yy_cp;
      } while (yy_base[yy_current_state] != 4032);

    yy_find_action:
      yy_act = yy_accept[yy_current_state];
      if (yy_act == 0) { /* have to back up */
        yy_cp = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        yy_act = yy_accept[yy_current_state];
      }

      YY_DO_BEFORE_ACTION;

      if (yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act]) {
        yy_size_t yyl;
        for (yyl = 0; yyl < yyleng; ++yyl)
          if (yytext[yyl] == '\n') yylineno++;
        ;
      }

    do_action: /* This label is used only to access EOF actions. */

      switch (yy_act) { /* beginning of action switch */
        case 0:         /* must back up */
          /* undo the effects of YY_DO_BEFORE_ACTION */
          *yy_cp = (yy_hold_char);
          yy_cp = (yy_last_accepting_cpos);
          yy_current_state = (yy_last_accepting_state);
          goto yy_find_action;

        case 1:
          /* rule 1 can match eol */
          YY_RULE_SETUP;  // ignore end of line
          YY_BREAK
        case 2:
          YY_RULE_SETUP;  // ignore TABs and spaces
          YY_BREAK
        case 3:
          YY_RULE_SETUP { return ClntParser::IFACE_; }
          YY_BREAK
        case 4:
          YY_RULE_SETUP { return ClntParser::NO_CONFIG_; }
          YY_BREAK
        case 5:
          YY_RULE_SETUP { return ClntParser::ADDRESS_KEYWORD_; }
          YY_BREAK
        case 6:
          YY_RULE_SETUP { return ClntParser::STRING_KEYWORD_; }
          YY_BREAK
        case 7:
          YY_RULE_SETUP { return ClntParser::DUID_KEYWORD_; }
          YY_BREAK
        case 8:
          YY_RULE_SETUP { return ClntParser::HEX_KEYWORD_; }
          YY_BREAK
        case 9:
          YY_RULE_SETUP { return ClntParser::ADDRESS_LIST_KEYWORD_; }
          YY_BREAK
        case 10:
          YY_RULE_SETUP { return ClntParser::NAME_; }
          YY_BREAK
        case 11:
          YY_RULE_SETUP { return ClntParser::IA_; }
          YY_BREAK
        case 12:
          YY_RULE_SETUP { return ClntParser::TA_; }
          YY_BREAK
        case 13:
          YY_RULE_SETUP { return ClntParser::IAID_; }
          YY_BREAK
        case 14:
          YY_RULE_SETUP { return ClntParser::STATELESS_; }
          YY_BREAK
        case 15:
          YY_RULE_SETUP { return ClntParser::LOGLEVEL_; }
          YY_BREAK
        case 16:
          YY_RULE_SETUP { return ClntParser::LOGMODE_; }
          YY_BREAK
        case 17:
          YY_RULE_SETUP { return ClntParser::LOGNAME_; }
          YY_BREAK
        case 18:
          YY_RULE_SETUP { return ClntParser::LOGCOLORS_; }
          YY_BREAK
        case 19:
          YY_RULE_SETUP { return ClntParser::WORKDIR_; }
          YY_BREAK
        case 20:
          YY_RULE_SETUP { return ClntParser::SCRIPT_; }
          YY_BREAK
        case 21:
          YY_RULE_SETUP { return ClntParser::PREF_TIME_; }
          YY_BREAK
        case 22:
          YY_RULE_SETUP { return ClntParser::PREF_TIME_; }
          YY_BREAK
        case 23:
          YY_RULE_SETUP { return ClntParser::VALID_TIME_; }
          YY_BREAK
        case 24:
          YY_RULE_SETUP { return ClntParser::REMOTE_AUTOCONF_; }
          YY_BREAK
        case 25:
          YY_RULE_SETUP { return ClntParser::T1_; }
          YY_BREAK
        case 26:
          YY_RULE_SETUP { return ClntParser::T2_; }
          YY_BREAK
        case 27:
          YY_RULE_SETUP { return ClntParser::OPTION_; }
          YY_BREAK
        case 28:
          YY_RULE_SETUP { return ClntParser::DNS_SERVER_; }
          YY_BREAK
        case 29:
          YY_RULE_SETUP { return ClntParser::DOMAIN_; }
          YY_BREAK
        case 30:
          YY_RULE_SETUP { return ClntParser::NTP_SERVER_; }
          YY_BREAK
        case 31:
          YY_RULE_SETUP { return ClntParser::TIME_ZONE_; }
          YY_BREAK
        case 32:
          YY_RULE_SETUP { return ClntParser::SIP_SERVER_; }
          YY_BREAK
        case 33:
          YY_RULE_SETUP { return ClntParser::SIP_DOMAIN_; }
          YY_BREAK
        case 34:
          YY_RULE_SETUP { return ClntParser::FQDN_; }
          YY_BREAK
        case 35:
          YY_RULE_SETUP { return ClntParser::FQDN_S_; }
          YY_BREAK
        case 36:
          YY_RULE_SETUP { return ClntParser::DDNS_PROTOCOL_; }
          YY_BREAK
        case 37:
          YY_RULE_SETUP { return ClntParser::DDNS_TIMEOUT_; }
          YY_BREAK
        case 38:
          YY_RULE_SETUP { return ClntParser::NIS_SERVER_; }
          YY_BREAK
        case 39:
          YY_RULE_SETUP { return ClntParser::NIS_DOMAIN_; }
          YY_BREAK
        case 40:
          YY_RULE_SETUP { return ClntParser::NISP_SERVER_; }
          YY_BREAK
        case 41:
          YY_RULE_SETUP { return ClntParser::NISP_DOMAIN_; }
          YY_BREAK
        case 42:
          YY_RULE_SETUP { return ClntParser::LIFETIME_; }
          YY_BREAK
        case 43:
          YY_RULE_SETUP { return ClntParser::ROUTING_; }
          YY_BREAK
        case 44:
          YY_RULE_SETUP { return ClntParser::REJECT_SERVERS_; }
          YY_BREAK
        case 45:
          YY_RULE_SETUP { return ClntParser::PREFERRED_SERVERS_; }
          YY_BREAK
        case 46:
          YY_RULE_SETUP { return ClntParser::PREFERRED_SERVERS_; }
          YY_BREAK
        case 47:
          YY_RULE_SETUP { return ClntParser::RAPID_COMMIT_; }
          YY_BREAK
        case 48:
          YY_RULE_SETUP { return ClntParser::RECONFIGURE_; }
          YY_BREAK
        case 49:
          YY_RULE_SETUP { return ClntParser::UNICAST_; }
          YY_BREAK
        case 50:
          YY_RULE_SETUP { return ClntParser::STRICT_RFC_NO_ROUTING_; }
          YY_BREAK
        case 51:
          YY_RULE_SETUP { return ClntParser::OBEY_RA_BITS_; }
          YY_BREAK
        case 52:
          YY_RULE_SETUP { return ClntParser::PD_; }
          YY_BREAK
        case 53:
          YY_RULE_SETUP { return ClntParser::PD_; }
          YY_BREAK
        case 54:
          YY_RULE_SETUP { return ClntParser::PREFIX_; }
          YY_BREAK
        case 55:
          YY_RULE_SETUP { return ClntParser::DUID_TYPE_; }
          YY_BREAK
        case 56:
          YY_RULE_SETUP { return ClntParser::DUID_TYPE_LL_; }
          YY_BREAK
        case 57:
          YY_RULE_SETUP { return ClntParser::DUID_TYPE_LLT_; }
          YY_BREAK
        case 58:
          YY_RULE_SETUP { return ClntParser::DUID_TYPE_EN_; }
          YY_BREAK
        case 59:
          YY_RULE_SETUP { return ClntParser::VENDOR_SPEC_; }
          YY_BREAK
        case 60:
          YY_RULE_SETUP { return ClntParser::ANON_INF_REQUEST_; }
          YY_BREAK
        case 61:
          YY_RULE_SETUP { return ClntParser::INSIST_MODE_; }
          YY_BREAK
        case 62:
          YY_RULE_SETUP { return ClntParser::INACTIVE_MODE_; }
          YY_BREAK
        case 63:
          YY_RULE_SETUP { return ClntParser::AUTH_METHODS_; }
          YY_BREAK
        case 64:
          YY_RULE_SETUP { return ClntParser::AUTH_PROTOCOL_; }
          YY_BREAK
        case 65:
          YY_RULE_SETUP { return ClntParser::AUTH_ALGORITHM_; }
          YY_BREAK
        case 66:
          YY_RULE_SETUP { return ClntParser::AUTH_REPLAY_; }
          YY_BREAK
        case 67:
          YY_RULE_SETUP { return ClntParser::AUTH_REALM_; }
          YY_BREAK
        case 68:
          YY_RULE_SETUP { return ClntParser::DIGEST_NONE_; }
          YY_BREAK
        case 69:
          YY_RULE_SETUP { return ClntParser::DIGEST_PLAIN_; }
          YY_BREAK
        case 70:
          YY_RULE_SETUP { return ClntParser::DIGEST_HMAC_MD5_; }
          YY_BREAK
        case 71:
          YY_RULE_SETUP { return ClntParser::DIGEST_HMAC_SHA1_; }
          YY_BREAK
        case 72:
          YY_RULE_SETUP { return ClntParser::DIGEST_HMAC_SHA224_; }
          YY_BREAK
        case 73:
          YY_RULE_SETUP { return ClntParser::DIGEST_HMAC_SHA256_; }
          YY_BREAK
        case 74:
          YY_RULE_SETUP { return ClntParser::DIGEST_HMAC_SHA384_; }
          YY_BREAK
        case 75:
          YY_RULE_SETUP { return ClntParser::DIGEST_HMAC_SHA512_; }
          YY_BREAK
        case 76:
          YY_RULE_SETUP { return ClntParser::SKIP_CONFIRM_; }
          YY_BREAK
        case 77:
          YY_RULE_SETUP { return ClntParser::AFTR_; }
          YY_BREAK
        case 78:
          YY_RULE_SETUP { return ClntParser::DOWNLINK_PREFIX_IFACES_; }
          YY_BREAK
        case 79:
          YY_RULE_SETUP { return ClntParser::BIND_TO_ADDR_; }
          YY_BREAK
        case 80:
          YY_RULE_SETUP { return ClntParser::EXPERIMENTAL_; }
          YY_BREAK
        case 81:
          YY_RULE_SETUP { return ClntParser::ADDR_PARAMS_; }
          YY_BREAK
        case 82:
          YY_RULE_SETUP;
          YY_BREAK
        case 83:
          YY_RULE_SETUP;
          YY_BREAK
        case 84:
          YY_RULE_SETUP {
            BEGIN(COMMENT);
            ComBeg = yylineno;
          }
          YY_BREAK
        case 85:
          YY_RULE_SETUP
          BEGIN(INITIAL);
          YY_BREAK
        case 86:
          /* rule 86 can match eol */
          YY_RULE_SETUP;
          YY_BREAK
        case YY_STATE_EOF(COMMENT): {
          Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
          { YYABORT; }
        }
          YY_BREAK
          // IPv6 address - various forms

        case 87:
          YY_RULE_SETUP {
            if (!inet_pton6(yytext, yylval.addrval)) {
              Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
              { YYABORT; }
            } else {
              return ClntParser::IPV6ADDR_;
            }
          }
          YY_BREAK
        case 88:
          YY_RULE_SETUP {
            if (!inet_pton6(yytext, yylval.addrval)) {
              Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
              { YYABORT; }
            } else {
              return ClntParser::IPV6ADDR_;
            }
          }
          YY_BREAK
        case 89:
          YY_RULE_SETUP {
            if (!inet_pton6(yytext, yylval.addrval)) {
              Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
              { YYABORT; }
            } else {
              Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
              return ClntParser::IPV6ADDR_;
            }
          }
          YY_BREAK
        case 90:
          YY_RULE_SETUP {
            if (!inet_pton6(yytext, yylval.addrval)) {
              Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
              { YYABORT; }
            } else {
              return ClntParser::IPV6ADDR_;
            }
          }
          YY_BREAK
        case 91:
          YY_RULE_SETUP {
            if (!inet_pton6(yytext, yylval.addrval)) {
              Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
              { YYABORT; }
            } else {
              return ClntParser::IPV6ADDR_;
            }
          }
          YY_BREAK
        case 92:
          YY_RULE_SETUP {
            if (!inet_pton6(yytext, yylval.addrval)) {
              Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
              { YYABORT; }
            } else {
              return ClntParser::IPV6ADDR_;
            }
          }
          YY_BREAK
        case 93:
          YY_RULE_SETUP {
            if (!inet_pton6(yytext, yylval.addrval)) {
              Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
              { YYABORT; }
            } else {
              return ClntParser::IPV6ADDR_;
            }
          }
          YY_BREAK
        case 94:
          /* rule 94 can match eol */
          YY_RULE_SETUP {
            yylval.strval = new char[strlen(yytext) - 1];
            strncpy(yylval.strval, yytext + 1, strlen(yytext) - 2);
            yylval.strval[strlen(yytext) - 2] = 0;
            return ClntParser::STRING_;
          }
          YY_BREAK
        case 95:
          YY_RULE_SETUP {
            int len = strlen(yytext);
            if (((len > 2) && !strncasecmp("yes", yytext, 3)) ||
                ((len > 3) && !strncasecmp("true", yytext, 4))) {
              yylval.ival = 1;
              return ClntParser::INTNUMBER_;
            }
            if (((len > 1) && !strncasecmp("no", yytext, 2)) ||
                ((len > 4) && !strncasecmp("false", yytext, 5))) {
              yylval.ival = 0;
              return ClntParser::INTNUMBER_;
            }

            yylval.strval = new char[strlen(yytext) + 1];
            strncpy(yylval.strval, yytext, strlen(yytext));
            yylval.strval[strlen(yytext)] = 0;
            return ClntParser::STRING_;
          }
          YY_BREAK
        case 96:
          YY_RULE_SETUP {
            // DUID in 0x00010203 format
            int len;
            char *ptr;
            if (strlen(yytext) % 2) {
              yytext[1] = '0';  // if odd than no-meaning zero at the beginning
              len = strlen(yytext) - 1;
              ptr = yytext + 1;
            } else {
              len = strlen(yytext) - 2;
              ptr = yytext + 2;
            }

            // and now there is an even number of hex digits
            yylval.duidval.length = len >> 1;
            yylval.duidval.duid = new char[len >> 1];
            for (int i = 0; i < len; i++) {
              yylval.duidval.duid[i >> 1] <<= 4;
              if (!isxdigit(ptr[i])) {
                Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
                { YYABORT; }
              }
              if (isalpha(ptr[i])) {
                yylval.duidval.duid[i >> 1] |= toupper(ptr[i]) - 'A' + 10;
              } else {
                yylval.duidval.duid[i >> 1] |= ptr[i] - '0';
              }
            }
            return ClntParser::DUID_;
          }
          YY_BREAK
        case 97:
          YY_RULE_SETUP {
            // DUID in 00:01:02:03 format
            int len = (strlen(yytext) + 1) / 3;
            char *pos = 0;
            yylval.duidval.length = len;
            yylval.duidval.duid = new char[len];

            int i = 0;
            for (pos = yytext; pos <= yytext + strlen(yytext) - 2; pos += 3) {
              char x;
              if (isalpha(*pos))
                x = (toupper(*pos) - 'A' + 10);
              else
                x = *pos - '0';
              x *= 16;

              if (isalpha(*(pos + 1)))
                x += (toupper(*(pos + 1)) - 'A' + 10);
              else
                x += *(pos + 1) - '0';
              yylval.duidval.duid[i] = x;
              i++;
            }

            return ClntParser::DUID_;
          }
          YY_BREAK
        case 98:
          YY_RULE_SETUP {
            yytext[strlen(yytext) - 1] = '\n';
            if (!sscanf(yytext, "%10x", (unsigned int *)&(yylval.ival))) {
              Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
              { YYABORT; }
            }
            return ClntParser::HEXNUMBER_;
          }
          YY_BREAK
        case 99:
          YY_RULE_SETUP {
            if (!sscanf(yytext, "%10u", (unsigned int *)&(yylval.ival))) {
              Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
              { YYABORT; }
            }
            return ClntParser::INTNUMBER_;
          }
          YY_BREAK
        case 100:
          YY_RULE_SETUP { return yytext[0]; }
          YY_BREAK
        case 101:
          YY_RULE_SETUP
          ECHO;
          YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(ADDR):
          yyterminate();

        case YY_END_OF_BUFFER: {
          /* Amount of text matched not including the EOB char. */
          int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

          /* Undo the effects of YY_DO_BEFORE_ACTION. */
          *yy_cp = (yy_hold_char);
          YY_RESTORE_YY_MORE_OFFSET

          if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between YY_CURRENT_BUFFER and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
            YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
          }

          /* Note that here we test for yy_c_buf_p "<=" to the position
           * of the first EOB in the buffer, since yy_c_buf_p will
           * already have been incremented past the NUL character
           * (since all states make transitions on EOB to the
           * end-of-buffer state).  Contrast this with the test
           * in input().
           */
          if ((yy_c_buf_p) <=
              &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]) { /* This was really a NUL. */
            yy_state_type yy_next_state;

            (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans(yy_current_state);

            yy_bp = (yytext_ptr) + YY_MORE_ADJ;

            if (yy_next_state) {
              /* Consume the NUL. */
              yy_cp = ++(yy_c_buf_p);
              yy_current_state = yy_next_state;
              goto yy_match;
            }

            else {
              yy_cp = (yy_c_buf_p);
              goto yy_find_action;
            }
          }

          else
            switch (yy_get_next_buffer()) {
              case EOB_ACT_END_OF_FILE: {
                (yy_did_buffer_switch_on_eof) = 0;

                if (yywrap()) {
                  /* Note: because we've taken care in
                   * yy_get_next_buffer() to have set up
                   * yytext, we can now set up
                   * yy_c_buf_p so that if some total
                   * hoser (like flex itself) wants to
                   * call the scanner after we return the
                   * YY_NULL, it'll still work - another
                   * YY_NULL will get returned.
                   */
                  (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                  yy_act = YY_STATE_EOF(YY_START);
                  goto do_action;
                }

                else {
                  if (!(yy_did_buffer_switch_on_eof)) YY_NEW_FILE;
                }
                break;
              }

              case EOB_ACT_CONTINUE_SCAN:
                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = (yy_c_buf_p);
                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                goto yy_match;

              case EOB_ACT_LAST_MATCH:
                (yy_c_buf_p) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                yy_current_state = yy_get_previous_state();

                yy_cp = (yy_c_buf_p);
                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                goto yy_find_action;
            }
          break;
        }

        default:
          YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
      } /* end of action switch */
    }   /* end of scanning one token */
  }     /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer(std::istream *arg_yyin, std::ostream *arg_yyout) {
  yyin = arg_yyin;
  yyout = arg_yyout;
  yy_c_buf_p = 0;
  yy_init = 0;
  yy_start = 0;
  yy_flex_debug = 0;
  yylineno = 1;  // this will only get updated if %option yylineno

  yy_did_buffer_switch_on_eof = 0;

  yy_looking_for_trail_begin = 0;
  yy_more_flag = 0;
  yy_more_len = 0;
  yy_more_offset = yy_prev_more_offset = 0;

  yy_start_stack_ptr = yy_start_stack_depth = 0;
  yy_start_stack = NULL;

  yy_buffer_stack = 0;
  yy_buffer_stack_top = 0;
  yy_buffer_stack_max = 0;

  yy_state_buf = 0;
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer() {
  delete[] yy_state_buf;
  yyfree(yy_start_stack);
  yy_delete_buffer(YY_CURRENT_BUFFER);
  yyfree(yy_buffer_stack);
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams(std::istream *new_in, std::ostream *new_out) {
  if (new_in) {
    yy_delete_buffer(YY_CURRENT_BUFFER);
    yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
  }

  if (new_out) yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char *buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char *buf, int max_size)
#endif
{
  if (yyin->eof() || yyin->fail()) return 0;

#ifdef YY_INTERACTIVE
  yyin->get(buf[0]);

  if (yyin->eof()) return 0;

  if (yyin->bad()) return -1;

  return 1;

#else
  (void)yyin->read(buf, max_size);

  if (yyin->bad())
    return -1;
  else
    return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput(const char *buf, int size) { (void)yyout->write(buf, size); }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer() {
  register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  register char *source = (yytext_ptr);
  register int number_to_move, i;
  int ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0) { /* Don't try to fill the buffer, so this is
                                                          an EOF. */
    if ((yy_c_buf_p) - (yytext_ptr)-YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

  for (i = 0; i < number_to_move; ++i) *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else {
    yy_size_t num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

      int yy_c_buf_p_offset = (int)((yy_c_buf_p)-b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        yy_size_t new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
            /* Include room in for 2 EOB chars. */
            yyrealloc((void *)b->yy_ch_buf, b->yy_buf_size + 2);
      } else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;

      if (!b->yy_ch_buf) YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE) num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), (yy_n_chars), num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  if ((yy_n_chars) == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart(yyin);
    }

    else {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yy_size_t)((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf =
        (char *)yyrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
  }

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state() {
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = (yy_start);

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp) {
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state]) {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos) = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
      yy_current_state = (int)yy_def[yy_current_state];
      if (yy_current_state >= 867) yy_c = yy_meta[(unsigned int)yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state) {
  register int yy_is_jam;
  register char *yy_cp = (yy_c_buf_p);

  register YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state]) {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos) = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
    yy_current_state = (int)yy_def[yy_current_state];
    if (yy_current_state >= 867) yy_c = yy_meta[(unsigned int)yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  yy_is_jam = (yy_current_state == 866);

  return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput(int c, register char *yy_bp) {
  register char *yy_cp;

  yy_cp = (yy_c_buf_p);

  /* undo effects of setting up yytext */
  *yy_cp = (yy_hold_char);

  if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2) { /* need to shift things up to make room */
    /* +2 for EOB chars. */
    register yy_size_t number_to_move = (yy_n_chars) + 2;
    register char *dest =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
    register char *source = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

    while (source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) *--dest = *--source;

    yy_cp += (int)(dest - source);
    yy_bp += (int)(dest - source);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

    if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
      YY_FATAL_ERROR("flex scanner push-back overflow");
  }

  *--yy_cp = (char)c;

  if (c == '\n') {
    --yylineno;
  }

  (yytext_ptr) = yy_bp;
  (yy_hold_char) = *yy_cp;
  (yy_c_buf_p) = yy_cp;
}

int yyFlexLexer::yyinput() {
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
      /* This was really a NUL. */
      *(yy_c_buf_p) = '\0';

    else { /* need more input */
      yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
      ++(yy_c_buf_p);

      switch (yy_get_next_buffer()) {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
           * sees that we've accumulated a
           * token and flags that we need to
           * try matching the token before
           * proceeding.  But for input(),
           * there's no matching to consider.
           * So convert the EOB_ACT_LAST_MATCH
           * to EOB_ACT_END_OF_FILE.
           */

          /* Reset buffer status. */
          yyrestart(yyin);

          /*FALLTHROUGH*/

        case EOB_ACT_END_OF_FILE: {
          if (yywrap()) return EOF;

          if (!(yy_did_buffer_switch_on_eof)) YY_NEW_FILE;
#ifdef __cplusplus
          return yyinput();
#else
          return input();
#endif
        }

        case EOB_ACT_CONTINUE_SCAN:
          (yy_c_buf_p) = (yytext_ptr) + offset;
          break;
      }
    }
  }

  c = *(unsigned char *)(yy_c_buf_p); /* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0';               /* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  if (c == '\n') yylineno++;
  ;

  return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart(std::istream *input_file) {

  if (!YY_CURRENT_BUFFER) {
    yyensure_buffer_stack();
    YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
  }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer) {

  /* TODO. We should be able to replace this entire function body
   * with
   *		yypop_buffer_state();
   *		yypush_buffer_state(new_buffer);
   */
  yyensure_buffer_stack();
  if (YY_CURRENT_BUFFER == new_buffer) return;

  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

void yyFlexLexer::yy_load_buffer_state() {
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c
 * YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream *file, int size) {
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state));
  if (!b) YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *)yyalloc(b->yy_buf_size + 2);
  if (!b->yy_ch_buf) YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b) {

  if (!b) return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

  if (b->yy_is_our_buffer) yyfree((void *)b->yy_ch_buf);

  yyfree((void *)b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, std::istream *file)

{
  int oerrno = errno;

  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER) {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  b->yy_is_interactive = 0;
  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b) {
  if (!b) return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER) yy_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yyFlexLexer::yypush_buffer_state(YY_BUFFER_STATE new_buffer) {
  if (new_buffer == NULL) return;

  yyensure_buffer_stack();

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER) (yy_buffer_stack_top)++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yyFlexLexer::yypop_buffer_state(void) {
  if (!YY_CURRENT_BUFFER) return;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if ((yy_buffer_stack_top) > 0) --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER) {
    yy_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
  }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void) {
  yy_size_t num_to_alloc;

  if (!(yy_buffer_stack)) {

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) =
        (struct yy_buffer_state **)yyalloc(num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack)) YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state *));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
  }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {

    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state **)yyrealloc(
        (yy_buffer_stack), num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack)) YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0,
           grow_size * sizeof(struct yy_buffer_state *));
    (yy_buffer_stack_max) = num_to_alloc;
  }
}

void yyFlexLexer::yy_push_state(int new_state) {
  if ((yy_start_stack_ptr) >= (yy_start_stack_depth)) {
    yy_size_t new_size;

    (yy_start_stack_depth) += YY_START_STACK_INCR;
    new_size = (yy_start_stack_depth) * sizeof(int);

    if (!(yy_start_stack))
      (yy_start_stack) = (int *)yyalloc(new_size);

    else
      (yy_start_stack) = (int *)yyrealloc((void *)(yy_start_stack), new_size);

    if (!(yy_start_stack)) YY_FATAL_ERROR("out of memory expanding start-condition stack");
  }

  (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

  BEGIN(new_state);
}

void yyFlexLexer::yy_pop_state() {
  if (--(yy_start_stack_ptr) < 0) YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

int yyFlexLexer::yy_top_state() { return (yy_start_stack)[(yy_start_stack_ptr)-1]; }

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(yyconst char msg[]) {
  std::cerr << msg << std::endl;
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                             \
  do {                                        \
    /* Undo effects of setting up yytext. */  \
    int yyless_macro_arg = (n);               \
    YY_LESS_LINENO(yyless_macro_arg);         \
    yytext[yyleng] = (yy_hold_char);          \
    (yy_c_buf_p) = yytext + yyless_macro_arg; \
    (yy_hold_char) = *(yy_c_buf_p);           \
    *(yy_c_buf_p) = '\0';                     \
    yyleng = yyless_macro_arg;                \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n) {
  register int i;
  for (i = 0; i < n; ++i) s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *s) {
  register int n;
  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *yyalloc(yy_size_t size) { return (void *)malloc(size); }

void *yyrealloc(void *ptr, yy_size_t size) {
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *)realloc((char *)ptr, size);
}

void yyfree(void *ptr) { free((char *)ptr); /* see yyrealloc() for (char *) cast */ }

#define YYTABLES_NAME "yytables"
