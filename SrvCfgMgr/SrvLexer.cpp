#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[638] =
    {   0,
        1,    1,    0,    0,    0,    0,   74,   72,    2,    1,
        1,   72,   55,   72,   72,   71,   71,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   59,   59,   73,
        1,    1,    1,    0,   67,   55,    0,   67,   57,   56,
       71,    0,    0,   70,    0,   64,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   52,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   15,   16,   68,   68,
       68,   68,   68,   68,   68,   68,   58,   56,   71,    0,

        0,   63,   69,   62,   62,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   51,   71,    0,    0,    0,   61,   61,    0,   62,
        0,   62,   68,   68,   68,   46,   68,   68,   68,   68,
       68,   68,   68,   68,   35,   68,   68,   68,   68,    0,
       68,   68,   68,   68,   68,   68,   21,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   53,   68,   68,   68,
       68,   71,    0,    0,    0,    0,   61,    0,   61,    0,

       62,   62,   62,   62,   68,   68,   68,   68,    4,   68,
       68,   68,   68,   68,   54,    3,   68,   68,   68,   68,
       68,    0,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,    7,   22,   68,   68,   68,   68,   68,   68,
       68,   68,   68,    0,    0,    0,    0,   61,   61,   61,
       61,    0,   62,   62,   62,    0,   62,   68,   68,   68,
       68,   27,   68,   68,   30,   68,   68,   68,   68,   68,
       68,   68,    0,    0,   68,   68,   68,   28,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,    0,    0,    0,   61,   61,   61,    0,

       61,    0,    0,   62,   62,   62,   62,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,    0,    0,   68,   68,   68,   68,   68,   44,   68,
       68,   68,   68,   68,   68,   68,   68,   19,   68,   68,
       68,    0,    0,    0,    0,    0,   61,   61,   61,   61,
        0,   62,   62,   62,    0,   62,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   40,   68,   11,
        9,    0,    0,   68,   68,   68,   42,   68,   68,   68,
       68,   68,   68,   68,   68,    5,   68,   68,   68,   12,
        0,    0,    0,   61,   61,   61,    0,   61,   66,   62,

       62,   62,   62,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   10,    0,    0,   68,   68,   68,
       43,   68,   68,   68,   68,   68,   68,    6,   32,   68,
       68,    0,    0,    0,   65,   61,   61,   61,   61,   62,
       62,   62,    0,   62,   68,   68,   41,   68,   68,   68,
       68,   29,   68,   68,   68,    0,    0,   37,   36,   31,
       68,   20,   68,   68,   34,   33,   68,   68,    0,    0,
       61,   61,   61,    0,   61,   62,   62,   62,   62,   13,
       49,   68,   68,   68,   47,   68,   68,   68,   39,   38,
       68,   68,   68,   68,   45,    0,    0,    0,   61,   61,

       61,   61,   62,   62,   62,    0,   62,   68,   68,   68,
       50,   68,    8,   68,   23,   68,   68,    0,    0,   61,
       61,   61,    0,   61,   62,   62,   62,   62,   68,   68,
       68,   68,   68,   68,   68,    0,    0,    0,   61,   61,
       61,   61,   62,   62,   62,    0,   62,   68,   68,   68,
       68,   68,   14,   18,    0,   60,   63,   61,   61,   61,
        0,   61,   62,   62,   62,   62,   25,   68,   68,   24,
       68,    0,   60,    0,   61,   61,   61,   61,   61,   62,
       62,   62,    0,   62,   26,   48,   68,   60,   63,   61,
        0,   61,   61,   61,   61,   62,   62,   62,   17,   60,

       61,   61,   61,   61,   62,   62,   62,   61,   61,    0,
       61,   61,   62,   61,   61,   62,   61,   61,    0,   61,
       61,   61,   61,    0,   61,   61,   61,   61,    0,   61,
       61,   61,   61,    0,   61,   61,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[717] =
    {   0,
        0,    0, 2013, 2012,    0,    0, 2019, 2022, 2022,   41,
       43, 2013,    0, 2010,   40,   40, 1975, 1998,   69,   95,
       46,   40, 1973,   33, 1996,  102,  104,  105,   60,  106,
       51,  109,  130,  112,   78,  107,   57, 2022, 2000, 2022,
       46,   94,   98, 2006, 2022,    0, 2003, 2002, 2022,    0,
      153, 1991,   90, 2022,    0,  136, 1990,  166, 1986, 1984,
     1987,  123, 1983,  136,  140,   63,  160,  166, 1973,  111,
      141,  174,   53,  176,  177, 1984,  175,  178,  186,  180,
      184,  181,  190,  187,  185,  192, 1983, 1982,  206,  203,
      204,  205,  207,  208,  209,  210, 2022,    0,  234,  247,

     1981,  251,    0,  257,  270,  274, 1975, 1961,  138, 1970,
      265,  212,  213,  228,  223,  215,  274,  281,  282,  283,
      286,  294,  297,  299,  296,  298,  300,  302,  304,  306,
      315,  303,  324,  307,  319,  318,  320,  326,  328,  330,
      241, 1977,  342,  355, 1976, 1975,  361,  374,  378,  384,
      395,  401,  405, 1958,  356, 1973,  331,  396,  405,  412,
      413,  414,  416,  417, 1972,  420,  418,  421,  426, 1978,
      424,  427,  211,  430,  444,  433, 1970,  445,  447,  332,
      429,  452,  455,  453,  456,  467, 1969,  461,  465,  463,
      471,  483, 1968, 1967, 1966,  488,  494,  505,  511,  517,

      523,  536,  542,  555, 1965,  537,  473,  477,  562,  550,
      556,  558,  559,  466, 1964,  567,  506,  565,  561,  564,
      568,  567,  572,  575,  577,  578,  583,  581,  585,  588,
      596,  590, 1963, 1962,  593,  594,  591,  597,  601,  602,
      611,  605,  472, 1961, 1960, 1959,  618,  634,  647,  653,
      666,  670,  676, 1958,  683,  694,  700,  620,  618,  607,
      518,  629,  678,  624, 1957,  648,  695,  700,  702,  703,
      705,  704, 1941, 1950,  706,  710,  711, 1954,  707,  713,
      712,  716,  727,  738,  722,  714,  718,  733,  734,  736,
      739,  744,  741, 1953, 1952,  749,  761, 1951,  768,  779,

      785,  791,  797,  803,  816,  822,  835,  830,  780,  754,
      742,  740,  835,  817,  836,  837,  844,  846,  848,  850,
      852, 1937, 1931,  858,  840,  842,  792,  854, 1948,  856,
      861,  863,  867,  865,  869,  871,  872, 1947,  873,  875,
      877, 1946, 1945, 1944,  902,  908,  914,  927,  933,  946,
      882,  952, 1943,  959,  970,  976,  883,  884,  928,  309,
      891,  909,  971,  976,  889,  977,  978, 1942,  979, 1941,
     1940, 1938, 1916,  980,  982,  985, 1937,  984,  995,  993,
      994,  997,  999,  998, 1000, 1936, 1005,  941,  609, 1935,
     1934, 1933, 1015, 1024, 1932, 1031, 1042, 1048, 1052, 1058,

     1071, 1077, 1090, 1004, 1002, 1085, 1098, 1072, 1092, 1094,
     1095, 1006, 1104, 1106, 1931, 1921, 1924, 1100, 1101, 1102,
     1928, 1103, 1105, 1053, 1107, 1109, 1111, 1927, 1926, 1112,
     1121, 1925, 1924, 1923, 1134, 1140, 1153, 1159, 1172, 1178,
     1922, 1185, 1196, 1202, 1148, 1135, 1921, 1197, 1125, 1124,
     1202, 1920, 1203, 1205, 1206, 1905, 1900, 1917, 1916, 1915,
     1210, 1914, 1211, 1208, 1913, 1912, 1212, 1218, 1911, 1910,
     1228, 1909, 1239, 1250, 1256, 1262, 1275, 1281, 1294, 1908,
     1907, 1229, 1289, 1223, 1906, 1294, 1295, 1298, 2022, 2022,
     1122, 1231, 1296, 1299, 1905, 1904, 1903, 1902, 1317, 1330,

     1336, 1349, 1355, 1901, 1362, 1373, 1379, 1303, 1307, 1257,
     1900, 1379, 1899, 1381, 1898, 1305, 1167, 1897, 1896, 1391,
     1895, 1398, 1409, 1415, 1421, 1434, 1440, 1453, 1331, 1382,
     1448, 1374, 1435, 1410, 1453, 1894, 1893, 1892, 1465, 1478,
     1484, 1497, 1503, 1891, 1510, 1521, 1527, 1522, 1454, 1528,
     1530, 1531, 1890, 1889, 1888, 1887,    0, 1545, 1886, 1552,
     1563, 1569, 1575, 1588, 1594, 1607, 1885, 1532, 1460, 1884,
     1344, 1883, 1882, 1881, 1880, 1613, 1626, 1632, 1645, 1651,
     1879, 1658,    0, 1671, 1878, 1877, 1533, 1876, 2022, 1875,
        0, 1677, 1874, 1684, 1697, 1703, 1716,    0, 1873, 1777,

     1764, 1743, 1722, 1735, 1741, 1736,    0, 1730, 1722,    0,
     1748, 2022,    0, 1717, 1711, 2022, 1698, 1692,    0, 1684,
     1679, 1672, 1666,    0, 1653, 1646, 1640, 1632,    0, 1627,
     1621, 1608, 1602,    0, 1589, 1583, 2022, 1764, 1769, 1774,
     1779, 1784, 1787, 1792, 1794, 1583, 1577, 1796, 1560, 1798,
     1800, 1549, 1802, 1804, 1547, 1806, 1808, 1518, 1810, 1812,
     1511, 1814, 1816, 1505, 1818, 1820, 1492, 1822, 1824, 1429,
     1826, 1828, 1397, 1830, 1832, 1322, 1834, 1836, 1310, 1838,
     1840, 1283, 1842, 1844, 1243, 1227, 1846, 1848, 1056, 1850,
     1852, 1030,  906, 1854, 1856,  799, 1858,  450,  448, 1860,

     1862, 1864,  392, 1866, 1868, 1870,  382, 1872, 1874, 1876,
      157, 1878, 1880, 1882,   74, 1884
    } ;

static yyconst flex_int16_t yy_def[717] =
    {   0,
      637,    1,  638,  638,  639,  639,  637,  637,  637,  637,
      637,  640,  641,  642,  637,  637,   16,  637,  643,  643,
       20,   20,   20,   20,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  637,  637,  637,
      637,  637,  637,  640,  637,  641,  642,  637,  637,  644,
      637,  645,   51,  637,  646,  647,  643,   20,   58,   58,
      643,  643,   58,  643,  643,  643,  643,  643,   58,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  637,  644,  637,   99,

      648,  649,  646,  637,  104,   58,  106,  106,  643,  106,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  637,  143,  650,  651,  637,  147,  637,  637,
      652,  150,  106,  153,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  637,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  144,  144,  653,  654,  637,  637,  655,  197,  637,

      637,  201,  637,  203,  153,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  637,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  637,  656,  657,  637,  637,  248,  637,
      250,  637,  637,  637,  637,  658,  255,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  637,  637,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  659,  660,  637,  637,  637,  637,  661,

      299,  637,  637,  637,  304,  637,  306,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  637,  637,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  637,  662,  663,  637,  637,  637,  347,  637,  349,
      637,  637,  637,  637,  664,  354,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  637,  637,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      665,  666,  637,  637,  637,  637,  667,  396,  637,  637,

      400,  637,  402,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  637,  637,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  637,  668,  669,  637,  637,  436,  637,  438,  637,
      637,  637,  670,  442,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  637,  637,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  671,  672,
      637,  637,  637,  673,  473,  637,  476,  637,  478,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  637,  637,
      643,  643,  643,  643,  643,  637,  674,  675,  637,  499,

      637,  501,  637,  637,  637,  676,  505,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  677,  678,  637,
      637,  637,  679,  522,  637,  525,  637,  527,  643,  643,
      643,  643,  643,  643,  643,  637,  680,  681,  637,  539,
      637,  541,  637,  637,  637,  682,  545,  643,  643,  643,
      643,  643,  643,  643,  683,  684,  685,  637,  637,  637,
      686,  560,  637,  563,  637,  565,  643,  643,  643,  643,
      643,  637,  687,  637,  688,  637,  576,  637,  578,  637,
      637,  637,  689,  582,  643,  643,  643,  690,  637,  691,
      692,  637,  637,  637,  594,  637,  596,  693,  643,  637,

      694,  695,  637,  603,  637,  637,  696,  637,  697,  698,
      637,  637,  699,  700,  701,  637,  637,  702,  703,  704,
      705,  637,  706,  707,  708,  709,  637,  710,  711,  712,
      713,  637,  714,  715,  716,  637,    0,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,

      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637
    } ;

static yyconst flex_int16_t yy_nxt[2066] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   25,   26,   25,   25,   27,   25,
       28,   29,   30,   25,   31,   32,   33,   34,   35,   36,
       25,   37,   25,   41,   42,   43,   42,   49,   41,   42,
       69,   50,   51,   51,   51,   51,   52,   53,   53,   53,
       53,   53,   53,   63,   54,   65,   70,  637,   82,  637,
       66,   67,   83,  637,   64,  121,  637,  579,   96,  637,
       55,   58,   58,   58,   58,   52,   58,   58,   59,   60,
       58,   58,   78,   61,  637,   93,   43,   42,  114,   94,

       41,   42,  100,  100,  100,  100,   62,   58,   58,   58,
       58,   52,   58,   58,   58,   58,   58,   58,  637,   61,
      637,  637,  637,  637,   71,  637,   79,  637,  637,   73,
       75,  118,   72,   84,   85,   74,   76,   80,   95,  637,
       81,   77,   92,   87,   88,   86,  637,   89,  104,  104,
      104,  104,  637,  111,  637,   90,  637,  637,  119,  109,
      631,  112,  156,  113,   91,   99,   99,   99,   99,   52,
      100,  100,  100,  100,  100,  100,  637,   54,  106,  106,
      106,  106,  637,  106,  106,  106,  106,  106,  106,  115,
      637,  637,  637,  637,  637,  126,  637,  637,  116,  122,

      637,  637,  637,  637,  132,  128,  637,  124,  637,  134,
      120,  127,  123,  129,  125,  135,  130,  133,  131,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      138,  637,  136,  159,  160,  139,  163,  161,  140,  637,
      162,  137,  226,  141,  637,  142,  143,  143,  143,  143,
       52,  144,  144,  144,  144,  144,  144,  637,   54,  144,
      144,  144,  144,  147,  147,  147,  147,  149,  191,  150,
      150,  150,  150,  151,  152,  152,  152,  152,  152,  152,
      637,  637,  152,  152,  152,  152,  153,  153,  153,  153,
      637,  153,  153,  153,  153,  153,  153,  637,  637,  637,

      158,  166,  637,  169,  167,  170,  171,  168,  172,  164,
      637,  165,  637,  637,  637,  637,  637,  174,  637,  637,
      637,  173,  637,  637,  178,  637,  175,  180,  177,  179,
      176,  637,  181,  183,  637,  637,  637,  182,  185,  186,
      637,  187,  637,  184,  637,  188,  637,  637,  637,  407,
      190,  232,  208,  189,  192,  192,  192,  192,   52,  193,
      193,  193,  193,  193,  193,  207,   54,  193,  193,  193,
      193,  196,  637,  197,  197,  197,  197,  198,  199,  199,
      199,  199,  199,  199,  637,  626,  199,  199,  199,  199,
      200,  200,  200,  200,  149,  621,  201,  201,  201,  201,

      151,  202,  202,  202,  202,  202,  202,  203,  203,  203,
      203,  637,  637,  202,  202,  202,  202,  205,  205,  205,
      205,  637,  205,  205,  205,  205,  205,  205,  637,  637,
      637,  209,  637,  637,  637,  210,  637,  637,  215,  213,
      637,  216,  637,  637,  223,  637,  637,  211,  212,  637,
      214,  616,  217,  615,  219,  220,  221,  218,  227,  224,
      637,  637,  225,  637,  229,  228,  230,  231,  637,  637,
      233,  637,  637,  234,  237,  235,  239,  637,  240,  637,
      243,  637,  637,  637,  238,  241,  260,  637,  637,  637,
      236,  266,  293,  637,  242,  192,  192,  192,  192,  637,

      247,  247,  247,  247,  196,  259,  248,  248,  248,  248,
      198,  249,  249,  249,  249,  249,  249,  250,  250,  250,
      250,  637,  637,  249,  249,  249,  249,  252,  268,  200,
      200,  200,  200,  149,  637,  253,  253,  253,  253,  151,
      254,  254,  254,  254,  254,  254,  637,  311,  254,  254,
      254,  254,  149,  637,  255,  255,  255,  255,  256,  257,
      257,  257,  257,  257,  257,  637,  637,  257,  257,  257,
      257,  261,  637,  258,  637,  637,  267,  637,  637,  264,
      637,  637,  270,  637,  637,  272,  262,  273,  637,  265,
      269,  637,  263,  637,  637,  271,  276,  637,  277,  637,

      279,  637,  274,  275,  637,  283,  637,  637,  278,  637,
      637,  280,  637,  637,  288,  286,  281,  637,  637,  287,
      291,  637,  282,  637,  285,  637,  284,  637,  296,  308,
      247,  247,  247,  247,  637,  309,  637,  290,  312,  292,
      637,  431,  310,  289,  196,  637,  297,  297,  297,  297,
      198,  298,  298,  298,  298,  298,  298,  637,  314,  298,
      298,  298,  298,  196,  637,  299,  299,  299,  299,  300,
      301,  301,  301,  301,  301,  301,  637,  315,  301,  301,
      301,  301,  302,  302,  302,  302,  149,  313,  303,  303,
      303,  303,  151,  149,  637,  304,  304,  304,  304,  256,

      305,  305,  305,  305,  305,  305,  306,  306,  306,  306,
      637,  637,  305,  305,  305,  305,  637,  317,  637,  637,
      637,  637,  637,  637,  316,  320,  637,  637,  637,  637,
      637,  318,  637,  321,  637,  324,  328,  330,  637,  335,
      329,  319,  327,  637,  325,  326,  331,  332,  334,  637,
      637,  333,  637,  340,  637,  637,  637,  637,  637,  360,
      637,  345,  345,  345,  345,  337,  341,  339,  336,  361,
      637,  196,  338,  346,  346,  346,  346,  198,  196,  359,
      347,  347,  347,  347,  300,  348,  348,  348,  348,  348,
      348,  349,  349,  349,  349,  637,  637,  348,  348,  348,

      348,  351,  613,  302,  302,  302,  302,  149,  637,  303,
      303,  303,  303,  149,  358,  352,  352,  352,  352,  256,
      353,  353,  353,  353,  353,  353,  637,  377,  353,  353,
      353,  353,  149,  637,  354,  354,  354,  354,  355,  356,
      356,  356,  356,  356,  356,  637,  637,  356,  356,  356,
      356,  637,  637,  637,  366,  364,  637,  365,  637,  362,
      637,  357,  637,  367,  637,  363,  637,  368,  637,  369,
      637,  370,  637,  371,  637,  374,  379,  637,  375,  637,
      376,  637,  382,  637,  383,  637,  380,  637,  637,  637,
      378,  637,  381,  637,  399,  399,  399,  399,  388,  637,

      637,  405,  387,  384,  385,  637,  386,  637,  408,  607,
      389,  390,  393,  404,  345,  345,  345,  345,  196,  412,
      346,  346,  346,  346,  196,  637,  394,  394,  394,  394,
      300,  395,  395,  395,  395,  395,  395,  637,  409,  395,
      395,  395,  395,  196,  637,  396,  396,  396,  396,  397,
      398,  398,  398,  398,  398,  398,  637,  637,  398,  398,
      398,  398,  149,  430,  303,  303,  303,  303,  256,  149,
      406,  400,  400,  400,  400,  355,  401,  401,  401,  401,
      401,  401,  402,  402,  402,  402,  637,  637,  401,  401,
      401,  401,  637,  637,  637,  637,  637,  411,  637,  414,

      637,  637,  410,  419,  422,  418,  420,  415,  421,  637,
      637,  637,  423,  637,  637,  637,  637,  413,  637,  427,
      637,  637,  637,  424,  426,  425,  429,  435,  435,  435,
      435,  446,  445,  602,  196,  428,  346,  346,  346,  346,
      300,  196,  453,  436,  436,  436,  436,  397,  437,  437,
      437,  437,  437,  437,  438,  438,  438,  438,  637,  598,
      437,  437,  437,  437,  399,  399,  399,  399,  149,  637,
      440,  440,  440,  440,  355,  441,  441,  441,  441,  441,
      441,  637,  463,  441,  441,  441,  441,  149,  637,  442,
      442,  442,  442,  443,  444,  444,  444,  444,  444,  444,

      637,  637,  444,  444,  444,  444,  447,  448,  637,  450,
      637,  637,  449,  454,  637,  455,  637,  637,  637,  637,
      637,  637,  637,  637,  451,  637,  462,  637,  637,  452,
      458,  461,  464,  467,  483,  459,  460,  637,  637,  465,
      637,  637,  468,  484,  514,  466,  435,  435,  435,  435,
      196,  637,  471,  471,  471,  471,  397,  472,  472,  472,
      472,  472,  472,  637,  637,  472,  472,  472,  472,  196,
      481,  473,  473,  473,  473,  474,  475,  475,  475,  475,
      475,  475,  637,  637,  475,  475,  475,  475,  149,  480,
      303,  303,  303,  303,  355,  149,  535,  476,  476,  476,

      476,  443,  477,  477,  477,  477,  477,  477,  478,  478,
      478,  478,  637,  637,  477,  477,  477,  477,  637,  637,
      486,  637,  637,  485,  637,  482,  637,  637,  637,  493,
      579,  488,  510,  487,  637,  491,  492,  495,  196,  637,
      346,  346,  346,  346,  397,  637,  575,  637,  494,  196,
      508,  499,  499,  499,  499,  474,  500,  500,  500,  500,
      500,  500,  501,  501,  501,  501,  637,  515,  500,  500,
      500,  500,  149,  637,  503,  503,  503,  503,  443,  504,
      504,  504,  504,  504,  504,  637,  566,  504,  504,  504,
      504,  149,  531,  505,  505,  505,  505,  506,  507,  507,

      507,  507,  507,  507,  637,  637,  507,  507,  507,  507,
      637,  637,  637,  542,  637,  637,  512,  509,  513,  637,
      529,  637,  511,  637,  517,  528,  516,  196,  530,  520,
      520,  520,  520,  474,  521,  521,  521,  521,  521,  521,
      637,  534,  521,  521,  521,  521,  196,  637,  522,  522,
      522,  522,  523,  524,  524,  524,  524,  524,  524,  637,
      637,  524,  524,  524,  524,  149,  548,  303,  303,  303,
      303,  443,  149,  587,  525,  525,  525,  525,  506,  526,
      526,  526,  526,  526,  526,  527,  527,  527,  527,  637,
      637,  526,  526,  526,  526,  637,  532,  637,  637,  549,

      502,  196,  533,  346,  346,  346,  346,  474,  196,  551,
      539,  539,  539,  539,  523,  540,  540,  540,  540,  540,
      540,  541,  541,  541,  541,  637,  637,  540,  540,  540,
      540,  149,  479,  543,  543,  543,  543,  506,  544,  544,
      544,  544,  544,  544,  637,  553,  544,  544,  544,  544,
      149,  637,  545,  545,  545,  545,  546,  547,  547,  547,
      547,  547,  547,  637,  637,  547,  547,  547,  547,  637,
      637,  552,  550,  586,  554,  196,  637,  558,  558,  558,
      558,  523,  559,  559,  559,  559,  559,  559,  637,  568,
      559,  559,  559,  559,  196,  439,  560,  560,  560,  560,

      561,  562,  562,  562,  562,  562,  562,  637,  403,  562,
      562,  562,  562,  149,  350,  303,  303,  303,  303,  506,
      149,  307,  563,  563,  563,  563,  546,  564,  564,  564,
      564,  564,  564,  565,  565,  565,  565,  637,  637,  564,
      564,  564,  564,  567,  637,  569,  637,  637,  637,  637,
      251,  570,  204,  585,  599,  196,  571,  346,  346,  346,
      346,  523,  196,  148,  576,  576,  576,  576,  561,  577,
      577,  577,  577,  577,  577,  578,  578,  578,  578,  637,
      105,  577,  577,  577,  577,  149,  103,  580,  580,  580,
      580,  546,  581,  581,  581,  581,  581,  581,  637,  634,

      581,  581,  581,  581,  149,  634,  582,  582,  582,  582,
      583,  584,  584,  584,  584,  584,  584,  637,  634,  584,
      584,  584,  584,  196,  629,  592,  592,  592,  592,  561,
      593,  593,  593,  593,  593,  593,  637,  634,  593,  593,
      593,  593,  196,  629,  594,  594,  594,  594,  629,  595,
      595,  595,  595,  595,  595,  637,  624,  595,  595,  595,
      595,  149,  629,  303,  303,  303,  303,  546,  149,  624,
      596,  596,  596,  596,  583,  597,  597,  597,  597,  597,
      597,  637,  624,  597,  597,  597,  597,  196,  619,  346,
      346,  346,  346,  561,  196,  624,  603,  603,  603,  603,

      619,  604,  604,  604,  604,  604,  604,  637,  619,  604,
      604,  604,  604,  149,  610,  605,  605,  605,  605,  583,
      606,  606,  606,  606,  606,  606,  637,  619,  606,  606,
      606,  606,  196,  610,  611,  611,  611,  611,  610,  612,
      612,  612,  612,  612,  612,  637,  591,  612,  612,  612,
      612,  149,  583,  303,  303,  303,  303,  583,  196,  610,
      346,  346,  346,  346,   38,   38,   38,   38,   38,   40,
       40,   40,   40,   40,   44,   44,   44,   44,   44,   46,
      591,   46,   46,   46,   47,   47,   47,   47,   47,   57,
       57,   57,   98,  574,   98,   98,   98,  101,  101,  145,

      145,  194,  194,  195,  195,  244,  244,  245,  245,  294,
      294,  295,  295,  342,  342,  343,  343,  391,  391,  392,
      392,  432,  432,  433,  433,  469,  469,  470,  470,  496,
      496,  497,  497,  518,  518,  519,  519,  536,  536,  537,
      537,  555,  555,  556,  556,  572,  572,  573,  573,  588,
      588,  590,  590,  600,  600,  601,  601,  608,  608,  609,
      609,  614,  614,  617,  617,  618,  618,  620,  620,  622,
      622,  623,  623,  625,  625,  627,  627,  628,  628,  630,
      630,  632,  632,  633,  633,  635,  635,  636,  636,  637,
      561,  591,  574,  637,  637,  546,  591,  589,  574,  538,

      637,  637,  523,  574,  538,  637,  637,  506,  557,  538,
      498,  474,  538,  498,  637,  637,  637,  443,  102,  498,
      434,  637,  637,  637,  637,  397,  498,  434,  637,  637,
      637,  637,  637,  637,  490,  489,  637,  637,  355,  102,
      434,  344,  637,  637,  637,  457,  456,  637,  300,  434,
      344,  637,  637,  637,  417,  416,  637,  637,  637,  256,
      102,  344,  246,  637,  637,  373,  372,  198,  344,  246,
      637,  323,  322,  637,  151,  102,  246,  146,  637,  637,
      637,  637,  246,  146,  637,  637,  637,  222,  637,  637,
      206,  102,  146,  637,  157,  155,  154,  146,  637,  637,

      637,  117,  110,  637,  108,  107,  637,  102,   47,   48,
       45,   97,  637,   68,   56,  637,   48,   45,  637,   39,
       39,    7,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637
    } ;

static yyconst flex_int16_t yy_chk[2066] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   41,   41,
       24,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   21,   16,   22,   24,   31,   31,   73,
       22,   22,   31,   37,   21,   73,   29,  715,   37,   66,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   29,   19,   35,   35,   42,   42,   66,   35,

       43,   43,   53,   53,   53,   53,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   26,   20,
       27,   28,   30,   36,   26,   32,   30,   70,   34,   27,
       28,   70,   26,   32,   32,   27,   28,   30,   36,   62,
       30,   28,   34,   33,   33,   32,   33,   33,   56,   56,
       56,   56,   64,   64,  109,   33,   65,   71,   71,   62,
      711,   64,  109,   65,   33,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   67,   51,   58,   58,
       58,   58,   68,   58,   58,   58,   58,   58,   58,   67,
       72,   77,   74,   75,   78,   79,   80,   82,   68,   74,

       81,   85,   79,   84,   84,   81,   83,   77,   86,   86,
       72,   80,   75,   82,   78,   89,   83,   85,   83,   90,
       91,   92,   89,   93,   94,   95,   96,  173,  112,  113,
       92,  116,   90,  112,  113,   93,  116,  114,   94,  115,
      115,   91,  173,   95,  114,   96,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  141,   99,  100,
      100,  100,  100,  102,  102,  102,  102,  104,  141,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      105,  111,  105,  105,  105,  105,  106,  106,  106,  106,
      117,  106,  106,  106,  106,  106,  106,  118,  119,  120,

      111,  119,  121,  122,  120,  123,  123,  121,  124,  117,
      122,  118,  125,  123,  126,  124,  127,  126,  128,  132,
      129,  125,  130,  134,  128,  360,  126,  130,  127,  129,
      126,  131,  131,  133,  136,  135,  137,  132,  135,  136,
      133,  137,  138,  134,  139,  138,  140,  157,  180,  360,
      140,  180,  157,  139,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  155,  143,  144,  144,  144,
      144,  147,  155,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  148,  707,  148,  148,  148,  148,
      149,  149,  149,  149,  150,  703,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  151,  151,  151,
      151,  152,  158,  152,  152,  152,  152,  153,  153,  153,
      153,  159,  153,  153,  153,  153,  153,  153,  160,  161,
      162,  158,  163,  164,  167,  159,  166,  168,  164,  162,
      171,  166,  169,  172,  171,  181,  174,  160,  161,  176,
      163,  699,  167,  698,  169,  169,  169,  168,  174,  171,
      175,  178,  172,  179,  176,  175,  178,  179,  182,  184,
      181,  183,  185,  182,  184,  183,  186,  188,  188,  190,
      191,  189,  214,  186,  185,  189,  208,  191,  243,  207,
      183,  214,  243,  208,  190,  192,  192,  192,  192,  192,

      196,  196,  196,  196,  197,  207,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  198,  198,  198,
      198,  199,  217,  199,  199,  199,  199,  200,  217,  200,
      200,  200,  200,  201,  261,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  202,  261,  202,  202,
      202,  202,  203,  206,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  204,  210,  204,  204,  204,
      204,  209,  211,  206,  212,  213,  216,  219,  209,  212,
      220,  218,  219,  216,  221,  221,  210,  222,  223,  213,
      218,  224,  211,  225,  226,  220,  224,  228,  225,  227,

      227,  229,  222,  223,  230,  231,  232,  237,  226,  235,
      236,  228,  231,  238,  238,  236,  229,  239,  240,  237,
      241,  242,  230,  260,  235,  389,  232,  241,  247,  258,
      247,  247,  247,  247,  259,  259,  258,  240,  262,  242,
      264,  389,  260,  239,  248,  262,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  249,  264,  249,
      249,  249,  249,  250,  266,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  251,  266,  251,  251,
      251,  251,  252,  252,  252,  252,  253,  263,  253,  253,
      253,  253,  253,  255,  263,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  256,  256,  256,  256,
      257,  267,  257,  257,  257,  257,  268,  268,  269,  270,
      272,  271,  275,  279,  267,  271,  276,  277,  281,  280,
      286,  269,  282,  272,  287,  275,  280,  282,  285,  287,
      281,  270,  279,  283,  276,  277,  283,  284,  286,  288,
      289,  285,  290,  292,  284,  291,  312,  293,  311,  311,
      292,  296,  296,  296,  296,  289,  293,  291,  288,  312,
      310,  297,  290,  297,  297,  297,  297,  297,  299,  310,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  300,  300,  300,  300,  301,  309,  301,  301,  301,

      301,  302,  696,  302,  302,  302,  302,  303,  327,  303,
      303,  303,  303,  304,  309,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  305,  327,  305,  305,
      305,  305,  306,  314,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  307,  308,  307,  307,  307,
      307,  313,  315,  316,  316,  314,  325,  315,  326,  313,
      317,  308,  318,  317,  319,  313,  320,  318,  321,  319,
      328,  320,  330,  321,  324,  324,  330,  331,  325,  332,
      326,  334,  332,  333,  333,  335,  330,  336,  337,  339,
      328,  340,  331,  341,  351,  351,  351,  351,  339,  357,

      358,  358,  337,  334,  335,  365,  336,  361,  361,  693,
      340,  341,  345,  357,  345,  345,  345,  345,  346,  365,
      346,  346,  346,  346,  347,  362,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  348,  362,  348,
      348,  348,  348,  349,  359,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  350,  388,  350,  350,
      350,  350,  352,  388,  352,  352,  352,  352,  352,  354,
      359,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  355,  355,  355,  355,  356,  363,  356,  356,
      356,  356,  364,  366,  367,  369,  374,  364,  375,  367,

      378,  376,  363,  375,  379,  374,  376,  369,  378,  380,
      381,  379,  380,  382,  384,  383,  385,  366,  405,  384,
      404,  387,  412,  381,  383,  382,  387,  393,  393,  393,
      393,  405,  404,  692,  394,  385,  394,  394,  394,  394,
      394,  396,  412,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  397,  397,  397,  397,  398,  689,
      398,  398,  398,  398,  399,  399,  399,  399,  400,  424,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  401,  424,  401,  401,  401,  401,  402,  408,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      403,  406,  403,  403,  403,  403,  406,  407,  409,  409,
      410,  411,  408,  413,  407,  414,  418,  419,  420,  422,
      413,  423,  414,  425,  410,  426,  423,  427,  430,  411,
      418,  422,  425,  430,  449,  419,  420,  431,  491,  426,
      450,  449,  431,  450,  491,  427,  435,  435,  435,  435,
      436,  446,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  437,  445,  437,  437,  437,  437,  438,
      446,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  439,  517,  439,  439,  439,  439,  440,  445,
      440,  440,  440,  440,  440,  442,  517,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  443,  443,
      443,  443,  444,  448,  444,  444,  444,  444,  451,  453,
      453,  454,  455,  451,  464,  448,  461,  463,  467,  464,
      686,  455,  484,  454,  468,  461,  463,  468,  471,  484,
      471,  471,  471,  471,  471,  482,  685,  492,  467,  473,
      482,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  474,  474,  474,  474,  475,  492,  475,  475,
      475,  475,  476,  510,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  477,  682,  477,  477,  477,
      477,  478,  510,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  479,  483,  479,  479,  479,  479,
      486,  487,  493,  679,  488,  494,  487,  483,  488,  508,
      508,  516,  486,  509,  494,  676,  493,  499,  509,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      500,  516,  500,  500,  500,  500,  501,  529,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  502,
      571,  502,  502,  502,  502,  503,  529,  503,  503,  503,
      503,  503,  505,  571,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  506,  506,  506,  506,  507,
      532,  507,  507,  507,  507,  512,  512,  514,  530,  530,

      673,  520,  514,  520,  520,  520,  520,  520,  522,  532,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  523,  523,  523,  523,  524,  534,  524,  524,  524,
      524,  525,  670,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  526,  534,  526,  526,  526,  526,
      527,  533,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  528,  531,  528,  528,  528,  528,  535,
      549,  533,  531,  569,  535,  539,  569,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  540,  549,
      540,  540,  540,  540,  541,  667,  541,  541,  541,  541,

      541,  541,  541,  541,  541,  541,  541,  542,  664,  542,
      542,  542,  542,  543,  661,  543,  543,  543,  543,  543,
      545,  658,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  546,  546,  546,  546,  547,  548,  547,
      547,  547,  547,  548,  550,  550,  551,  552,  568,  587,
      655,  551,  652,  568,  587,  558,  552,  558,  558,  558,
      558,  558,  560,  649,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  561,  561,  561,  561,  562,
      647,  562,  562,  562,  562,  563,  646,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  564,  636,

      564,  564,  564,  564,  565,  635,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  566,  633,  566,
      566,  566,  566,  576,  632,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  577,  631,  577,  577,
      577,  577,  578,  630,  578,  578,  578,  578,  628,  578,
      578,  578,  578,  578,  578,  579,  627,  579,  579,  579,
      579,  580,  626,  580,  580,  580,  580,  580,  582,  625,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  584,  623,  584,  584,  584,  584,  592,  622,  592,
      592,  592,  592,  592,  594,  621,  594,  594,  594,  594,

      620,  594,  594,  594,  594,  594,  594,  595,  618,  595,
      595,  595,  595,  596,  617,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  597,  615,  597,  597,
      597,  597,  603,  614,  603,  603,  603,  603,  609,  603,
      603,  603,  603,  603,  603,  604,  608,  604,  604,  604,
      604,  605,  606,  605,  605,  605,  605,  605,  611,  602,
      611,  611,  611,  611,  638,  638,  638,  638,  638,  639,
      639,  639,  639,  639,  640,  640,  640,  640,  640,  641,
      601,  641,  641,  641,  642,  642,  642,  642,  642,  643,
      643,  643,  644,  600,  644,  644,  644,  645,  645,  648,

      648,  650,  650,  651,  651,  653,  653,  654,  654,  656,
      656,  657,  657,  659,  659,  660,  660,  662,  662,  663,
      663,  665,  665,  666,  666,  668,  668,  669,  669,  671,
      671,  672,  672,  674,  674,  675,  675,  677,  677,  678,
      678,  680,  680,  681,  681,  683,  683,  684,  684,  687,
      687,  688,  688,  690,  690,  691,  691,  694,  694,  695,
      695,  697,  697,  700,  700,  701,  701,  702,  702,  704,
      704,  705,  705,  706,  706,  708,  708,  709,  709,  710,
      710,  712,  712,  713,  713,  714,  714,  716,  716,  599,
      593,  590,  588,  586,  585,  581,  575,  574,  573,  572,

      570,  567,  559,  556,  555,  554,  553,  544,  538,  537,
      536,  521,  519,  518,  515,  513,  511,  504,  498,  497,
      496,  495,  485,  481,  480,  472,  470,  469,  466,  465,
      462,  460,  459,  458,  457,  456,  452,  447,  441,  434,
      433,  432,  429,  428,  421,  417,  416,  415,  395,  392,
      391,  390,  386,  377,  373,  372,  371,  370,  368,  353,
      344,  343,  342,  338,  329,  323,  322,  298,  295,  294,
      278,  274,  273,  265,  254,  246,  245,  244,  234,  233,
      215,  205,  195,  194,  193,  187,  177,  170,  165,  156,
      154,  146,  145,  142,  110,  108,  107,  101,   88,   87,

       76,   69,   63,   61,   60,   59,   57,   52,   48,   47,
       44,   39,   25,   23,   18,   17,   14,   12,    7,    4,
        3,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[74] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1135 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1240 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 638 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2022 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::AUTH_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 118 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 119 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 60:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 180 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 192 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 199 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 220 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 252 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 262 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 271 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 274 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1833 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 638 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 638 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 637);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 274 "SrvLexer.l"




