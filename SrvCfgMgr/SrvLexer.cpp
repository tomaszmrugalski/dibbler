#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 62
#define YY_END_OF_BUFFER 63
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[558] =
    {   0,
        1,    1,    0,    0,    0,    0,   63,   61,    2,    1,
        1,   61,   44,   61,   61,   60,   60,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   48,   48,   62,    1,
        1,    1,    0,   56,   44,    0,   56,   46,   45,   60,
        0,    0,   59,    0,   53,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   41,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   15,
       16,   57,   57,   57,   57,   57,   57,   57,   47,   45,
       60,    0,    0,   52,   58,   51,   51,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   40,   60,    0,    0,
        0,   50,   50,    0,   51,    0,   51,   57,   57,   57,
       57,   57,   57,   57,   34,   57,   57,   57,   57,    0,
       57,   57,   57,   21,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   42,   57,   57,   57,   60,    0,    0,
        0,    0,   50,    0,   50,    0,   51,   51,   51,   51,
       57,   57,    4,   57,   57,   57,   43,    3,   57,   57,
       57,   57,   57,    0,   57,   57,   57,   57,   57,   57,

       57,    7,   22,   57,   57,   57,   57,   57,   57,   57,
       57,    0,    0,    0,    0,   50,   50,   50,   50,    0,
       51,   51,   51,    0,   51,   57,   57,   57,   57,   29,
       57,   57,   57,   57,   57,   57,    0,    0,   57,   57,
       57,   27,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,    0,    0,    0,   50,   50,   50,    0,
       50,    0,    0,   51,   51,   51,   51,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,    0,    0,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       19,   57,   57,    0,    0,    0,    0,    0,   50,   50,

       50,   50,    0,   51,   51,   51,    0,   51,   57,   57,
       57,   57,   57,   57,   39,   57,   11,    9,    0,    0,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
        5,   57,   57,   12,    0,    0,    0,   50,   50,   50,
        0,   50,   55,   51,   51,   51,   51,   57,   57,   57,
       57,   57,   57,   10,    0,    0,   57,   57,   57,   57,
       57,   57,   57,   57,   57,    6,   31,   57,    0,    0,
        0,   54,   50,   50,   50,   50,   51,   51,   51,    0,
       51,   57,   57,   57,   28,   57,   57,    0,    0,   36,
       35,   30,   57,   20,   57,   57,   33,   32,   57,    0,

        0,   50,   50,   50,    0,   50,   51,   51,   51,   51,
       13,   57,   57,   57,   57,   38,   37,   57,   57,   57,
       57,    0,    0,    0,   50,   50,   50,   50,   51,   51,
       51,    0,   51,   57,   57,   57,    8,   57,   23,   57,
       57,    0,    0,   50,   50,   50,    0,   50,   51,   51,
       51,   51,   57,   57,   57,   57,   57,   57,    0,    0,
        0,   50,   50,   50,   50,   51,   51,   51,    0,   51,
       57,   57,   57,   57,   14,   18,    0,   49,   52,   50,
       50,   50,    0,   50,   51,   51,   51,   51,   25,   57,
       24,   57,    0,   49,    0,   50,   50,   50,   50,   50,

       51,   51,   51,    0,   51,   26,   57,   49,   52,   50,
        0,   50,   50,   50,   50,   51,   51,   51,   17,   49,
       50,   50,   50,   50,   51,   51,   51,   50,   50,    0,
       50,   50,   51,   50,   50,   51,   50,   50,    0,   50,
       50,   50,   50,    0,   50,   50,   50,   50,    0,   50,
       50,   50,   50,    0,   50,   50,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[637] =
    {   0,
        0,    0, 1860, 1859,    0,    0, 1866, 1869, 1869,   41,
       43, 1860,    0, 1857,   40,   40, 1822, 1845,   69,   82,
     1832,   18,   33, 1843,   47,   89,   91,   60,   92,   51,
       93,  117,   49,   54,   94,   57, 1869, 1847, 1869,   72,
      109,  133, 1853, 1869,    0, 1850, 1849, 1869,    0,  140,
     1838,  125, 1869,    0,  131, 1837,  153, 1833, 1835,  160,
       97,   99, 1822,  162,  131,  105,  147,  163,  164, 1833,
      165,  167,  171,  103,  168,  178,  133,  173,  174, 1832,
     1831,  179,  180,  176,  182,  192,  177,  194, 1869,    0,
      218,  202, 1830,  209,    0,  233,  246,  250, 1824,  209,

      257,  203,  210,  241,  250,  258,  263,  265,  266,  279,
      274,  269,  273,  275,  277,  282,  283,  276,  295,  280,
      289,  291,  293,  299,  297,  290, 1828,  311,  324, 1827,
     1826,  330,  343,  347,  353,  364,  370,  374, 1809,  365,
      304,  374,  381,  382, 1824,  383,  385,  305,  386, 1830,
      391,  389,  392, 1822,  396,  402,  394,  404,  409,  411,
      412,  413,  423, 1821,  418,  420,  428,  435, 1820, 1819,
     1818,  440,  446,  457,  463,  469,  475,  488,  494,  507,
     1817,  489,  514,  502,  422,  510, 1816,  515,  458,  511,
      512,  426,  518,  509,  516,  521,  525,  523,  527,  536,

      532, 1815, 1814,  533,  534,  535,  540,  538,  542,  550,
      549, 1813, 1812, 1811,  560,  571,  584,  590,  603,  607,
      613, 1810,  620,  631,  637,  551,  212,  562,  632, 1809,
      470,  637,  566,  563,  639,  640, 1793, 1802,  641,  642,
      644, 1806,  646,  645,  615,  652,  649,  656,  647,  655,
      657,  659,  663, 1805, 1804,  677,  684, 1803,  691,  702,
      708,  714,  720,  726,  739,  745,  758,  664,  668,  721,
      740,  758,  760,  761,  764,  765,  767, 1789, 1783,  773,
      753,  768,  777,  771,  776,  782,  778,  780,  784,  546,
     1800,  785,  787, 1799, 1798, 1797,  799,  810,  816,  829,

      835,  848,  852,  858, 1796,  865,  876,  882,  788,  853,
      882,  884,  885,  886, 1795,  703, 1794, 1793, 1791, 1769,
      792,  887,  888,  897,  895,  811,  894,  896,  899,  900,
     1790,  902,  908, 1789, 1788, 1787,  914,  924, 1786,  931,
      942,  948,  952,  958,  971,  977,  990,  903,  992,  966,
      991, 1000, 1001, 1785, 1775, 1778,  996,  995,  997,  999,
      998,  830,  917, 1002, 1004, 1782, 1781, 1007, 1780, 1779,
     1778, 1021, 1029, 1042, 1048, 1061, 1067, 1777, 1074, 1085,
     1091, 1037, 1086, 1021, 1776, 1091, 1092, 1761, 1756, 1773,
     1772, 1771, 1093, 1770, 1095, 1094, 1769, 1768, 1096, 1767,

     1766, 1111, 1765, 1123, 1116, 1136, 1142, 1155, 1161, 1174,
     1764, 1169, 1106, 1175, 1177, 1869, 1869, 1131, 1156, 1178,
     1179, 1763, 1762, 1761, 1199, 1188, 1212, 1225, 1231, 1760,
     1238, 1249, 1255, 1005, 1189, 1190, 1759, 1250, 1758, 1256,
     1043, 1757, 1756, 1263, 1755, 1283, 1268, 1274, 1296, 1309,
     1315, 1328,  953, 1274, 1207, 1258, 1291, 1323, 1754, 1753,
     1752, 1335, 1348, 1354, 1367, 1373, 1751, 1380, 1391, 1397,
     1392, 1330, 1398, 1399, 1750, 1749, 1748, 1747,    0, 1413,
     1746, 1420, 1431, 1437, 1443, 1456, 1462, 1475, 1745, 1400,
     1744, 1220, 1743, 1742, 1741, 1645, 1481, 1494, 1500, 1513,

     1519, 1632, 1526,    0, 1539, 1611, 1401, 1604, 1869, 1598,
        0, 1545, 1590, 1552, 1565, 1571, 1584,    0, 1585, 1579,
     1566, 1560, 1590, 1603, 1609, 1552,    0, 1547, 1540,    0,
     1616, 1869,    0, 1534, 1521, 1869, 1514, 1508,    0, 1500,
     1495, 1489, 1476,    0, 1470, 1457, 1451, 1438,    0, 1432,
     1415, 1404, 1402,    0, 1375, 1368, 1869, 1632, 1637, 1642,
     1647, 1652, 1655, 1660, 1662, 1375, 1356, 1664, 1317, 1666,
     1668, 1282, 1670, 1672, 1196, 1674, 1676, 1163, 1678, 1680,
     1113, 1682, 1684, 1110, 1686, 1688, 1082, 1690, 1692, 1037,
     1694, 1696, 1021, 1698, 1700,  956, 1702, 1704,  929, 1706,

     1708,  914, 1710, 1712,  873,  802, 1714, 1716,  722, 1718,
     1720,  699,  671, 1722, 1724,  611, 1726,  418,  361, 1728,
     1730, 1732,  351, 1734, 1736, 1738,  316, 1740, 1742, 1744,
      215, 1746, 1748, 1750,  198, 1752
    } ;

static yyconst flex_int16_t yy_def[637] =
    {   0,
      557,    1,  558,  558,  559,  559,  557,  557,  557,  557,
      557,  560,  561,  562,  557,  557,   16,  557,  563,  563,
       20,   20,   20,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  557,  557,  557,  557,
      557,  557,  560,  557,  561,  562,  557,  557,  564,  557,
      565,   50,  557,  566,  567,  563,   20,   57,  563,  563,
      563,  563,   57,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  557,  564,
      557,   91,  568,  569,  566,  557,   96,   57,   98,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  557,  128,  570,
      571,  557,  132,  557,  557,  572,  135,   98,  138,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  557,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  129,  129,  573,
      574,  557,  557,  575,  173,  557,  557,  177,  557,  179,
      138,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  557,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  557,  576,  577,  557,  557,  216,  557,  218,  557,
      557,  557,  557,  578,  223,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  557,  557,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  579,  580,  557,  557,  557,  557,  581,
      259,  557,  557,  557,  264,  557,  266,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  557,  557,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  557,  582,  583,  557,  557,  557,  299,

      557,  301,  557,  557,  557,  557,  584,  306,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  557,  557,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  585,  586,  557,  557,  557,  557,
      587,  340,  557,  557,  344,  557,  346,  563,  563,  563,
      563,  563,  563,  563,  557,  557,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  557,  588,
      589,  557,  557,  373,  557,  375,  557,  557,  557,  590,
      379,  563,  563,  563,  563,  563,  563,  557,  557,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  591,

      592,  557,  557,  557,  593,  404,  557,  407,  557,  409,
      563,  563,  563,  563,  563,  557,  557,  563,  563,  563,
      563,  557,  594,  595,  557,  425,  557,  427,  557,  557,
      557,  596,  431,  563,  563,  563,  563,  563,  563,  563,
      563,  597,  598,  557,  557,  557,  599,  446,  557,  449,
      557,  451,  563,  563,  563,  563,  563,  563,  557,  600,
      601,  557,  462,  557,  464,  557,  557,  557,  602,  468,
      563,  563,  563,  563,  563,  563,  603,  604,  605,  557,
      557,  557,  606,  482,  557,  485,  557,  487,  563,  563,
      563,  563,  557,  607,  557,  608,  557,  497,  557,  499,

      557,  557,  557,  609,  503,  563,  563,  610,  557,  611,
      612,  557,  557,  557,  514,  557,  516,  613,  563,  557,
      614,  615,  557,  523,  557,  557,  616,  557,  617,  618,
      557,  557,  619,  620,  621,  557,  557,  622,  623,  624,
      625,  557,  626,  627,  628,  629,  557,  630,  631,  632,
      633,  557,  634,  635,  636,  557,    0,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,

      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557
    } ;

static yyconst flex_int16_t yy_nxt[1913] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   20,   23,   24,   24,   25,   24,   24,   26,   24,
       27,   28,   29,   24,   30,   31,   32,   33,   34,   35,
       24,   36,   24,   40,   41,   42,   41,   48,   61,   62,
       63,   49,   50,   50,   50,   50,   51,   52,   52,   52,
       52,   52,   52,  557,   53,  557,   64,  557,   75,   65,
      557,   86,   76,  557,   40,   41,  557,   66,   88,   85,
       54,   57,   57,   57,   57,   51,   57,   57,   58,   57,
       57,   57,   72,   59,   57,   57,   57,   57,   51,   57,

       57,   57,   57,   57,   57,  557,   59,  557,  557,  557,
      557,   42,   41,  557,   67,  557,   69,   77,   78,  557,
       68,  557,   70,   73,  114,   87,   74,   71,  103,   79,
       80,   81,  102,  557,   82,   40,   41,   92,   92,   92,
       92,  107,   83,   96,   96,   96,   96,  557,  106,  557,
      118,   84,   91,   91,   91,   91,   51,   92,   92,   92,
       92,   92,   92,  557,   53,   98,   98,   98,   98,  108,
       98,   98,   98,   98,   98,   98,  557,  100,  557,  557,
      557,  557,  105,  557,  557,  101,  109,  557,  121,  557,
      557,  120,  557,  557,  557,  557,  557,  111,  557,  110,

      115,  500,  113,  112,  116,  119,  117,  124,  557,  122,
      557,  126,  142,  123,  129,  129,  129,  129,  551,  557,
      125,  132,  132,  132,  132,  557,  557,  143,  557,  127,
      128,  128,  128,  128,   51,  129,  129,  129,  129,  129,
      129,  269,   53,  134,  140,  135,  135,  135,  135,  136,
      137,  137,  137,  137,  137,  137,  557,  557,  137,  137,
      137,  137,  138,  138,  138,  138,  557,  138,  138,  138,
      138,  138,  138,  557,  557,  149,  144,  146,  141,  557,
      145,  557,  557,  152,  147,  557,  148,  150,  151,  557,
      557,  557,  557,  557,  153,  557,  557,  155,  557,  557,

      158,  154,  156,  157,  160,  557,  557,  557,  162,  557,
      159,  557,  163,  557,  164,  557,  161,  167,  165,  546,
      557,  557,  166,  168,  168,  168,  168,   51,  169,  169,
      169,  169,  169,  169,  184,   53,  169,  169,  169,  169,
      172,  190,  173,  173,  173,  173,  174,  175,  175,  175,
      175,  175,  175,  557,  541,  175,  175,  175,  175,  176,
      176,  176,  176,  134,  536,  177,  177,  177,  177,  136,
      178,  178,  178,  178,  178,  178,  179,  179,  179,  179,
      557,  557,  178,  178,  178,  178,  181,  181,  181,  181,
      557,  181,  181,  181,  181,  181,  181,  557,  557,  557,

      183,  557,  557,  187,  188,  557,  186,  557,  557,  185,
      557,  195,  557,  201,  191,  192,  193,  199,  557,  189,
      557,  535,  200,  198,  197,  557,  196,  557,  557,  557,
      203,  204,  208,  206,  557,  209,  557,  211,  557,  557,
      210,  207,  557,  229,  557,  202,  205,  168,  168,  168,
      168,  557,  215,  215,  215,  215,  172,  235,  216,  216,
      216,  216,  174,  217,  217,  217,  217,  217,  217,  218,
      218,  218,  218,  557,  557,  217,  217,  217,  217,  220,
      232,  176,  176,  176,  176,  134,  557,  221,  221,  221,
      221,  136,  222,  222,  222,  222,  222,  222,  557,  272,

      222,  222,  222,  222,  134,  557,  223,  223,  223,  223,
      224,  225,  225,  225,  225,  225,  225,  557,  557,  225,
      225,  225,  225,  227,  231,  226,  557,  557,  557,  237,
      557,  557,  557,  234,  557,  236,  233,  557,  228,  557,
      230,  557,  240,  557,  238,  244,  241,  239,  557,  557,
      557,  557,  557,  242,  557,  247,  557,  249,  557,  252,
      268,  243,  557,  248,  246,  557,  557,  557,  245,  253,
      256,  270,  215,  215,  215,  215,  332,  251,  557,  557,
      250,  172,  557,  257,  257,  257,  257,  174,  258,  258,
      258,  258,  258,  258,  557,  274,  258,  258,  258,  258,

      172,  275,  259,  259,  259,  259,  260,  261,  261,  261,
      261,  261,  261,  557,  533,  261,  261,  261,  261,  262,
      262,  262,  262,  134,  285,  263,  263,  263,  263,  136,
      134,  557,  264,  264,  264,  264,  224,  265,  265,  265,
      265,  265,  265,  266,  266,  266,  266,  557,  557,  265,
      265,  265,  265,  557,  273,  557,  557,  557,  557,  276,
      557,  557,  557,  557,  284,  557,  271,  283,  557,  277,
      280,  557,  557,  557,  527,  557,  281,  288,  282,  557,
      557,  286,  289,  287,  557,  310,  290,  292,  293,  297,
      297,  297,  297,  291,  172,  309,  298,  298,  298,  298,

      174,  172,  522,  299,  299,  299,  299,  260,  300,  300,
      300,  300,  300,  300,  301,  301,  301,  301,  557,  557,
      300,  300,  300,  300,  303,  518,  262,  262,  262,  262,
      134,  354,  263,  263,  263,  263,  134,  557,  304,  304,
      304,  304,  224,  305,  305,  305,  305,  305,  305,  557,
      311,  305,  305,  305,  305,  134,  557,  306,  306,  306,
      306,  307,  308,  308,  308,  308,  308,  308,  557,  557,
      308,  308,  308,  308,  557,  313,  557,  557,  312,  314,
      557,  557,  315,  557,  557,  316,  317,  557,  318,  557,
      321,  322,  557,  557,  557,  327,  557,  324,  557,  328,

      557,  557,  326,  557,  557,  500,  323,  325,  557,  337,
      333,  297,  297,  297,  297,  330,  329,  357,  348,  331,
      172,  334,  298,  298,  298,  298,  172,  557,  338,  338,
      338,  338,  260,  339,  339,  339,  339,  339,  339,  557,
      362,  339,  339,  339,  339,  172,  557,  340,  340,  340,
      340,  341,  342,  342,  342,  342,  342,  342,  557,  395,
      342,  342,  342,  342,  343,  343,  343,  343,  134,  557,
      263,  263,  263,  263,  224,  134,  496,  344,  344,  344,
      344,  307,  345,  345,  345,  345,  345,  345,  346,  346,
      346,  346,  557,  349,  345,  345,  345,  345,  557,  350,

      557,  557,  557,  557,  557,  351,  360,  353,  358,  359,
      557,  557,  557,  557,  361,  557,  557,  488,  557,  557,
      365,  364,  363,  367,  557,  352,  372,  372,  372,  372,
      368,  382,  465,  557,  172,  366,  298,  298,  298,  298,
      260,  172,  396,  373,  373,  373,  373,  341,  374,  374,
      374,  374,  374,  374,  375,  375,  375,  375,  557,  452,
      374,  374,  374,  374,  343,  343,  343,  343,  134,  557,
      377,  377,  377,  377,  307,  378,  378,  378,  378,  378,
      378,  557,  557,  378,  378,  378,  378,  134,  471,  379,
      379,  379,  379,  380,  381,  381,  381,  381,  381,  381,

      557,  383,  381,  381,  381,  381,  384,  557,  557,  386,
      387,  557,  557,  557,  557,  557,  557,  557,  557,  394,
      557,  557,  453,  557,  428,  385,  390,  393,  399,  391,
      413,  392,  397,  372,  372,  372,  372,  557,  398,  172,
      410,  402,  402,  402,  402,  341,  403,  403,  403,  403,
      403,  403,  557,  557,  403,  403,  403,  403,  172,  557,
      404,  404,  404,  404,  405,  406,  406,  406,  406,  406,
      406,  557,  458,  406,  406,  406,  406,  134,  411,  263,
      263,  263,  263,  307,  134,  376,  407,  407,  407,  407,
      380,  408,  408,  408,  408,  408,  408,  409,  409,  409,

      409,  557,  557,  408,  408,  408,  408,  557,  557,  557,
      557,  557,  557,  347,  412,  420,  302,  415,  418,  414,
      419,  172,  557,  298,  298,  298,  298,  341,  427,  427,
      427,  427,  421,  172,  435,  425,  425,  425,  425,  405,
      426,  426,  426,  426,  426,  426,  557,  557,  426,  426,
      426,  426,  134,  438,  429,  429,  429,  429,  380,  430,
      430,  430,  430,  430,  430,  557,  267,  430,  430,  430,
      430,  134,  557,  431,  431,  431,  431,  432,  433,  433,
      433,  433,  433,  433,  557,  557,  433,  433,  433,  433,
      434,  557,  439,  557,  557,  557,  436,  437,  557,  219,

      445,  445,  445,  445,  441,  557,  557,  455,  440,  172,
      454,  444,  444,  444,  444,  405,  445,  445,  445,  445,
      445,  445,  172,  557,  446,  446,  446,  446,  447,  448,
      448,  448,  448,  448,  448,  557,  557,  448,  448,  448,
      448,  134,  473,  263,  263,  263,  263,  380,  134,  507,
      449,  449,  449,  449,  432,  450,  450,  450,  450,  450,
      450,  451,  451,  451,  451,  557,  557,  450,  450,  450,
      450,  456,  557,  172,  557,  298,  298,  298,  298,  405,
      464,  464,  464,  464,  557,  180,  463,  463,  463,  463,
      557,  472,  457,  172,  474,  462,  462,  462,  462,  447,

      463,  463,  463,  463,  463,  463,  134,  557,  466,  466,
      466,  466,  432,  467,  467,  467,  467,  467,  467,  557,
      133,  467,  467,  467,  467,  134,  475,  468,  468,  468,
      468,  469,  470,  470,  470,  470,  470,  470,  557,  557,
      470,  470,  470,  470,  476,  172,  557,  480,  480,  480,
      480,  447,  481,  481,  481,  481,  481,  481,  557,   97,
      481,  481,  481,  481,  172,  490,  482,  482,  482,  482,
      483,  484,  484,  484,  484,  484,  484,  557,   95,  484,
      484,  484,  484,  134,  554,  263,  263,  263,  263,  432,
      134,  554,  485,  485,  485,  485,  469,  486,  486,  486,

      486,  486,  486,  487,  487,  487,  487,  557,  557,  486,
      486,  486,  486,  489,  557,  557,  557,  557,  554,  491,
      549,  506,  519,  172,  492,  298,  298,  298,  298,  447,
      172,  554,  497,  497,  497,  497,  483,  498,  498,  498,
      498,  498,  498,  499,  499,  499,  499,  557,  549,  498,
      498,  498,  498,  134,  549,  501,  501,  501,  501,  469,
      502,  502,  502,  502,  502,  502,  557,  544,  502,  502,
      502,  502,  134,  549,  503,  503,  503,  503,  504,  505,
      505,  505,  505,  505,  505,  557,  544,  505,  505,  505,
      505,  172,  544,  512,  512,  512,  512,  483,  513,  513,

      513,  513,  513,  513,  557,  539,  513,  513,  513,  513,
      172,  544,  514,  514,  514,  514,  539,  515,  515,  515,
      515,  515,  515,  557,  539,  515,  515,  515,  515,  134,
      530,  263,  263,  263,  263,  469,  134,  539,  516,  516,
      516,  516,  504,  517,  517,  517,  517,  517,  517,  557,
      530,  517,  517,  517,  517,  172,  530,  298,  298,  298,
      298,  483,  172,  511,  523,  523,  523,  523,  504,  524,
      524,  524,  524,  524,  524,  557,  530,  524,  524,  524,
      524,  134,  511,  525,  525,  525,  525,  504,  526,  526,
      526,  526,  526,  526,  557,  495,  526,  526,  526,  526,

      172,  557,  531,  531,  531,  531,  483,  532,  532,  532,
      532,  532,  532,  557,  511,  532,  532,  532,  532,  134,
      495,  263,  263,  263,  263,  504,  172,  557,  298,  298,
      298,  298,   37,   37,   37,   37,   37,   39,   39,   39,
       39,   39,   43,   43,   43,   43,   43,   45,  469,   45,
       45,   45,   46,   46,   46,   46,   46,   56,   56,   56,
       90,  511,   90,   90,   90,   93,   93,  130,  130,  170,
      170,  171,  171,  212,  212,  213,  213,  254,  254,  255,
      255,  294,  294,  295,  295,  335,  335,  336,  336,  369,
      369,  370,  370,  400,  400,  401,  401,  422,  422,  423,

      423,  442,  442,  443,  443,  459,  459,  460,  460,  477,
      477,  478,  478,  493,  493,  494,  494,  508,  508,  510,
      510,  520,  520,  521,  521,  528,  528,  529,  529,  534,
      534,  537,  537,  538,  538,  540,  540,  542,  542,  543,
      543,  545,  545,  547,  547,  548,  548,  550,  550,  552,
      552,  553,  553,  555,  555,  556,  556,  509,  495,  461,
      557,  557,  447,  495,  461,  557,  557,  432,  479,  461,
      424,  405,  461,  424,  557,  557,  380,   94,  424,  371,
      557,  341,  424,  371,  557,  557,  557,  557,  557,  557,
      417,  416,  557,  307,   94,  371,  296,  557,  557,  389,

      388,  557,  260,  371,  296,  557,  557,  356,  355,  557,
      557,  557,  224,   94,  296,  214,  557,  320,  319,  174,
      296,  214,  557,  279,  278,  557,  136,   94,  214,  131,
      557,  557,  557,  557,  214,  131,  557,  557,  557,  194,
      557,  182,   94,  131,  557,  139,  131,  557,  557,  557,
      104,  557,   99,  557,   94,   46,   47,   44,   89,  557,
       60,   55,  557,   47,   44,  557,   38,   38,    7,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,

      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557
    } ;

static yyconst flex_int16_t yy_chk[1913] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   22,   22,
       23,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   25,   16,   33,   23,   30,   30,   25,
       34,   34,   30,   36,   40,   40,   28,   25,   36,   33,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   28,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   27,   29,   31,
       35,   41,   41,   61,   26,   62,   27,   31,   31,   74,
       26,   66,   27,   29,   74,   35,   29,   27,   62,   31,
       32,   32,   61,   32,   32,   42,   42,   52,   52,   52,
       52,   66,   32,   55,   55,   55,   55,   65,   65,   77,
       77,   32,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   67,   50,   57,   57,   57,   57,   67,
       57,   57,   57,   57,   57,   57,   60,   60,   64,   68,
       69,   71,   64,   72,   75,   60,   68,   73,   82,   78,
       79,   79,   84,   87,   76,   82,   83,   71,   85,   69,

       75,  635,   73,   72,   76,   78,   76,   85,   86,   83,
       88,   87,  102,   84,   92,   92,   92,   92,  631,  102,
       86,   94,   94,   94,   94,  100,  103,  103,  227,   88,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,  227,   91,   96,  100,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   97,  104,   97,   97,
       97,   97,   98,   98,   98,   98,  105,   98,   98,   98,
       98,   98,   98,  101,  106,  109,  104,  106,  101,  107,
      105,  108,  109,  111,  107,  112,  108,  110,  110,  113,
      111,  114,  118,  115,  112,  110,  120,  114,  116,  117,

      117,  113,  115,  116,  119,  121,  126,  122,  121,  123,
      118,  119,  122,  125,  123,  124,  120,  126,  124,  627,
      141,  148,  125,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  141,  128,  129,  129,  129,  129,
      132,  148,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  133,  623,  133,  133,  133,  133,  134,
      134,  134,  134,  135,  619,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  136,  136,  136,  136,
      137,  140,  137,  137,  137,  137,  138,  138,  138,  138,
      142,  138,  138,  138,  138,  138,  138,  143,  144,  146,

      140,  147,  149,  144,  146,  152,  143,  151,  153,  142,
      157,  151,  155,  157,  149,  149,  149,  155,  156,  147,
      158,  618,  156,  153,  152,  159,  151,  160,  161,  162,
      159,  160,  163,  161,  165,  165,  166,  167,  185,  163,
      166,  162,  192,  185,  167,  158,  160,  168,  168,  168,
      168,  168,  172,  172,  172,  172,  173,  192,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  174,
      174,  174,  174,  175,  189,  175,  175,  175,  175,  176,
      189,  176,  176,  176,  176,  177,  231,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  178,  231,

      178,  178,  178,  178,  179,  182,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  180,  184,  180,
      180,  180,  180,  183,  188,  182,  186,  190,  191,  194,
      183,  188,  195,  191,  193,  193,  190,  196,  184,  198,
      186,  197,  196,  199,  194,  200,  197,  195,  201,  204,
      205,  206,  200,  198,  208,  205,  207,  207,  209,  210,
      226,  199,  290,  206,  204,  211,  210,  226,  201,  211,
      215,  228,  215,  215,  215,  215,  290,  209,  228,  234,
      208,  216,  233,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  217,  233,  217,  217,  217,  217,

      218,  234,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  219,  616,  219,  219,  219,  219,  220,
      220,  220,  220,  221,  245,  221,  221,  221,  221,  221,
      223,  245,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  224,  224,  224,  224,  225,  229,  225,
      225,  225,  225,  232,  232,  235,  236,  239,  240,  235,
      241,  244,  243,  249,  244,  247,  229,  243,  246,  236,
      239,  250,  248,  251,  613,  252,  240,  248,  241,  253,
      268,  246,  249,  247,  269,  269,  250,  252,  253,  256,
      256,  256,  256,  251,  257,  268,  257,  257,  257,  257,

      257,  259,  612,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  260,  260,  260,  260,  261,  316,
      261,  261,  261,  261,  262,  609,  262,  262,  262,  262,
      263,  316,  263,  263,  263,  263,  264,  270,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  265,
      270,  265,  265,  265,  265,  266,  271,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  267,  281,
      267,  267,  267,  267,  272,  272,  273,  274,  271,  273,
      275,  276,  274,  277,  282,  275,  276,  284,  277,  280,
      280,  281,  285,  283,  287,  285,  288,  283,  286,  286,

      289,  292,  284,  293,  309,  606,  282,  283,  321,  297,
      292,  297,  297,  297,  297,  288,  287,  321,  309,  289,
      298,  293,  298,  298,  298,  298,  299,  326,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  300,
      326,  300,  300,  300,  300,  301,  362,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  302,  362,
      302,  302,  302,  302,  303,  303,  303,  303,  304,  310,
      304,  304,  304,  304,  304,  306,  605,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  307,  307,
      307,  307,  308,  310,  308,  308,  308,  308,  311,  311,

      312,  313,  314,  322,  323,  312,  324,  314,  322,  323,
      327,  325,  328,  324,  325,  329,  330,  602,  332,  348,
      329,  328,  327,  332,  333,  313,  337,  337,  337,  337,
      333,  348,  599,  363,  338,  330,  338,  338,  338,  338,
      338,  340,  363,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  341,  341,  341,  341,  342,  596,
      342,  342,  342,  342,  343,  343,  343,  343,  344,  453,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  345,  350,  345,  345,  345,  345,  346,  453,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,

      347,  349,  347,  347,  347,  347,  350,  351,  349,  352,
      353,  358,  357,  359,  361,  360,  352,  353,  364,  361,
      365,  434,  434,  368,  593,  351,  357,  360,  368,  358,
      384,  359,  364,  372,  372,  372,  372,  384,  365,  373,
      590,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  374,  382,  374,  374,  374,  374,  375,  441,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  376,  441,  376,  376,  376,  376,  377,  382,  377,
      377,  377,  377,  377,  379,  587,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  380,  380,  380,

      380,  381,  383,  381,  381,  381,  381,  386,  387,  393,
      396,  395,  399,  584,  383,  396,  581,  387,  393,  386,
      395,  402,  413,  402,  402,  402,  402,  402,  405,  405,
      405,  405,  399,  404,  413,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  406,  418,  406,  406,
      406,  406,  407,  418,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  408,  578,  408,  408,  408,
      408,  409,  419,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  410,  412,  410,  410,  410,  410,
      412,  414,  419,  415,  420,  421,  414,  415,  426,  575,

      426,  426,  426,  426,  421,  435,  436,  436,  420,  425,
      435,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  427,  455,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  428,  492,  428,  428,  428,
      428,  429,  455,  429,  429,  429,  429,  429,  431,  492,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  432,  432,  432,  432,  433,  438,  433,  433,  433,
      433,  438,  440,  444,  456,  444,  444,  444,  444,  444,
      447,  447,  447,  447,  448,  572,  448,  448,  448,  448,
      454,  454,  440,  446,  456,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  449,  457,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  450,
      569,  450,  450,  450,  450,  451,  457,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  452,  458,
      452,  452,  452,  452,  458,  462,  472,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  463,  567,
      463,  463,  463,  463,  464,  472,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  465,  566,  465,
      465,  465,  465,  466,  556,  466,  466,  466,  466,  466,
      468,  555,  468,  468,  468,  468,  468,  468,  468,  468,

      468,  468,  468,  469,  469,  469,  469,  470,  471,  470,
      470,  470,  470,  471,  473,  474,  490,  507,  553,  473,
      552,  490,  507,  480,  474,  480,  480,  480,  480,  480,
      482,  551,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  483,  483,  483,  483,  484,  550,  484,
      484,  484,  484,  485,  548,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  486,  547,  486,  486,
      486,  486,  487,  546,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  488,  545,  488,  488,  488,
      488,  497,  543,  497,  497,  497,  497,  497,  497,  497,

      497,  497,  497,  497,  498,  542,  498,  498,  498,  498,
      499,  541,  499,  499,  499,  499,  540,  499,  499,  499,
      499,  499,  499,  500,  538,  500,  500,  500,  500,  501,
      537,  501,  501,  501,  501,  501,  503,  535,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  505,
      534,  505,  505,  505,  505,  512,  529,  512,  512,  512,
      512,  512,  514,  528,  514,  514,  514,  514,  526,  514,
      514,  514,  514,  514,  514,  515,  522,  515,  515,  515,
      515,  516,  521,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  517,  520,  517,  517,  517,  517,

      523,  519,  523,  523,  523,  523,  513,  523,  523,  523,
      523,  523,  523,  524,  510,  524,  524,  524,  524,  525,
      508,  525,  525,  525,  525,  525,  531,  506,  531,  531,
      531,  531,  558,  558,  558,  558,  558,  559,  559,  559,
      559,  559,  560,  560,  560,  560,  560,  561,  502,  561,
      561,  561,  562,  562,  562,  562,  562,  563,  563,  563,
      564,  496,  564,  564,  564,  565,  565,  568,  568,  570,
      570,  571,  571,  573,  573,  574,  574,  576,  576,  577,
      577,  579,  579,  580,  580,  582,  582,  583,  583,  585,
      585,  586,  586,  588,  588,  589,  589,  591,  591,  592,

      592,  594,  594,  595,  595,  597,  597,  598,  598,  600,
      600,  601,  601,  603,  603,  604,  604,  607,  607,  608,
      608,  610,  610,  611,  611,  614,  614,  615,  615,  617,
      617,  620,  620,  621,  621,  622,  622,  624,  624,  625,
      625,  626,  626,  628,  628,  629,  629,  630,  630,  632,
      632,  633,  633,  634,  634,  636,  636,  495,  494,  493,
      491,  489,  481,  478,  477,  476,  475,  467,  461,  460,
      459,  445,  443,  442,  439,  437,  430,  424,  423,  422,
      411,  403,  401,  400,  398,  397,  394,  392,  391,  390,
      389,  388,  385,  378,  371,  370,  369,  367,  366,  356,

      355,  354,  339,  336,  335,  334,  331,  320,  319,  318,
      317,  315,  305,  296,  295,  294,  291,  279,  278,  258,
      255,  254,  242,  238,  237,  230,  222,  214,  213,  212,
      203,  202,  187,  181,  171,  170,  169,  164,  154,  150,
      145,  139,  131,  130,  127,   99,   93,   81,   80,   70,
       63,   59,   58,   56,   51,   47,   46,   43,   38,   24,
       21,   18,   17,   14,   12,    7,    4,    3,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,

      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[63] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1061 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1166 "SrvLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 558 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1869 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 107 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 108 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 49:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 181 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 188 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 209 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 241 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 251 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 260 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 263 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1704 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 558 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 558 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 557);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 263 "SrvLexer.l"




