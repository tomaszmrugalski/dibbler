#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 122
#define YY_END_OF_BUFFER 123
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1012] =
    {   0,
        1,    1,    0,    0,    0,    0,  123,  121,    2,    1,
        1,  121,  103,  121,  121,  120,  120,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      107,  107,  122,    1,    1,    1,    0,  115,  103,    0,
      115,  105,  104,  120,    0,    0,  119,    0,  112,   86,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      100,  116,  116,   88,  116,  116,  116,  116,  116,  116,

      116,  116,  116,  116,  116,   17,   18,  116,  116,  116,
      116,  116,  116,  116,  116,  106,  104,  120,    0,    0,
        0,  111,  117,  110,  110,  116,  116,  116,  116,  116,
       87,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,   99,  120,    0,    0,    0,    0,  109,  109,    0,
      110,    0,  110,  116,  116,  116,   66,  116,  116,  116,

      116,  116,  116,  116,  116,   94,  116,  116,  116,   31,
      116,  116,   46,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,    0,  116,  116,  116,  116,  116,
      116,   24,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  101,  116,  116,  116,
      116,  120,    0,  118,    0,    0,    0,  109,    0,  109,
        0,  110,  110,  110,  110,  116,  116,  116,  116,   93,
      116,  116,  116,    4,  116,  116,  116,  116,  116,  116,
      116,  102,  116,  116,    3,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,    0,  116,  116,

      116,  116,  116,  116,  116,  116,  116,  116,  116,    7,
      116,   45,  116,   25,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,    0,    0,    0,    0,    0,
      109,  109,  109,  109,    0,  110,  110,  110,    0,  110,
      116,  116,  116,  116,  116,  116,  116,  116,  116,   30,
      116,  116,  116,  116,  116,   39,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,    0,    0,  116,  116,  116,   37,  116,  116,
      116,  116,   35,  116,  116,  116,   62,  116,  116,  116,
       97,  116,  116,  116,  116,  116,  116,  116,    0,    0,

        0,    0,  109,  109,  109,    0,  109,    0,    0,  110,
      110,  110,  110,  116,  116,   34,  116,  116,  116,  116,
      116,  116,    0,  116,  116,   96,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,    0,    0,  116,  116,
      116,  116,  116,   60,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,   22,  116,  116,  116,  118,
        0,    0,    0,    0,    0,  109,  109,  109,  109,    0,
      110,  110,  110,    0,  110,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,    0,  116,  116,  116,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,   47,  116,   56,  116,  116,  116,   12,   10,   85,
      116,   44,    0,    0,  116,  116,  116,   58,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,    5,
      116,  116,  116,   14,    0,    0,    0,    0,  109,  109,
      109,    0,  109,  114,  110,  110,  110,  110,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,    0,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,   11,   65,    0,
        0,  116,  116,  116,   59,  116,  116,  116,  116,  116,

       32,  116,  116,    6,   95,   41,  116,  116,    0,    0,
        0,    0,  113,  109,  109,  109,  109,  110,  110,  110,
        0,  110,  116,  116,  116,  116,  116,  116,  116,  116,
      116,   57,  116,    0,  116,  116,  116,  116,  116,  116,
      116,  116,   38,  116,  116,   36,  116,  116,  116,   33,
       13,    0,    0,   53,   52,   40,  116,   23,  116,  116,
      116,   43,   42,  116,  116,  118,    0,    0,  109,  109,
      109,    0,  109,  110,  110,  110,  110,  116,   15,  116,
       64,  116,  116,  116,   73,  116,  116,    0,  116,  116,
      116,  116,  116,  116,   76,  116,  116,  116,  116,  116,

      116,   55,   54,  116,  116,  116,  116,  116,   61,    0,
        0,    0,    0,  109,  109,  109,  109,  110,  110,  110,
        0,  110,  116,  116,   98,   75,  116,  116,  116,    0,
       84,  116,  116,  116,   51,  116,   77,   63,  116,  116,
      116,    8,  116,  116,   26,  116,  116,    0,    0,    0,
      109,  109,  109,    0,  109,  110,  110,  110,  110,  116,
      116,   74,  116,  116,    0,  116,  116,   50,  116,  116,
      116,  116,   67,  116,  116,  116,  116,  116,  118,    0,
        0,    0,  109,  109,  109,  109,  110,  110,  110,    0,
      110,  116,  116,  116,  116,    0,  116,  116,  116,  116,

      116,  116,  116,  116,  116,   16,   21,    0,    0,  108,
      111,  109,  109,  109,    0,  109,  110,  110,  110,  110,
      116,  116,  116,   28,    0,    0,  116,  116,  116,   78,
      116,  116,   27,  116,  116,  116,    0,    0,  108,    0,
      109,  109,  109,  109,  109,  110,  110,  110,    0,  110,
      116,  116,  116,    0,    0,   29,  116,  116,   79,  116,
      116,  116,  116,  116,  116,  116,  118,  108,  111,  109,
        0,  109,  109,  109,  109,  110,  110,  110,   68,  116,
      116,  116,  116,    0,    0,  116,  116,  116,  116,  116,
      116,   49,  116,   20,  116,    0,  108,  109,  109,  109,

      109,  110,  110,  110,  116,  116,  116,  116,  116,    0,
        0,  116,  116,   80,   81,   82,   83,    9,   19,    0,
      109,  109,    0,  109,  109,  110,   48,  116,  116,  116,
      116,    0,    0,  116,  116,  118,  109,  109,  110,  116,
      116,  116,  116,    0,    0,    0,  116,  116,  116,    0,
      109,  109,    0,  116,  116,  116,  116,    0,    0,    0,
       89,  116,  116,  116,   89,  108,  109,  109,   69,  116,
      116,  116,    0,   91,    0,  116,   91,  116,  108,  109,
      109,    0,  116,  116,   72,    0,   90,  116,   90,    0,
      109,  109,  116,   70,   92,   92,    0,  109,  109,    0,

       71,  118,  109,  109,    0,  109,  109,    0,  109,  109,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1102] =
    {   0,
        0,    0, 1167, 1149,    0,    0, 1146, 5824, 5824,   73,
       75, 1138,    0, 1128,   72,   72,   34, 1112, 1110,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  356,  372,  399,   67,  357,  180,  209,
     5824, 1120, 5824,  111,  137,  222, 1125, 5824,    0, 1122,
     1121, 5824,    0,  457, 1072,  476, 5824,    0,  502, 5824,
       61,  545,   86,   89,  185,  208,  231,  279,  221,  265,
      288,  559,  342,  283,  285,  388,  377,  389,  339,  395,
      326,  410,  394,  544,  561,  469,  557,  392,  574,  507,
      326,  542,  576,  455,  538,  584,  582,  594,  606,  579,

      593,  611,  612,  629,  618,  596,  613,  614,  636,  627,
      642,  643,  648,  649,  647, 5824,    0,  707, 1071,  726,
     1070,  752,    0,  797,  771,  840,  647,  689,  829,  833,
      693,  832,  838,  717,  836,  856,  842,  837,  839,  873,
      739,  890,  888,  891,  874,  757,  878,  895,  905,  892,
      909,  910,  922,  915,  925,  937,  927,  964,  942,  940,
      965,  955,  958,  957,  975,  944,  967,  977,  974,  992,
     1012,  980, 1007,  996, 1016, 1013, 1025, 1026, 1029, 1027,
     1014,  885, 1087,  815, 1069, 1068, 1066, 1134, 1106,  824,
     1179, 1222, 1153, 1265, 1016, 1200, 1019, 1225, 1066, 1121,

     1259, 1254, 1139, 1264, 1255, 1028, 1258, 1262, 1277, 1175,
     1266, 1283, 1295, 1296, 1313, 1183, 1305, 1302, 1301, 1338,
     1350, 1346, 1347, 1340, 1075, 1353, 1337, 1354, 1365, 1345,
     1381, 1318, 1399, 1395, 1388, 1385, 1393, 1400, 1402, 1406,
     1422, 1424, 1436, 1438, 1439, 1386, 1417, 1447, 1452, 1451,
     1467, 1242, 1053, 1021,  961,  956, 1510, 1527, 1570, 1546,
     1589, 1615, 1634, 1660, 1679,  954, 1549, 1449, 1442, 1469,
     1672, 1674, 1488, 1506, 1658, 1659, 1680, 1661, 1692, 1703,
     1693, 1531, 1695, 1602, 1711, 1694, 1709, 1714, 1724, 1726,
     1716, 1731, 1733, 1748, 1747, 1613, 1745, 1751, 1761, 1746,

     1767, 1769, 1764, 1783, 1784, 1766, 1765, 1813, 1786, 1780,
     1798, 1796, 1800, 1797, 1807, 1819, 1814, 1830, 1818, 1837,
     1846, 1834, 1854, 1838, 1853,  911,  908,  906,  901, 1914,
     1925, 1944, 1970, 1989, 1953, 2015,  866, 2027, 2070, 2046,
     1912, 1867, 1850, 2048, 1969, 2065, 2072, 2059, 2068, 2142,
     2069, 2064, 2101, 2097, 2070, 1849, 2117, 2128, 2122, 2124,
     2112, 2119, 2146, 2133, 2136, 2141, 2160, 2164, 2157, 2165,
     2169, 2174, 1955, 2082, 2178, 2180, 2184, 2129, 2199, 2202,
     2201, 2224, 2185, 2230, 2205, 2216, 2193, 2217, 2229, 2236,
     2213, 2244, 2251, 2254, 2241, 2268, 2271, 2265,  853,  852,

      824, 2329, 2340,  778, 2352, 2395, 2371, 2414, 2440, 2451,
     2470, 2496, 2515, 2269, 2264, 2373, 2493, 2498, 2495, 2516,
     2511, 2528, 2256, 2535, 2512, 2282, 2532, 2382, 2564, 2514,
     2545, 2556, 2550, 2566, 2563, 2581, 2578, 2584, 2587, 2580,
     2609, 2612, 2614, 2616, 2602, 2608, 2339, 2396, 2617, 2620,
     2630, 2639, 2633, 2430, 2661, 2652, 2651, 2666, 2653, 2669,
     2672, 2683, 2689, 2686, 2697, 2438, 2688, 2693, 2703,  777,
      776,  775,  774, 2761, 2772, 2783, 2802, 2828, 2847, 2811,
     2873,  773, 2885, 2928, 2904, 2701, 2914, 2922, 2827, 2925,
     2694, 2943, 2919, 2920, 2921, 2928, 2465, 2958, 2950, 2971,

     2960, 2977, 2970, 2972, 2973, 2979, 2974, 2980, 2982, 3007,
     2864, 2579, 3011, 2696, 3014, 3012, 3022, 2725, 2770, 2815,
     3017, 3001, 3022, 3015, 3030, 3045, 3047, 3023, 3059, 3053,
     3050, 3051, 3062, 3061, 3081, 3075, 3082, 3067, 3083, 3068,
     3086, 3099, 3102, 3074,  771,  753,  733, 3144, 3160,  732,
     3172, 3215, 3191, 3200, 3260, 3234, 3305, 3279, 3213, 3293,
     3301, 3202, 3304, 3303, 3296, 3305, 3323, 3324, 3332, 3105,
     3346, 3335, 3343, 3345, 3347, 3348, 3344, 3360, 3356, 3376,
     3385, 3384, 3389, 3388, 3391, 3387, 3383, 3247, 3377, 3402,
     3408, 3400, 3398, 3399, 3397, 3429, 3428, 3439, 3435, 3442,

     3408, 3440, 3444, 3431, 3432, 3436, 3463, 3464,  731,  730,
      729,  728, 3288, 3524, 3508, 3569, 3543, 3588,  692, 3614,
     3657, 3633, 3445, 3643, 3651, 3648, 3652, 3635, 3671, 3653,
     3658, 3450, 3690, 3477, 3688, 3522, 3692, 3700, 3503, 3705,
     3699, 3703, 3511, 3715, 3722, 3556, 3719, 3704, 3706, 3567,
     3711, 3730, 3730, 3733, 3734, 3735, 3750, 3739, 3751, 3752,
     3762, 3743, 3744, 3755, 3774,  688,  687,  686, 3820,  685,
     3834, 3877, 3853, 3922, 3896, 3967, 3941, 3773, 3758, 3959,
     3813, 3856, 3961, 3909, 3838, 3920, 3971, 3962, 3960, 3966,
     3968, 3969, 3965, 4001, 3970, 4000, 4007, 4016, 4018, 4020,

     4021, 5824, 5824, 4023, 4017, 4010, 4013, 4050, 4011,  683,
      681,  680,  673, 4110, 4084, 4155, 4096, 4129,  672, 4200,
     4243, 4174, 4052, 4203, 4014, 4015, 4237, 4238, 4255, 4092,
     4097, 4246, 4236, 4241, 4108, 4242, 4142, 4153, 4274, 4265,
     4285, 4273, 4286, 4290, 4160, 4277, 4287,  603,  571,  570,
     4220,  562, 4350, 4393, 4369, 4438, 4412, 4483, 4457, 4278,
     4289, 4280, 4472, 4473,  570, 4391, 4470, 4284, 4479, 4487,
     4478, 4482, 4288, 4483, 4485, 4502, 4516, 4523,  557,  556,
      528,  525, 4583, 4602, 4628, 4647, 4673,  524, 4685, 4728,
     4704, 4536, 4515, 4517, 4706, 4725, 4717, 4742, 4380, 4627,

     4744, 4745, 4522, 4758, 4722, 4292, 4329,  523,  522,  521,
        0, 4816,  520, 4828, 4871, 4847, 4916, 4890, 4961, 4935,
     4730, 4929, 4615, 4372, 4434, 4523, 4963, 4858, 4731, 4525,
     4807, 4950, 4570, 4966, 4959, 4964,  519,  518,  516,  515,
      514, 5026, 5045, 5071, 5090, 5116,  513, 5128,    0, 5147,
     4953, 4958, 5148, 4708, 4741, 4850, 5070, 5131, 4869, 5155,
     5005, 5058, 4962, 5143, 5146, 5133,  512,  511, 5824,  483,
        0, 5213,  482, 5225, 5244, 5270, 5289,    0, 4961, 5149,
     5267, 5288, 5301, 4967, 5031, 5144, 5287, 5177, 5049, 5284,
     5299, 5145, 5274, 5152, 5298,  481,  480,  479,  478, 5361,

     5380, 5406,  465,    0, 5292, 5340, 5359, 5291, 5212, 5169,
        0, 5363, 5433, 5290, 5303, 5339, 5360, 5374, 5392,  446,
      445,  434,    0, 5450, 5824,    0, 5402, 5429, 5433, 5437,
     5430,    0, 5422, 5486, 5452,  433,  431,  430, 5824, 5458,
     5434, 5471, 5473, 5485, 5435, 5464, 5491, 5490, 5487,  428,
      424,  406,    0, 5477, 5488, 5504, 5481, 5505, 5493, 5490,
     5824, 5525, 5526, 5510, 5518,  395,  356,  355, 5520, 5528,
     5532, 5523, 5528, 5824, 5553, 5538, 5534, 5561,  353,  352,
      350,    0, 5550, 5540, 5542, 5576, 5824, 5577, 5562,  346,
      325,  307, 5572, 5571, 5824, 5573,    0,  305,  276,    0,

     5574,  267,  262,  260,  258,  254,  251,    0,  229,  214,
     5824, 5647, 5651, 5655, 5659, 5663, 5667, 5669,  232, 5671,
     5673, 5675, 5677, 5679, 5681, 5683, 5685, 5687, 5689, 5693,
     5695, 5697, 5699, 5701, 5703, 5705, 5707, 5709, 5711, 5713,
     5715, 5717, 5719, 5721, 5723, 5725, 5727, 5729, 5731, 5733,
     5735, 5737, 5739, 5741, 5743, 5745,  231, 5747, 5749, 5751,
      230, 5753, 5755, 5757,  228,  226, 5759, 5761, 5763,  224,
     5767, 5771, 5773, 5775,  219,  217, 5779, 5783, 5785, 5787,
     5789, 5791, 5793,  214, 5795, 5797, 5799, 5801, 5803,  145,
     5805, 5807, 5809,  131, 5811,  117, 5813, 5815, 5817,   80,

     5819
    } ;

static yyconst flex_int16_t yy_def[1102] =
    {   0,
     1011,    1, 1012, 1012, 1013, 1013, 1011, 1011, 1011, 1011,
     1011, 1014, 1015, 1016, 1011, 1011,   16, 1011, 1011, 1011,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1011, 1011, 1011, 1011, 1011, 1011, 1014, 1011, 1015, 1016,
     1011, 1011, 1017, 1011, 1018,   54, 1011, 1019, 1011, 1011,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1011, 1017, 1011, 1020,  118,
     1021, 1011, 1019, 1011,  124,   62,  126,  126,   26,   26,
       26,   26,   26,  126,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1011,  183, 1022, 1023, 1024, 1011,  188, 1011,
     1011, 1011,  191,  126,  194,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1011,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  184,  184, 1023, 1025, 1026, 1011, 1011, 1011,  258,
     1011, 1011,  262, 1011,  264,  194,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1011,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1027, 1011, 1028, 1029, 1011,
     1011,  331, 1011,  333, 1011, 1011, 1011, 1011, 1011,  338,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1030,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1011, 1011,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1031, 1032,

     1033, 1011, 1011, 1011, 1011, 1011,  405, 1011, 1011, 1011,
      410, 1011,  412,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1011,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1011, 1011,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1028,
     1011, 1034, 1035, 1011, 1011, 1011,  476, 1011,  478, 1011,
     1011, 1011, 1011, 1011,  483,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1011,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1011, 1011,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1036, 1037, 1038, 1011, 1011, 1011,
     1011, 1011,  551, 1011, 1011,  555, 1011,  557,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1011,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1011,
     1011,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26, 1039, 1011,
     1040, 1041, 1011, 1011,  614, 1011,  616, 1011, 1011, 1011,
     1011,  620,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1011,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1011, 1011,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1042, 1043, 1044, 1011, 1011,
     1011, 1011,  671, 1011,  674, 1011,  676,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1011,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26, 1011, 1011,   26,   26,   26,   26,   26,   26, 1045,
     1011, 1046, 1047, 1011,  714, 1011,  716, 1011, 1011, 1011,
     1011,  720,   26,   26,   26,   26,   26,   26,   26, 1011,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1048, 1049, 1050,
     1011, 1011, 1011, 1011,  753, 1011,  756, 1011,  758,   26,
       26,   26,   26,   26, 1011,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1051, 1011,
     1052, 1053, 1011,  783, 1011,  785, 1011, 1011, 1011, 1011,
      789,   26,   26,   26,   26, 1011,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26, 1054, 1055, 1056,
     1057, 1011, 1011, 1011, 1011,  814, 1011,  817, 1011,  819,
       26,   26,   26,   26, 1011, 1011,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1058, 1011, 1059, 1011,
     1060, 1011,  842, 1011,  844, 1011, 1011, 1011, 1061,  848,
       26,   26,   26, 1011, 1011,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1062, 1063, 1011, 1064,
     1065, 1011, 1011, 1011,  874, 1011,  876, 1066,   26,   26,
       26,   26,   26, 1011, 1011,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1067, 1011, 1068, 1069, 1011,

      900, 1011, 1011, 1070,   26,   26,   26,   26,   26, 1011,
     1071,   26, 1072,   26,   26,   26,   26,   26,   26, 1073,
     1011, 1074, 1075, 1011, 1011, 1076,   26,   26,   26,   26,
       26, 1077, 1011, 1078,   26, 1079, 1080, 1081, 1011,   26,
       26,   26,   26, 1011, 1011, 1011,   26,   26,   26, 1082,
     1011, 1083, 1084,   26,   26,   26,   26, 1011, 1011, 1011,
     1011,   26,   26,   26,   26, 1085, 1086, 1087,   26,   26,
       26,   26, 1011, 1011, 1011,   26,   26,   26, 1088, 1011,
     1089, 1090,   26,   26,   26, 1011, 1011,   26,   26, 1091,
     1092, 1093,   26,   26, 1011,   26, 1094, 1011, 1095, 1096,

       26, 1011, 1097, 1098, 1091, 1011, 1099, 1100, 1101, 1011,
        0, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011
    } ;

static yyconst flex_int16_t yy_nxt[5900] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
     1011,   61,  845,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   84,   57,  111,   61,   61, 1011,   61,   61,   85,
       61,  127,   88,   44,   45,  128,   61,   80,   58, 1004,
       62,   56,   56,   56,   56,   56,   56,   84,   57,  111,
       61,   61,   61, 1002,   61,   85,   61,  127,   88,   46,
       45,  128,   61,   80,   58,   61,   61,  992,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   93,   62,   94,  968,  114,   61,  939,
       61,  938,   61,   61,   44,   45,  926,  129,  904,   70,
      899,   81,  878,  841,  123, 1008,  115,   62,   62,   93,
       62,   94,   61,  114,   61,   61,   61,   82,   61,   61,
     1008,   61,   61,  129,   86,   70,   71,   81,   62,   62,
       87,   62,  115,  132,   61,  130,   61,   72,   61,   61,
       73,   61, 1008,   82,   61, 1000,   61,   61,   61, 1011,
       86, 1008,   71, 1000,   62,   62,   87,   62, 1005,  132,
       61,  130,   61,   72,   89,   61,   73, 1000,   90,  133,

       61,   95,   61,   62,   91,  131,   74,   75,   61,   92,
       61,   76,   96,  134,   61,   97,   77,   78,   61,  138,
       89,  139,   61,   79,   90,  133,  982,   95, 1000,   62,
       91,  131,   74,   75,   61,   92,   61,   76,   96,  134,
       61,   97,   77,   78,   61,  138,  982,  139,   61,   79,
       61,   61,   61,   61,   61,   61,   61,   61,   61, 1011,
      145,   61,   61,   61,   61,   61,   61,  869,   61,   61,
      143,  982,   61,  953,  990,   61,  982,  953,  137,   98,
      112,   83,   61,   99,  113,   61,  145,   61,   61,   61,
       61,   61,   61,  100,   61,   61,  143,  101,   61,   61,

       61,   61,  102,  103,  137,   98,  112,   83,   61,   99,
      113,   61,  106,  107,  104,  105,  840,  140,  141,  100,
       61,  147,  108,  101,  142,   61,   61,  953,  102,  103,
      109,   61,   61,  144,  155,   61,  146,   61,   61,  110,
      104,  105,   61,  140,  141,  923,   61,  147,  108,  811,
      142,  953,  923,   61,  950,  923,  109,   61,   61,  144,
      155,   61,  146,   61,   61,  110,  871,  782,   61,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  119,   61,
      120,  120,  120,  120,  120,  120,  849,   57,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  152,   61,  923,

      871,  840,  122,  815,  871,  153,  120,  120,  120,  120,
      120,  120,   61,   57,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  152,   61,  125,  125,  125,  125,  125,
      125,  153,  840,  896,  790,  871,  869,  840,   61,  782,
      713,  754,  840,  782,  122,  721,  811,  161,  158,  782,
       61,  125,  125,  125,  125,  125,  125,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  119,  148,  126,  126,
      126,  126,  126,  126,  158,   66,   61,  713,  808,  796,
      159,   61,  135,  672,  149,   61,  154,   61,   61,  150,
      136,  782,  713,  148,  126,  126,  126,  126,  126,  126,

       61,   66,   61,  151,   61,  156,  159,   61,  135,  163,
      149,   61,  154,   61,   61,  150,  136,   61,  160,   61,
      157,  162,  168,  175,  612,   61,   61,   61,   61,  151,
       61,  156,  164,  169,  170,  163,   61,   61,  165,   61,
      166,  167,  174,   61,  160,   61,  157,  162,  168,   61,
      171,   61,  172,   61,   61,   61,   61,   61,  164,  169,
      170,   61,   61,   61,  165,   61,  166,  167,  174,  173,
      177,  176,   61,  178,  195,   61,  171,  179,  172,   61,
       61,   61,   61,   61,  180,   61,   61,   61,  182,  181,
       61,   61,   61,  621,  122,  173,  177,  176,   61,  178,

      195,  713,  612,  179,  122,   61,  552,  713,  612,  710,
      180,   61,   61,  484,  182,  181,   61,   61,   61,  183,
      183,  183,  183,  183,  183,  183,  183,  183,   55,  196,
      184,  184,  184,  184,  184,  184,   61,   57,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  201,  208,  122,
      612,  473,  473,  406,  612,  196,  184,  184,  184,  184,
      184,  184,   61,   57,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  201,  473,  189,  189,  189,  189,  189,
      189, 1011,   61,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  122,  213,  339,  122,  473,  329,  545,  259,

       61,  189,  189,  189,  189,  189,  189,  190,   61,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  192,  213,
      193,  193,  193,  193,  193,  193,   61,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  473,  193,  193,  193,  193,
      193,  193,  194,  194,  194,  194,  194,  194,  194,  194,
      194,   55,  199,  194,  194,  194,  194,  194,  194,  197,
      198,  200,   61,  329,  329,   61,   61,  202,  205,   61,
       61,   61,   61,  203,  204,   61,  206,  192,  199,  194,
      194,  194,  194,  194,  194,  197,  198,  200,   61,   61,

      207,   61,   61,  202,  205,   61,   61,   61,   61,  203,
      204,   61,  206,  209,  210,  212,   61,   61,  211,  214,
      215,   61,  122,  217,  221,   61,  207,  329,   61,  187,
      216,   61,  122,   61,   61,   61,  218,  219,   61,  209,
      210,  212,   61,   61,  211,  214,  215,   61,   61,  217,
      222,  227,   61,   61,   61,  220,  216,   61,   61,   61,
       61,   61,  218,  219,   61,   61,  223,  236,   61,  224,
       61,  228,  225,  226,   61, 1011,  222,  329,   61,   61,
       61,  220,  187,   61,   61,   61,  233,   61,  234,  232,
      229,   61,  223,  236,   61,  224,   61,  228,   61,  230,

       61,   61,  235,  231,  237,  239,   61,   61,   61,   61,
       61,   61,  233,   61,  234,  232,  229,   61,   61,  238,
       61,  241,  242,   61,   61,  230,   61,   61,  235,  231,
      237,  239,  240,   61,   61,   61,   61,  244,  243,   61,
      246,  245,  326,   61,   61,  238,   61,  251,  242,   61,
       61,  248,  247,  250,  267,   61,   61,   61,  240,   61,
      249,   61,   61,  244,  243,   61,  246,  245,   61,   61,
       61,   61,   61,  251, 1011,  271,   61,  248,  247,  250,
      267,   61,   61,   61,  298,   61,  249,  122,   61,  187,
      187,  187,  122,  122,   61,   61,   61,   61,   61,  252,

      252,  252,  252,  252,  252,  252,  252,  252,   55,   61,
      253,  253,  253,  253,  253,  253, 1011,   57,  260,  260,
      260,  260,  260,  260,  260,  260,  260,   50,   51,   48,
      272,  116,   60,   59,   51,   61,  253,  253,  253,  253,
      253,  253,   48,   57,  257, 1011,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  259,   42,  260,  260,  260,
      260,  260,  260, 1011,   61,  263,  263,  263,  263,  263,
      263,  263,  263,  263,   42,  275, 1011, 1011, 1011, 1011,
     1011, 1011,   61,  260,  260,  260,  260,  260,  260,  190,
       61,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      192,  275,  263,  263,  263,  263,  263,  263,   61,  268,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,   61, 1011,
     1011, 1011, 1011, 1011, 1011,  286,   61,  269,  263,  263,
      263,  263,  263,  263,  264,  264,  264,  264,  264,  264,
      264,  264,  264,   61,   61,  265,  265,  265,  265,  265,
      265,  286,   61,  269,  252,  252,  252,  252,  252,  252,
      252,  252,  252, 1011,  277, 1011, 1011, 1011,   61,   61,
      270,  265,  265,  265,  265,  265,  265,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  273,  276,  266,  266,
      266,  266,  266,  266,   61,  274,  270,   61,   61,  278,

     1011,   61,   61,  279,  283,   61,  281,   61,  280,   61,
      282, 1011,  273,  276,  266,  266,  266,  266,  266,  266,
       61,  274, 1011,   61,   61,  278,   61,   61,   61,  279,
     1011,   61,  281,   61,  280,   61,  282,  284,   61,   61,
      285,  287,  288,  289,   61,   61,   61,  290,   61,  297,
     1011, 1011,   61, 1011, 1011, 1011,   61, 1011, 1011, 1011,
     1011,   61, 1011,  284,   61,   61,  285,  287,  288,  289,
       61,   61,  304, 1011,   61,  291,  295,  296,  301,  299,
       61,   61,   61,   61,  292,  293,  294,   61,   61,   61,
       61,  302, 1011,   61,  300,  321,   61,   61,  304,  303,

     1011,  291,  295,  296,  301,  299,   61,   61,   61,   61,
      292,  293,  294,  309,   61,   61,   61,  302,  305,   61,
      300,  308,   61,   61,   61,  303,  306,  312,   61,   61,
      307,   61,  310,  314,   61,  311,   61, 1011,   61,  309,
      313, 1011,   61,   61,  305,   61, 1011,  308,  315,   61,
       61,  317,  306,  312,   61,   61,  307,   61,  310,  314,
       61,  311,   61,  316,   61,   61,  313,   61,   61,   61,
      322,   61,  318,  320,  315,   61,  325,  317,  323,   61,
      319,   61,   61,  343, 1011,   61,   61,  342,  324,  316,
       61,   61,   61,   61,   61,   61,  322,  348,  318,  320,

     1011, 1011, 1011, 1011,  323,   61,  319,   61,   61,  343,
       61,   61,   61,  342,  324,  349,   61, 1011,   61, 1011,
       61,   61,  330,  330,  330,  330,  330,  330,  330,  330,
      330,   61, 1011, 1011, 1011, 1011,   61,  257,   61,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  259,   61,
      332,  332,  332,  332,  332,  332, 1011,   61,  332,  332,
      332,  332,  332,  332,  332,  332,  332, 1011, 1011, 1011,
     1011, 1011, 1011, 1011,   61,   61,  332,  332,  332,  332,
      332,  332,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  341,   61,  334,  334,  334,  334,  334,  334,  335,

       61,  261,  261,  261,  261,  261,  261,  261,  261,  261,
     1011,  359, 1011, 1011, 1011, 1011, 1011,  341,   61,  334,
      334,  334,  334,  334,  334,  190, 1011,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  192,  371,  337,  337,
      337,  337,  337,  337, 1011,   61,  337,  337,  337,  337,
      337,  337,  337,  337,  337, 1011,   61, 1011, 1011, 1011,
     1011, 1011, 1011,  371,  337,  337,  337,  337,  337,  337,
      190,   61,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  339,   61,  340,  340,  340,  340,  340,  340, 1011,
      351,  340,  340,  340,  340,  340,  340,  340,  340,  340,

      350,   61,   61,  354,   61,  344,  345,  346,  347,  340,
      340,  340,  340,  340,  340,   61,  351,   61,  352,  355,
      360,  358,  353,   61,  357,  361,  350,   61,   61,  354,
       61,  344,  345,  346,  347,   61,   61,   61,   61,  356,
      362,   61,  363,   61,  352,  355,   61,  358,  353,   61,
      357,  361,   61,  366,   61,  364,  370,   61,  367,   61,
      365,   61,   61,   61,   61,  356,  362,   61,  363,   61,
      368,  369,   61,  376,   61,  372,   61,  373,   61,  366,
       61,  364, 1011,   61,  367,   61,  365,  379,   61,   61,
       61,   61,  374,   61,  377,   61,  368,  369,  375,  376,

       61,  372,   61,  373,   61,  378,  382,   61,   61,   61,
       61,  383,   61,  379,   61,   61,   61,   61,  374,  380,
      377,  381,  384,   61,  375,  386,   61,   61,  385,   61,
       61,  378,  382,   61,   61,   61,   61,  383,   61,   61,
       61,   61,  387,   61,  388,  380,  389,  381,  390,   61,
       61,  386,   61,   61,  385,   61,   61,   61,  392,  391,
      393,   61,   61,  396, 1011,   61,   61,   61,  387,   61,
      388, 1011,  389,   61,  390,  395,   61,   61,  397,  398,
       61,   61,   61,   61,  392,  391,  393,   61,   61,   61,
      415,  416,   61,   61,  394, 1011,   61,   61, 1011,   61,

     1011,  395, 1011,   61,  397,  398,   61,   61, 1011, 1011,
       61, 1011, 1011, 1011, 1011,   61,  415,  416,   61,   61,
      394,  414,   61,   61,  402, 1011,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  257,   61,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  259, 1011,  404,  404,
      404,  404,  404,  404, 1011,   61,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  404,  404,  404,  404,  404,  404,
      257,   61,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  406,  447,  407,  407,  407,  407,  407,  407, 1011,

      418,  407,  407,  407,  407,  407,  407,  407,  407,  407,
     1011, 1011,   61, 1011, 1011, 1011, 1011, 1011,  447,  407,
      407,  407,  407,  407,  407,  190,  418,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  192,  190,   61,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  339, 1011,
      411,  411,  411,  411,  411,  411, 1011, 1011,  411,  411,
      411,  411,  411,  411,  411,  411,  411, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011,  417,  411,  411,  411,  411,
      411,  411,  412,  412,  412,  412,  412,  412,  412,  412,
      412,   61,  419,  413,  413,  413,  413,  413,  413,  420,

      421,  417,   61,  422,  427,  426,  429,   61,   61,  448,
      430,   61,   61,   61, 1011,   61, 1011,   61,  419,  413,
      413,  413,  413,  413,  413,  420,  421, 1011,   61,  422,
      427,  426,  428,   61,   61,  448,  430,   61,   61,   61,
       61,   61,  423,  423,   61,  423,  423,  423,  423,  423,
      423,  424,  431,  423,  432,   61,  435,  433,  428,  434,
       61,  436,   61,  423,  423,   61,   61,   61,  438,  437,
       61,   61,   61,  439, 1011,  440,   61, 1011,  431,   61,
      432,   61,  435,  433,   61,  434,   61,  436,   61,   61,
      442,   61,  443,   61,  438,  437,  444,   61,   61,  439,

       61,  440,   61,   61,  441,   61,  445,   61,   61, 1011,
       61,  446,   61,  449,  458,   61,  442,   61,  443, 1011,
      450,   61,  444,   61,  451,  459,   61,   61,   61,   61,
      441,  453,  445,   61,   61,  454,   61,  446,   61,  449,
      452, 1011,   61,   61,   61,   61,  450,   61,   61,   61,
      451,  455,  460,   61,   61,  457,   61,  453, 1011,   61,
       61,  454,   61,  462,  456, 1011,  452,   61,   61,  461,
       61,   61,   61,   61,   61,  463, 1011,  455,  460,   61,
      468,  457,   61,  466,   61,   61,   61,   61, 1011,  462,
      456,  465,  464,   61,   61,  461,  469,   61,   61,   61,

      497,  463,  467,  486,  489,   61,  487,   61,   61,  466,
       61,   61,  488,   61,   61, 1011, 1011,  465,  464, 1011,
       61, 1011,  469,   61, 1011,   61,  497, 1011,  467,  486,
      489, 1011,  487,   61,   61, 1011, 1011,   61,  488, 1011,
       61,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      257,   61,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  259,  257, 1011,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  406,  523,  477,  477,  477,  477,  477,
      477, 1011,  490,  477,  477,  477,  477,  477,  477,  477,
      477,  477, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

      523,  477,  477,  477,  477,  477,  477,  478,  478,  478,
      478,  478,  478,  478,  478,  478,   61,  502,  479,  479,
      479,  479,  479,  479,  480,   61,  408,  408,  408,  408,
      408,  408,  408,  408,  408, 1011,  524, 1011, 1011, 1011,
     1011, 1011,   61,  502,  479,  479,  479,  479,  479,  479,
      190,   61,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  190,  524,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  339,   61,  482,  482,  482,  482,  482,  482,
     1011,   61,  482,  482,  482,  482,  482,  482,  482,  482,
      482, 1011,  570, 1011, 1011, 1011, 1011, 1011, 1011,   61,

      482,  482,  482,  482,  482,  482,  190,   61,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  484,  570,  485,
      485,  485,  485,  485,  485, 1011,  492,  485,  485,  485,
      485,  485,  485,  485,  485,  485,   61,  493,   61,  494,
      491,   61,  495, 1011, 1011,  485,  485,  485,  485,  485,
      485,  496,  492, 1011,   61,   61,  500,   61,  506,   61,
      498, 1011,   61,  493,   61,  494,  491,   61,  495,  501,
      499,   61,  507, 1011, 1011,   61, 1011,  496,   61,  500,
       61,   61,  500,   61,  506,   61,  498,  509,   61,  510,
      511, 1011,  508,   61,  503,  501,  499,   61,  507,   61,

      504,   61,  505,  513,   61,  500,   61,   61,  512,   61,
     1011,  514,  515,  509,   61,  510,  511,  516,  508,   61,
      503,   61,   61,   61,   61,   61,  504,   61,  505,  513,
       61, 1011,   61,   61,  512,   61,  517,  514,  515,  518,
      525,  519,  521,  516,  520,   61,  522,   61,   61,   61,
       61,   61,   61,   61, 1011,   61,   61,   61, 1011,   61,
       61, 1011,  517,   61,  526,  518,  525,  519,  521, 1011,
      520,   61,  522,   61,  527,  529,   61,   61,   61,  532,
      528,   61,   61,   61,  535,   61,   61,  530,  533,   61,
      526,  534,  536, 1011,   61,   61,   61,  531, 1011,   61,

      527,  529,   61,  564,   61,  532,  528, 1011,   61,   61,
      535, 1011,   61,  530,  533,   61,  537,  534,  536,  542,
       61,   61,   61,  531,  538,  539,   61,  540,  559,   61,
       61,   61,   61,  541,  543,   61,   61,   61,   61,   61,
       61,   61,  537,  544,   61,  542,   61, 1011, 1011, 1011,
      538,  539,   61,  540,  559,   61, 1011,   61,   61,  541,
      543, 1011,   61,   61, 1011,   61,   61, 1011,   61,  544,
       61,  548,   61,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  257, 1011,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  257,   61,  549,  549,  549,  549,  549,

      549,  549,  549,  549,  406, 1011,  550,  550,  550,  550,
      550,  550, 1011,   61,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  550,  550,  550,  550,  550,  550,  257,   61,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  552,
      562,  553,  553,  553,  553,  553,  553, 1011,   61,  553,
      553,  553,  553,  553,  553,  553,  553,  553, 1011, 1011,
       61, 1011, 1011,  584, 1011, 1011,  562,  553,  553,  553,
      553,  553,  553,  190,   61,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  339,  190,   61,  555,  555,  555,

      555,  555,  555,  555,  555,  555,  484,   61,  556,  556,
      556,  556,  556,  556, 1011, 1011,  556,  556,  556,  556,
      556,  556,  556,  556,  556, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011,   61,  556,  556,  556,  556,  556,  556,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  566,
      560,  558,  558,  558,  558,  558,  558,   61,  561,  563,
     1011,  567,   61,   61,   61,   61, 1011, 1011,   61,  568,
      565,   61, 1011,  572,  569,  566,  560,  558,  558,  558,
      558,  558,  558,   61,  561,  563,   61,  567,   61,   61,
       61,   61,  571,   61,   61,  568,  565,   61,  573,  572,

      569,   61,  574,   61,  575,  576,  579,  578,  582,  577,
      580, 1011,   61,   61,   61,   61,   61,   61,  571,   61,
       61,  581,   61,   61,  573,   61, 1011,   61,  574,   61,
      575,  576,  579,  578,  582,  577,  580,  586,  585,   61,
       61,   61,   61,   61,   61,  590,   61,  581,   61,   61,
       61,   61,  587,  583,   61,   61,  588,   61,  589,  591,
       61,  592,  596,  586,  585,   61,   61, 1011, 1011, 1011,
       61,  590,  593,   61,  594,  597,   61,  598,  587,  583,
       61,   61,  588,   61,  589,  591,   61,  592,   61,  595,
       61,   61,   61,   61,   61,  600,   61,  599,  593,   61,

      594,  597,   61,  598,   61,   61,  602,  601,  604,  603,
       61,   61,  605,  606,   61,  595,   61,   61,   61,   61,
       61,  600,   61,  599,   61,   61,   61,  607,   61,   61,
       61,   61,  602,  601,  604,  603,   61,   61,  605,  606,
      608,  634,   61,   61,   61,   61, 1011, 1011, 1011, 1011,
       61,   61,   61,  607, 1011,   61,  613,  613,  613,  613,
      613,  613,  613,  613,  613, 1011,  608,  634,   61, 1011,
      257,   61,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  406,  257, 1011,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  552, 1011,  615,  615,  615,  615,  615,

      615, 1011, 1011,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  615,  615,  615,  615,  615,  615,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  623,  626,  617,  617,
      617,  617,  617,  617, 1011,   61,  619,  619,  619,  619,
      619,  619,  619,  619,  619, 1011,   61, 1011, 1011, 1011,
     1011, 1011,  623,  626,  617,  617,  617,  617,  617,  617,
      190,   61,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  484,   61,  619,  619,  619,  619,  619,  619, 1011,
       61,  622,  622,  622,  622,  622,  622,  622,  622,  622,

      613,  613,  613,  613,  613,  613,  613,  613,  613,  619,
      619,  619,  619,  619,  619,  190,   61,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  621,  624,  622,  622,
      622,  622,  622,  622,  625,  627,   61,  628,  629,   61,
     1011,  633,  630, 1011,   61, 1011,   61,   61,   61, 1011,
      631,  632, 1011,  624,  622,  622,  622,  622,  622,  622,
      625,  627,   61,  628,  629,   61,   61,   61,  630,  635,
       61,  640,   61,   61,   61,   61,  631,  632,   61,  637,
      641,  636,  638,  642,  639, 1011,   61,   61,   61,   61,
       61,   61,   61,   61,  645,  635,  643,  640,  647,   61,

      649,   61, 1011,   61,   61,  637,  641,  636,  638,  642,
      639,  646,   61,   61,   61,   61,   61,   61,  644,   61,
       61,  650,  643,  648,  651,   61,   61,   61,   61,   61,
       61,   61,   61,  652,   61,  653,  654,  646,  655,  656,
       61,   61,   61,   61,  644,   61,   61,  650,  659,  648,
      651,   61,   61,   61,   61,  658,   61,   61,   61,  652,
       61,  653,  654,  657,  655,  656,   61,   61,   61,   61,
      660,   61,   61,  661,   61,   61,  662,   61,   61,   61,
     1011,  658,   61,   61,  663,   61,  678,   61,   61,  657,
      664,  665, 1011,   61, 1011, 1011,  660,   61,   61,  661,

       61,   61,  662,  688,   61,   61,   61,   61,   61,   61,
      663,   61,  678,   61,   61, 1011,  664,  665, 1011,   61,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  688,
     1011,  690,   61,   61,  257, 1011,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  552,  693,  670,  670,  670,
      670,  670,  670, 1011,   61,  673,  673,  673,  673,  673,
      673,  673,  673,  673, 1011,   61, 1011, 1011, 1011, 1011,
     1011, 1011,  693,  670,  670,  670,  670,  670,  670,  257,
       61,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      672,   61,  673,  673,  673,  673,  673,  673,  190,   61,

      409,  409,  409,  409,  409,  409,  409,  409,  409,  484,
       61, 1011, 1011, 1011, 1011, 1011, 1011, 1011,  673,  673,
      673,  673,  673,  673,  190,   61,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  621,   61,  675,  675,  675,
      675,  675,  675, 1011, 1011,  675,  675,  675,  675,  675,
      675,  675,  675,  675, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,  683,  675,  675,  675,  675,  675,  675,  676,
      676,  676,  676,  676,  676,  676,  676,  676,   61,  685,
      677,  677,  677,  677,  677,  677,   61,  680,  683,  681,
      679,   61, 1011,  682,   61,   61,   61,  686, 1011, 1011,

     1011,   61,  684, 1011,   61,  685,  677,  677,  677,  677,
      677,  677,   61,  680,   61,  681,  679,   61,  691,  682,
       61,   61,   61,  686,  687,  692,  695,   61,  684,  689,
      694,   61, 1011,   61,  696,   61, 1011,  701,  697, 1011,
       61,  700,   61,   61,  691,  698,   61,   61,   61,   61,
      687,  692,  695,  699,   61,  689,  694,   61,   61,   61,
      696,   61,   61,  701,  697,   61,  702,  700,   61,   61,
      703,  698,   61,   61,   61,   61,   61,   61,   61,  699,
       61,  704,   61,  706,   61,  705,   61,   61,   61,  707,
     1011,   61,  702,   61,   61,   61,  703,  708,   61,  709,

      723,   61,   61,   61,   61,   61, 1011,  704,   61,  706,
     1011,  705,   61,   61, 1011,  707,   61,   61, 1011,   61,
       61,   61, 1011,  708,   61,  709,  723,   61, 1011, 1011,
      257,   61,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  552,   61,   61,  257, 1011,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  672,   61,  715,  715,  715,
      715,  715,  715, 1011, 1011,  715,  715,  715,  715,  715,
      715,  715,  715,  715, 1011, 1011, 1011, 1011, 1011, 1011,
     1011,   61,   61,  715,  715,  715,  715,  715,  715,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  725,   61,

      717,  717,  717,  717,  717,  717, 1011,   61,  719,  719,
      719,  719,  719,  719,  719,  719,  719, 1011, 1011, 1011,
     1011, 1011, 1011, 1011,  725,   61,  717,  717,  717,  717,
      717,  717,  190, 1011,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  621,  727,  719,  719,  719,  719,  719,
      719, 1011,   61,  722,  722,  722,  722,  722,  722,  722,
      722,  722, 1011,  728, 1011, 1011, 1011, 1011, 1011, 1011,
      727,  719,  719,  719,  719,  719,  719,  190,   61,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  721,  728,
      722,  722,  722,  722,  722,  722,  724,  726,  729,  730,

      732,  731,   61,   61,   61,  733,  734,  735,   61,   61,
      736,   61,   61,   61,   61, 1011,  722,  722,  722,  722,
      722,  722,  724,  726,  729,  730,  732,  731,   61,   61,
       61,  733,  734,  735,   61,   61,  737,   61,   61,   61,
       61,  738,  739,   61,   61,  740,  741,  742,  744,  746,
       61,  743,  745,   61,   61, 1011,   61,   61,   61,   61,
       61,   61,  737,   61,   61, 1011,   61,  738,  739,   61,
       61,  740,  741,  742,  744,  746,   61,  743,  745,   61,
       61,  747,   61,   61,   61,   61,   61,   61, 1011,   61,
       61,  760,   61,   61, 1011,   61,  752,  752,  752,  752,

      752,  752,  752,  752,  752, 1011, 1011,  747,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  760, 1011,   61,
      257,   61,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  672,  765,  752,  752,  752,  752,  752,  752,  190,
       61,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      621,   61, 1011, 1011, 1011, 1011, 1011, 1011,  765,  752,
      752,  752,  752,  752,  752,  257,   61,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  754,   61,  755,  755,
      755,  755,  755,  755, 1011,   61,  757,  757,  757,  757,
      757,  757,  757,  757,  757, 1011,   61, 1011, 1011, 1011,

     1011, 1011, 1011,   61,  755,  755,  755,  755,  755,  755,
      190,   61,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  721,   61,  757,  757,  757,  757,  757,  757,   61,
      257, 1011,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  672, 1011, 1011, 1011, 1011,   61, 1011,  761,  757,
      757,  757,  757,  757,  757,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  762,  763,  759,  759,  759,  759,
      759,  759,   61,  766,  761,  768,  767,  769,  764,   61,
       61,   61,  774,  770,   61,   61, 1011, 1011,  772,   61,
      762,  763,  759,  759,  759,  759,  759,  759,   61,  766,

      771,  768,  767,  769,  764,   61,   61,   61,   61,  770,
       61,   61,  773,  775,  772,   61,   61,   61,  776,  777,
       61,  792,  778,   61,   61,  793,  771,   61,   61,   61,
       61,   61,   61,   61,   61,   61, 1011, 1011,  773,  775,
     1011, 1011,   61,   61,  776,  777,   61,  792,  778,   61,
     1011,  793, 1011,   61,   61,   61,   61,   61,   61,   61,
      257,   61,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  754,   61,  784,  784,  784,  784,  784,  784, 1011,
     1011,  784,  784,  784,  784,  784,  784,  784,  784,  784,
     1011, 1011, 1011, 1011, 1011, 1011, 1011,  830,   61,  784,

      784,  784,  784,  784,  784,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  797,   61,  786,  786,  786,  786,
      786,  786, 1011,   61,  788,  788,  788,  788,  788,  788,
      788,  788,  788, 1011,   61, 1011, 1011, 1011, 1011, 1011,
      797,   61,  786,  786,  786,  786,  786,  786,  190,   61,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  721,
       61,  788,  788,  788,  788,  788,  788, 1011,  854,  791,
      791,  791,  791,  791,  791,  791,  791,  791, 1011,  798,
     1011, 1011, 1011, 1011, 1011, 1011, 1011,  788,  788,  788,
      788,  788,  788,  190,  854,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  790,  799,  791,  791,  791,  791,
      791,  791,  794,   61,  795,   61,   61,  800,  801, 1011,
      803,   61,   61,  802,  822,   61,   61,  804,   61,  805,
       61,  799,  791,  791,  791,  791,  791,  791,  794,   61,
      795,   61,   61,  800,  801,   61,  803,   61,   61,  802,
      807,   61,   61,  804,   61,  805,   61,  806,   61,   61,
       61,  855,  834,  821,  823,   61,   61, 1011,   61, 1011,
     1011,   61, 1011, 1011, 1011, 1011,  807, 1011, 1011,   61,
     1011, 1011, 1011,  806,   61,   61,   61,  855,  834,  821,
      823,   61,   61,  257,   61,  812,  812,  812,  812,  812,

      812,  812,  812,  812,  754,   61,  813,  813,  813,  813,
      813,  813, 1011,   61,  813,  813,  813,  813,  813,  813,
      813,  813,  813, 1011,  853, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,  813,  813,  813,  813,  813,  813,  257,   61,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  815,
      831,  816,  816,  816,  816,  816,  816, 1011,   61,  816,
      816,  816,  816,  816,  816,  816,  816,  816, 1011, 1011,
       61, 1011, 1011, 1011, 1011, 1011,  831,  816,  816,  816,
      816,  816,  816,  190,   61,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  721,  190,   61,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  790, 1011,  818,  818,
      818,  818,  818,  818, 1011, 1011,  818,  818,  818,  818,
      818,  818,  818,  818,  818, 1011, 1011, 1011, 1011, 1011,
     1011,  884, 1011,  824,  818,  818,  818,  818,  818,  818,
      819,  819,  819,  819,  819,  819,  819,  819,  819,   61,
      825,  820,  820,  820,  820,  820,  820,  884,  827,  824,
       61, 1011, 1011, 1011,  836,   61,  826,  828,  885,  858,
      851,  832,  833,   61,   61,   61,  825,  820,  820,  820,
      820,  820,  820,  829,  827,   61,   61,   61,   61,  835,
      836,   61,  826,  828,  885,  858,  851,  832,  833,   61,

       61,   61, 1011, 1011, 1011, 1011, 1011, 1011, 1011,  829,
     1011,   61, 1011,   61,   61,  835, 1011, 1011, 1011, 1011,
      859,  860,  861, 1011,  862, 1011,  257,   61,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  754,  257, 1011,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  815,
       61,  843,  843,  843,  843,  843,  843, 1011, 1011,  843,
      843,  843,  843,  843,  843,  843,  843,  843, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011,   61,  843,  843,  843,
      843,  843,  843,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  857,   61,  845,  845,  845,  845,  845,  845,

     1011,   61,  847,  847,  847,  847,  847,  847,  847,  847,
      847, 1011,   61, 1011, 1011, 1011, 1011, 1011,  857,   61,
      845,  845,  845,  845,  845,  845,  190,   61,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  790,   61,  847,
      847,  847,  847,  847,  847, 1011, 1011,  850,  850,  850,
      850,  850,  850,  850,  850,  850, 1011,  852, 1011, 1011,
     1011, 1011, 1011, 1011, 1011,  847,  847,  847,  847,  847,
      847,  190,   61,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  849,  852,  850,  850,  850,  850,  850,  850,
      856,  863,  864,   61,  865,  866,   61,  880,   61, 1011,

      879,   61,   61,  892,   61,   61,   61,   61,  910,   61,
      850,  850,  850,  850,  850,  850,  856,  863,  864,   61,
      865,  866,   61,  880, 1011,  890,  879,   61,   61,  892,
       61,   61,   61,   61,  910,   61,  257, 1011,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  815,   61,  873,
      873,  873,  873,  873,  873, 1011,  911,  873,  873,  873,
      873,  873,  873,  873,  873,  873, 1011,  915, 1011, 1011,
     1011,  891, 1011, 1011,   61,  873,  873,  873,  873,  873,
      873,  257,  911,  874,  874,  874,  874,  874,  874,  874,
      874,  874,   61,  886,  875,  875,  875,  875,  875,  875,

     1011,   61,  875,  875,  875,  875,  875,  875,  875,  875,
      875, 1011, 1011,   61, 1011, 1011, 1011, 1011,   61,  886,
      875,  875,  875,  875,  875,  875,  190,   61,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  790,  190,   61,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  849,
     1011,  877,  877,  877,  877,  877,  877, 1011,  887,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  895,  888,
      893,  881,  889,  894,   61,  905,   61,  877,  877,  877,
      877,  877,  877,  882,  887,  912,   61,   61,   61,   61,
      883,   61,   61,  914,  895,   61,  893,  881,   61,  894,

       61,  905,   61, 1011, 1011, 1011, 1011, 1011, 1011,  882,
      932,  912,   61,   61,   61,   61,  883,   61,   61, 1011,
       61,   61, 1011,  257,   61,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  815,  257,  932,  900,  900,  900,
      900,  900,  900,  900,  900,  900,   61,  931,  901,  901,
      901,  901,  901,  901, 1011,   61,  901,  901,  901,  901,
      901,  901,  901,  901,  901, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011,  931,  901,  901,  901,  901,  901,  901,
      190,   61,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  849,  906,  903,  903,  903,  903,  903,  903, 1011,

      916,  903,  903,  903,  903,  903,  903,  903,  903,  903,
       61,  907,  913,  917,  918, 1011, 1011,   61,  906,  903,
      903,  903,  903,  903,  903,  919,  908,   61,  927,  930,
       61,   61,  909,   61,   61,   61,   61,  907,  913, 1011,
      918,   61,   61,   61,   61, 1011,   61, 1011, 1011, 1011,
     1011,  919,  908,   61,  927,  930,   61,   61,  909,   61,
       61,   61, 1011, 1011, 1011,  928, 1011,   61,   61, 1011,
       61,  257,   61,  924,  924,  924,  924,  924,  924,  924,
      924,  924,   61,   61,  925,  925,  925,  925,  925,  925,
     1011,  928,  925,  925,  925,  925,  925,  925,  925,  925,

      925, 1011,   61,   61,  934,  929,   61, 1011,   61,   61,
      925,  925,  925,  925,  925,  925,  190,   61,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  849,   61,   61,
      934,  929,   61,  933,  933,   61,  933,  933,  933,  933,
      933,  933,  941,   61,  933,   61,  942, 1011,  945,  946,
     1011, 1011, 1011, 1011,  933,  933,  940,  943,  960,  955,
      257,   61,  475,  475,  475,  475,  475,  475,  475,  475,
      475,   61,   61,   61,  945,  946,   61,   61,  948,  949,
       61, 1011,  940,  943,  960,  955,  944,  944, 1011,  944,
      944,  944,  944,  944,  944,   61,  954,  944,   61,   61,

      961,   61,   61,   61,  948,  949,   61,  944,  944,  956,
      957,  958,  959,  964,   61, 1011,   61,  962,  963,  969,
       61,   61,  954,  965,  972,  970,  961,   61,  973,  974,
       61,   61,  975,   61,   61,  956,  957,  958,  959,  964,
       61,  971,   61,  962,  963,  969,   61,   61,  976,  965,
      972,  970,  978,   61,  973,  974,   61,   61,  975,   61,
       61,   61,  977,   61,  983,  985,   61,  971,   61,   61,
      986,   61,  984,   61,  976,   61,  987,   61,  978,   61,
      988,   61,  994,   61,  989,   61,  993,   61,  977,   61,
      983,  985,   61,   61,   61,   61,  986,   61,  984,  995,

      996,   61,  987,   61,   61,   61,  988,   61,  994,   61,
      989,   61,  993, 1001,   61,   61,   61,   61, 1011,   61,
       61, 1011, 1011, 1011, 1011,  995,  996, 1011, 1011, 1011,
       61,   61, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1001,
       61,   61,   61,   61, 1011, 1011,   61,   41,   41,   41,
       41,   43,   43,   43,   43,   47,   47,   47,   47,   49,
     1011,   49,   49,   50,   50,   50,   50,  117, 1011,  117,
      117,  121,  121,  185,  185,  186,  186,  254,  254,  255,
      255,  256,  256,  327,  327,  328,  328,  399,  399,  400,
      400,  401,  401,  425, 1011,  425,  425,  470,  470,  471,

      471,  472,  472,  546,  546,  547,  547,  609,  609,  610,
      610,  611,  611,  666,  666,  667,  667,  668,  668,  546,
      546,  711,  711,  712,  712,  748,  748,  749,  749,  750,
      750,  779,  779,  780,  780,  781,  781,  667,  667,  809,
      809,  810,  810,  837,  837,  838,  838,  839,  839,  867,
      867,  868,  868,  870,  870,  749,  749,  897,  897,  898,
      898,  920,  920,  921,  921,  922,  922,  933, 1011,  933,
      933,  935, 1011,  935,  935,  936,  936,  937,  937,  944,
     1011,  944,  944,  947, 1011,  947,  947,  809,  809,  951,
      951,  952,  952,  966,  966,  967,  967,  979,  979,  980,

      980,  981,  981,  868,  868,  991,  991,  997,  997,  998,
      998,  999,  999, 1003, 1003, 1006, 1006, 1007, 1007, 1009,
     1009, 1010, 1010,    7, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011

    } ;

static yyconst flex_int16_t yy_chk[5900] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1100,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1096,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1094,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1090,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1084,   39,   32, 1076,
       21, 1075,   21,   39,   46,   46, 1070,   65, 1066,   21,
     1065,   25, 1061, 1057, 1019, 1010,   40,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
     1009,   66,   40,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   40,   69,   69,   67,   29,   22,   25,   22,
       22,   25, 1007,   25,   67, 1006,   22,   66,   40, 1005,
       29, 1004,   22, 1003,   22,   22,   29,   22, 1002,   69,
       69,   67,   29,   22,   31,   22,   22,  999,   31,   70,

       67,   33,   22,   23,   31,   68,   23,   23,   70,   31,
       31,   23,   33,   71,   23,   33,   23,   23,   33,   74,
       31,   75,   68,   23,   31,   70,  998,   33,  992,   23,
       31,   68,   23,   23,   70,   31,   31,   23,   33,   71,
       23,   33,   23,   23,   33,   74,  991,   75,   68,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       81,   26,   26,   26,   26,   26,   26,  990,   26,   91,
       79,  981,   26,  980,  979,   26,  968,  967,   73,   34,
       38,   26,   79,   34,   38,   73,   81,   26,   26,   26,
       26,   26,   26,   34,   26,   91,   79,   35,   26,   34,

       38,   26,   35,   35,   73,   34,   38,   26,   79,   34,
       38,   73,   36,   36,   35,   35,  966,   76,   77,   34,
       77,   83,   36,   35,   78,   34,   38,  952,   35,   35,
       36,   76,   78,   80,   88,   88,   82,   83,   80,   36,
       35,   35,   36,   76,   77,  951,   77,   83,   36,  950,
       78,  938,  937,   82,  936,  922,   36,   76,   78,   80,
       88,   88,   82,   83,   80,   36,  921,  920,   36,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   82,
       54,   54,   54,   54,   54,   54,  903,   54,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   86,   94,  899,

      898,  897,  896,  873,  870,   86,   54,   54,   54,   54,
       54,   54,   86,   54,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   86,   94,   59,   59,   59,   59,   59,
       59,   86,  868,  867,  847,  841,  840,  839,   86,  838,
      837,  813,  810,  809,  808,  788,  782,   95,   90,  781,
       90,   59,   59,   59,   59,   59,   59,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   84,   62,   62,
       62,   62,   62,   62,   90,   62,   90,  780,  779,  765,
       92,   95,   72,  752,   85,   92,   87,   84,   62,   85,
       72,  750,  749,   84,   62,   62,   62,   62,   62,   62,

       87,   62,   72,   85,   85,   89,   92,   95,   72,   97,
       85,   92,   87,   84,   62,   85,   72,   89,   93,   93,
       89,   96,  100,  108,  748,   97,   87,   96,   72,   85,
       85,   89,   98,  101,  102,   97,  101,   98,   99,  106,
       99,   99,  105,   89,   93,   93,   89,   96,  100,   99,
      103,   97,  104,   96,  102,  103,  107,  108,   98,  101,
      102,  105,  101,   98,   99,  106,   99,   99,  105,  104,
      110,  109,  104,  111,  127,   99,  103,  112,  104,  109,
      102,  103,  107,  108,  113,  111,  112,  105,  115,  114,
      115,  113,  114,  719,  713,  104,  110,  109,  104,  111,

      127,  712,  711,  112,  710,  109,  670,  668,  667,  666,
      113,  111,  112,  619,  115,  114,  115,  113,  114,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  128,
      118,  118,  118,  118,  118,  118,  131,  118,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  134,  141,  612,
      611,  610,  609,  550,  547,  128,  118,  118,  118,  118,
      118,  118,  131,  118,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  134,  546,  122,  122,  122,  122,  122,
      122,  125,  141,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  545,  146,  482,  473,  472,  471,  470,  404,

      146,  122,  122,  122,  122,  122,  122,  124,  141,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  146,
      124,  124,  124,  124,  124,  124,  146,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  401,  124,  124,  124,  124,
      124,  124,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  132,  126,  126,  126,  126,  126,  126,  129,
      130,  133,  129,  400,  399,  132,  130,  135,  138,  135,
      138,  133,  139,  136,  137,  137,  139,  337,  132,  126,
      126,  126,  126,  126,  126,  129,  130,  133,  129,  136,

      140,  132,  130,  135,  138,  135,  138,  133,  139,  136,
      137,  137,  139,  142,  143,  145,  140,  145,  144,  147,
      148,  147,  329,  150,  154,  136,  140,  328,  182,  327,
      149,  143,  326,  142,  144,  150,  151,  152,  148,  142,
      143,  145,  140,  145,  144,  147,  148,  147,  149,  150,
      155,  159,  151,  152,  182,  153,  149,  143,  154,  142,
      144,  150,  151,  152,  148,  153,  156,  166,  155,  157,
      157,  160,  158,  158,  149,  266,  155,  256,  151,  152,
      156,  153,  255,  160,  154,  159,  163,  166,  164,  162,
      161,  153,  156,  166,  155,  157,  157,  160,  162,  161,

      164,  163,  165,  161,  167,  169,  156,  158,  161,  160,
      167,  159,  163,  166,  164,  162,  161,  169,  165,  168,
      168,  171,  172,  172,  162,  161,  164,  163,  165,  161,
      167,  169,  170,  158,  161,  170,  167,  174,  173,  174,
      176,  175,  254,  169,  165,  168,  168,  181,  172,  172,
      173,  178,  177,  180,  195,  171,  176,  181,  170,  175,
      179,  170,  197,  174,  173,  174,  176,  175,  177,  178,
      180,  206,  179,  181,  253,  199,  173,  178,  177,  180,
      195,  171,  176,  181,  225,  175,  179,  187,  197,  186,
      185,  121,  119,   55,  177,  178,  180,  206,  179,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  199,
      183,  183,  183,  183,  183,  183,  189,  183,  189,  189,
      189,  189,  189,  189,  189,  189,  189,   51,   50,   47,
      200,   42,   19,   18,   14,  199,  183,  183,  183,  183,
      183,  183,   12,  183,  188,    7,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,    4,  188,  188,  188,
      188,  188,  188,  193,  200,  193,  193,  193,  193,  193,
      193,  193,  193,  193,    3,  203,    0,    0,    0,    0,
        0,    0,  203,  188,  188,  188,  188,  188,  188,  191,
      200,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  203,  191,  191,  191,  191,  191,  191,  203,  196,
        0,    0,    0,    0,    0,    0,    0,    0,  210,    0,
        0,    0,    0,    0,    0,  216,  216,  196,  191,  191,
      191,  191,  191,  191,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  196,  210,  192,  192,  192,  192,  192,
      192,  216,  216,  196,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  205,    0,    0,    0,  198,  196,
      198,  192,  192,  192,  192,  192,  192,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  201,  204,  194,  194,
      194,  194,  194,  194,  198,  202,  198,  202,  205,  207,

        0,  207,  201,  208,  213,  208,  211,  204,  209,  211,
      212,    0,  201,  204,  194,  194,  194,  194,  194,  194,
      209,  202,    0,  202,  205,  207,  212,  207,  201,  208,
        0,  208,  211,  204,  209,  211,  212,  214,  213,  214,
      215,  217,  218,  219,  219,  218,  209,  220,  217,  224,
        0,    0,  212,    0,    0,    0,  215,    0,    0,    0,
        0,  232,    0,  214,  213,  214,  215,  217,  218,  219,
      219,  218,  230,    0,  217,  221,  222,  223,  227,  226,
      227,  220,  215,  224,  221,  221,  221,  232,  230,  222,
      223,  228,    0,  221,  226,  246,  226,  228,  230,  229,

        0,  221,  222,  223,  227,  226,  227,  220,  229,  224,
      221,  221,  221,  235,  230,  222,  223,  228,  231,  221,
      226,  234,  226,  228,  231,  229,  233,  238,  236,  246,
      233,  235,  236,  240,  229,  237,  237,    0,  234,  235,
      239,    0,  233,  238,  231,  239,    0,  234,  241,  240,
      231,  242,  233,  238,  236,  246,  233,  235,  236,  240,
      247,  237,  237,  241,  234,  241,  239,  242,  233,  238,
      248,  239,  243,  245,  241,  240,  251,  242,  249,  243,
      244,  244,  245,  269,    0,  269,  247,  268,  250,  241,
      248,  241,  268,  242,  250,  249,  248,  273,  243,  245,

        0,    0,    0,    0,  249,  243,  244,  244,  245,  269,
      251,  269,  270,  268,  250,  274,  248,    0,  268,    0,
      250,  249,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  273,    0,    0,    0,    0,  251,  258,  270,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  274,
      258,  258,  258,  258,  258,  258,  260,  273,  260,  260,
      260,  260,  260,  260,  260,  260,  260,    0,    0,    0,
        0,    0,    0,    0,  282,  274,  258,  258,  258,  258,
      258,  258,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  267,  267,  259,  259,  259,  259,  259,  259,  261,

      282,  261,  261,  261,  261,  261,  261,  261,  261,  261,
        0,  284,    0,    0,    0,    0,    0,  267,  267,  259,
      259,  259,  259,  259,  259,  262,    0,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  296,  262,  262,
      262,  262,  262,  262,  263,  284,  263,  263,  263,  263,
      263,  263,  263,  263,  263,    0,  296,    0,    0,    0,
        0,    0,    0,  296,  262,  262,  262,  262,  262,  262,
      264,  284,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  296,  264,  264,  264,  264,  264,  264,  265,
      276,  265,  265,  265,  265,  265,  265,  265,  265,  265,

      275,  275,  276,  278,  278,  271,  271,  271,  272,  264,
      264,  264,  264,  264,  264,  271,  276,  272,  277,  279,
      285,  283,  277,  277,  281,  286,  275,  275,  276,  278,
      278,  271,  271,  271,  272,  279,  281,  286,  283,  280,
      287,  271,  288,  272,  277,  279,  280,  283,  277,  277,
      281,  286,  287,  291,  285,  289,  295,  288,  292,  291,
      290,  279,  281,  286,  283,  280,  287,  289,  288,  290,
      293,  294,  280,  300,  292,  297,  293,  298,  287,  291,
      285,  289,    0,  288,  292,  291,  290,  303,  297,  300,
      295,  294,  298,  289,  301,  290,  293,  294,  299,  300,

      292,  297,  293,  298,  299,  302,  306,  303,  307,  306,
      301,  307,  302,  303,  297,  300,  295,  294,  298,  304,
      301,  305,  308,  310,  299,  311,  304,  305,  309,  309,
      299,  302,  306,  303,  307,  306,  301,  307,  302,  312,
      314,  311,  313,  313,  315,  304,  316,  305,  317,  310,
      315,  311,  304,  305,  309,  309,  308,  317,  319,  318,
      320,  319,  316,  323,    0,  312,  314,  311,  313,  313,
      315,    0,  316,  318,  317,  322,  315,  322,  324,  325,
      320,  324,  308,  317,  319,  318,  320,  319,  316,  321,
      342,  343,  356,  343,  321,    0,  325,  323,    0,  318,

        0,  322,    0,  322,  324,  325,  320,  324,    0,    0,
      342,    0,    0,    0,    0,  321,  342,  343,  356,  343,
      321,  341,  325,  323,  330,    0,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  331,  342,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,    0,  331,  331,
      331,  331,  331,  331,  332,  341,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  331,  331,  331,  331,  331,  331,
      333,  341,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  373,  333,  333,  333,  333,  333,  333,  334,

      345,  334,  334,  334,  334,  334,  334,  334,  334,  334,
        0,    0,  345,    0,    0,    0,    0,    0,  373,  333,
      333,  333,  333,  333,  333,  336,  345,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  338,  345,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,    0,
      338,  338,  338,  338,  338,  338,  340,    0,  340,  340,
      340,  340,  340,  340,  340,  340,  340,    0,    0,    0,
        0,    0,    0,    0,    0,  344,  338,  338,  338,  338,
      338,  338,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  344,  346,  339,  339,  339,  339,  339,  339,  347,

      348,  344,  348,  349,  352,  351,  354,  352,  346,  374,
      355,  349,  351,  355,    0,  347,    0,  344,  346,  339,
      339,  339,  339,  339,  339,  347,  348,    0,  348,  349,
      352,  351,  353,  352,  346,  374,  355,  349,  351,  355,
      354,  347,  350,  350,  353,  350,  350,  350,  350,  350,
      350,  350,  357,  350,  358,  361,  361,  359,  353,  360,
      357,  362,  362,  350,  350,  359,  354,  360,  364,  363,
      353,  358,  378,  365,    0,  366,  364,    0,  357,  365,
      358,  361,  361,  359,  366,  360,  357,  362,  362,  363,
      368,  359,  369,  360,  364,  363,  370,  358,  378,  365,

      369,  366,  364,  367,  367,  365,  371,  368,  370,    0,
      366,  372,  371,  375,  385,  363,  368,  372,  369,    0,
      376,  375,  370,  376,  377,  386,  369,  377,  383,  367,
      367,  380,  371,  368,  370,  381,  387,  372,  371,  375,
      379,    0,  379,  372,  381,  380,  376,  375,  385,  376,
      377,  382,  388,  377,  383,  384,  391,  380,    0,  386,
      388,  381,  387,  390,  382,    0,  379,  382,  379,  389,
      381,  380,  389,  384,  385,  392,    0,  382,  388,  390,
      397,  384,  391,  395,  395,  386,  388,  392,    0,  390,
      382,  394,  393,  382,  393,  389,  398,  394,  389,  384,

      423,  392,  396,  414,  415,  390,  414,  415,  398,  395,
      395,  396,  414,  392,  397,    0,    0,  394,  393,    0,
      393,    0,  398,  394,    0,  426,  423,    0,  396,  414,
      415,    0,  414,  415,  398,    0,    0,  396,  414,    0,
      397,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      403,  426,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  405,    0,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  447,  405,  405,  405,  405,  405,
      405,  407,  416,  407,  407,  407,  407,  407,  407,  407,
      407,  407,    0,    0,    0,    0,    0,    0,    0,    0,

      447,  405,  405,  405,  405,  405,  405,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  416,  428,  406,  406,
      406,  406,  406,  406,  408,  428,  408,  408,  408,  408,
      408,  408,  408,  408,  408,    0,  448,    0,    0,    0,
        0,    0,  416,  428,  406,  406,  406,  406,  406,  406,
      409,  428,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  410,  448,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  454,  410,  410,  410,  410,  410,  410,
      411,  466,  411,  411,  411,  411,  411,  411,  411,  411,
      411,    0,  497,    0,    0,    0,    0,    0,    0,  454,

      410,  410,  410,  410,  410,  410,  412,  466,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  497,  412,
      412,  412,  412,  412,  412,  413,  418,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  417,  419,  419,  420,
      417,  418,  421,    0,    0,  412,  412,  412,  412,  412,
      412,  422,  418,    0,  421,  425,  425,  430,  430,  420,
      424,    0,  417,  419,  419,  420,  417,  418,  421,  427,
      424,  422,  431,    0,    0,  427,    0,  422,  424,  424,
      421,  425,  425,  430,  430,  420,  424,  433,  431,  434,
      435,    0,  432,  433,  429,  427,  424,  422,  431,  432,

      429,  427,  429,  437,  424,  424,  435,  429,  436,  434,
        0,  438,  439,  433,  431,  434,  435,  440,  432,  433,
      429,  437,  512,  440,  436,  432,  429,  438,  429,  437,
      439,    0,  435,  429,  436,  434,  441,  438,  439,  442,
      449,  443,  445,  440,  444,  445,  446,  437,  512,  440,
      436,  446,  441,  438,    0,  442,  439,  443,    0,  444,
      449,    0,  441,  450,  450,  442,  449,  443,  445,    0,
      444,  445,  446,  451,  451,  453,  453,  446,  441,  456,
      452,  442,  452,  443,  459,  444,  449,  455,  457,  450,
      450,  458,  460,    0,  457,  456,  459,  455,    0,  451,

      451,  453,  453,  491,  455,  456,  452,    0,  452,  458,
      459,    0,  460,  455,  457,  461,  461,  458,  460,  467,
      457,  456,  459,  455,  462,  463,  462,  464,  486,  464,
      455,  467,  463,  465,  468,  458,  468,  491,  460,  514,
      465,  461,  461,  469,  486,  467,  469,    0,    0,    0,
      462,  463,  462,  464,  486,  464,    0,  467,  463,  465,
      468,    0,  468,  491,    0,  514,  465,    0,  518,  469,
      486,  474,  469,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  475,    0,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  476,  518,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,    0,  476,  476,  476,  476,
      476,  476,  477,  519,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  476,  476,  476,  476,  476,  476,  478,  519,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      489,  478,  478,  478,  478,  478,  478,  479,  520,  479,
      479,  479,  479,  479,  479,  479,  479,  479,    0,    0,
      489,    0,    0,  511,    0,    0,  489,  478,  478,  478,
      478,  478,  478,  481,  520,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  483,  489,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  511,  483,  483,
      483,  483,  483,  483,  485,    0,  485,  485,  485,  485,
      485,  485,  485,  485,  485,    0,    0,    0,    0,    0,
        0,    0,    0,  511,  483,  483,  483,  483,  483,  483,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  493,
      487,  484,  484,  484,  484,  484,  484,  487,  488,  490,
        0,  494,  493,  494,  495,  488,    0,    0,  490,  495,
      492,  496,    0,  499,  496,  493,  487,  484,  484,  484,
      484,  484,  484,  487,  488,  490,  492,  494,  493,  494,
      495,  488,  498,  499,  490,  495,  492,  496,  500,  499,

      496,  498,  501,  501,  502,  503,  506,  505,  509,  504,
      507,    0,  492,  503,  500,  504,  505,  507,  498,  499,
      502,  508,  506,  508,  500,  509,    0,  498,  501,  501,
      502,  503,  506,  505,  509,  504,  507,  515,  513,  503,
      500,  504,  505,  507,  522,  523,  502,  508,  506,  508,
      510,  509,  516,  510,  513,  516,  517,  515,  521,  524,
      521,  525,  530,  515,  513,  517,  528,    0,    0,    0,
      522,  523,  526,  525,  527,  531,  510,  532,  516,  510,
      513,  516,  517,  515,  521,  524,  521,  525,  526,  529,
      527,  517,  528,  531,  532,  534,  530,  533,  526,  525,

      527,  531,  529,  532,  534,  533,  536,  535,  538,  537,
      538,  540,  539,  541,  526,  529,  527,  544,  536,  531,
      532,  534,  530,  533,  535,  537,  539,  542,  529,  541,
      534,  533,  536,  535,  538,  537,  538,  540,  539,  541,
      543,  570,  542,  544,  536,  543,    0,    0,    0,    0,
      535,  537,  539,  542,    0,  541,  548,  548,  548,  548,
      548,  548,  548,  548,  548,    0,  543,  570,  542,    0,
      549,  543,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  551,    0,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,    0,  551,  551,  551,  551,  551,

      551,  553,    0,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  551,  551,  551,  551,  551,  551,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  559,  562,  552,  552,
      552,  552,  552,  552,  556,  562,  556,  556,  556,  556,
      556,  556,  556,  556,  556,    0,  559,    0,    0,    0,
        0,    0,  559,  562,  552,  552,  552,  552,  552,  552,
      555,  562,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  559,  555,  555,  555,  555,  555,  555,  558,
      588,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      613,  613,  613,  613,  613,  613,  613,  613,  613,  555,
      555,  555,  555,  555,  555,  557,  588,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  560,  557,  557,
      557,  557,  557,  557,  561,  563,  560,  564,  565,  565,
        0,  569,  566,    0,  561,    0,  564,  563,  566,    0,
      567,  568,    0,  560,  557,  557,  557,  557,  557,  557,
      561,  563,  560,  564,  565,  565,  567,  568,  566,  571,
      561,  576,  564,  563,  566,  569,  567,  568,  572,  573,
      577,  572,  574,  578,  575,    0,  573,  577,  574,  571,
      575,  576,  567,  568,  581,  571,  579,  576,  583,  579,

      585,  569,    0,  578,  572,  573,  577,  572,  574,  578,
      575,  582,  573,  577,  574,  571,  575,  576,  580,  580,
      589,  586,  579,  584,  587,  579,  587,  582,  581,  578,
      586,  584,  583,  590,  585,  591,  592,  582,  593,  594,
      595,  593,  594,  592,  580,  580,  589,  586,  598,  584,
      587,  601,  587,  582,  581,  597,  586,  584,  583,  590,
      585,  591,  592,  596,  593,  594,  595,  593,  594,  592,
      599,  597,  596,  600,  604,  605,  602,  601,  599,  606,
        0,  597,  598,  602,  603,  600,  623,  603,  623,  596,
      607,  608,    0,  632,    0,    0,  599,  597,  596,  600,

      604,  605,  602,  634,  599,  606,  607,  608,  598,  602,
      603,  600,  623,  603,  623,    0,  607,  608,  615,  632,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  634,
        0,  636,  607,  608,  614,    0,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  639,  614,  614,  614,
      614,  614,  614,  617,  643,  617,  617,  617,  617,  617,
      617,  617,  617,  617,    0,  636,    0,    0,    0,    0,
        0,    0,  639,  614,  614,  614,  614,  614,  614,  616,
      643,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  636,  616,  616,  616,  616,  616,  616,  618,  646,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      650,    0,    0,    0,    0,    0,    0,    0,  616,  616,
      616,  616,  616,  616,  620,  646,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  650,  620,  620,  620,
      620,  620,  620,  622,    0,  622,  622,  622,  622,  622,
      622,  622,  622,  622,    0,    0,    0,    0,    0,    0,
        0,    0,  628,  620,  620,  620,  620,  620,  620,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  628,  630,
      621,  621,  621,  621,  621,  621,  624,  625,  628,  626,
      624,  626,    0,  627,  625,  627,  630,  631,    0,    0,

        0,  631,  629,    0,  628,  630,  621,  621,  621,  621,
      621,  621,  624,  625,  629,  626,  624,  626,  637,  627,
      625,  627,  630,  631,  633,  638,  641,  631,  629,  635,
      640,  635,    0,  633,  642,  637,    0,  649,  644,    0,
      629,  648,  641,  638,  637,  645,  642,  648,  640,  649,
      633,  638,  641,  647,  651,  635,  640,  635,  644,  633,
      642,  637,  647,  649,  644,  645,  652,  648,  641,  638,
      653,  645,  642,  648,  640,  649,  654,  655,  656,  647,
      651,  657,  658,  660,  644,  659,  662,  663,  647,  661,
        0,  645,  652,  657,  659,  660,  653,  664,  664,  665,

      678,  679,  654,  655,  656,  661,    0,  657,  658,  660,
        0,  659,  662,  663,    0,  661,  678,  665,    0,  657,
      659,  660,    0,  664,  664,  665,  678,  679,    0,    0,
      669,  661,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  678,  665,  671,    0,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  681,  671,  671,  671,
      671,  671,  671,  673,    0,  673,  673,  673,  673,  673,
      673,  673,  673,  673,    0,    0,    0,    0,    0,    0,
        0,  685,  681,  671,  671,  671,  671,  671,  671,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  682,  682,

      672,  672,  672,  672,  672,  672,  675,  685,  675,  675,
      675,  675,  675,  675,  675,  675,  675,    0,    0,    0,
        0,    0,    0,    0,  682,  682,  672,  672,  672,  672,
      672,  672,  674,    0,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  684,  674,  674,  674,  674,  674,
      674,  677,  684,  677,  677,  677,  677,  677,  677,  677,
      677,  677,    0,  686,    0,    0,    0,    0,    0,    0,
      684,  674,  674,  674,  674,  674,  674,  676,  684,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  686,
      676,  676,  676,  676,  676,  676,  680,  683,  687,  688,

      690,  689,  680,  689,  683,  691,  692,  693,  693,  690,
      694,  691,  692,  695,  687,    0,  676,  676,  676,  676,
      676,  676,  680,  683,  687,  688,  690,  689,  680,  689,
      683,  691,  692,  693,  693,  690,  696,  691,  692,  695,
      687,  697,  698,  696,  694,  699,  700,  701,  705,  707,
      697,  704,  706,  706,  709,    0,  707,  725,  726,  698,
      705,  699,  696,  700,  701,    0,  704,  697,  698,  696,
      694,  699,  700,  701,  705,  707,  697,  704,  706,  706,
      709,  708,  707,  725,  726,  698,  705,  699,    0,  700,
      701,  723,  704,  708,  715,  723,  715,  715,  715,  715,

      715,  715,  715,  715,  715,    0,  717,  708,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  723,    0,  708,
      714,  723,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  730,  714,  714,  714,  714,  714,  714,  718,
      731,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  735,    0,    0,    0,    0,    0,    0,  730,  714,
      714,  714,  714,  714,  714,  716,  731,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  735,  716,  716,
      716,  716,  716,  716,  722,  737,  722,  722,  722,  722,
      722,  722,  722,  722,  722,    0,  738,    0,    0,    0,

        0,    0,    0,  745,  716,  716,  716,  716,  716,  716,
      720,  737,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  738,  720,  720,  720,  720,  720,  720,  745,
      751,    0,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,    0,    0,    0,    0,  724,    0,  724,  720,
      720,  720,  720,  720,  720,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  727,  728,  721,  721,  721,  721,
      721,  721,  724,  732,  724,  734,  733,  736,  729,  733,
      727,  728,  742,  736,  734,  736,    0,    0,  740,  732,
      727,  728,  721,  721,  721,  721,  721,  721,  729,  732,

      739,  734,  733,  736,  729,  733,  727,  728,  740,  736,
      734,  736,  741,  743,  740,  732,  742,  739,  744,  746,
      746,  760,  747,  762,  729,  761,  739,  768,  741,  743,
      747,  773,  761,  744,  740,  806,    0,    0,  741,  743,
        0,    0,  742,  739,  744,  746,  746,  760,  747,  762,
        0,  761,    0,  768,  741,  743,  747,  773,  761,  744,
      753,  806,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  807,  753,  753,  753,  753,  753,  753,  755,
        0,  755,  755,  755,  755,  755,  755,  755,  755,  755,
        0,    0,    0,    0,    0,    0,    0,  799,  807,  753,

      753,  753,  753,  753,  753,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  766,  824,  754,  754,  754,  754,
      754,  754,  757,  799,  757,  757,  757,  757,  757,  757,
      757,  757,  757,    0,  766,    0,    0,    0,    0,    0,
      766,  824,  754,  754,  754,  754,  754,  754,  756,  799,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      766,  756,  756,  756,  756,  756,  756,  759,  825,  759,
      759,  759,  759,  759,  759,  759,  759,  759,    0,  767,
        0,    0,    0,    0,    0,    0,    0,  756,  756,  756,
      756,  756,  756,  758,  825,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  769,  758,  758,  758,  758,
      758,  758,  763,  767,  764,  763,  764,  770,  771,    0,
      774,  771,  769,  772,  793,  772,  774,  775,  775,  776,
      770,  769,  758,  758,  758,  758,  758,  758,  763,  767,
      764,  763,  764,  770,  771,  776,  774,  771,  769,  772,
      778,  772,  774,  775,  775,  776,  770,  777,  793,  777,
      794,  826,  803,  792,  794,  803,  778,    0,  830,    0,
        0,  776,    0,    0,    0,    0,  778,    0,    0,  792,
        0,    0,    0,  777,  793,  777,  794,  826,  803,  792,
      794,  803,  778,  783,  830,  783,  783,  783,  783,  783,

      783,  783,  783,  783,  783,  792,  783,  783,  783,  783,
      783,  783,  784,  833,  784,  784,  784,  784,  784,  784,
      784,  784,  784,    0,  823,    0,    0,    0,    0,    0,
        0,    0,  783,  783,  783,  783,  783,  783,  785,  833,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      800,  785,  785,  785,  785,  785,  785,  786,  823,  786,
      786,  786,  786,  786,  786,  786,  786,  786,    0,    0,
      800,    0,    0,    0,    0,    0,  800,  785,  785,  785,
      785,  785,  785,  787,  823,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  789,  800,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,    0,  789,  789,
      789,  789,  789,  789,  791,    0,  791,  791,  791,  791,
      791,  791,  791,  791,  791,    0,    0,    0,    0,    0,
        0,  854,    0,  795,  789,  789,  789,  789,  789,  789,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  795,
      796,  790,  790,  790,  790,  790,  790,  854,  797,  795,
      797,    0,    0,    0,  805,  805,  796,  798,  855,  829,
      821,  801,  802,  821,  829,  795,  796,  790,  790,  790,
      790,  790,  790,  798,  797,  798,  797,  801,  802,  804,
      805,  805,  796,  798,  855,  829,  821,  801,  802,  821,

      829,  804,    0,    0,    0,    0,    0,    0,    0,  798,
        0,  798,    0,  801,  802,  804,    0,    0,    0,    0,
      831,  831,  831,    0,  831,    0,  812,  804,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  814,    0,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      831,  814,  814,  814,  814,  814,  814,  816,    0,  816,
      816,  816,  816,  816,  816,  816,  816,  816,    0,    0,
        0,    0,    0,    0,    0,    0,  831,  814,  814,  814,
      814,  814,  814,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  828,  856,  815,  815,  815,  815,  815,  815,

      818,  828,  818,  818,  818,  818,  818,  818,  818,  818,
      818,    0,  859,    0,    0,    0,    0,    0,  828,  856,
      815,  815,  815,  815,  815,  815,  817,  828,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  859,  817,
      817,  817,  817,  817,  817,  820,    0,  820,  820,  820,
      820,  820,  820,  820,  820,  820,    0,  822,    0,    0,
        0,    0,    0,    0,    0,  817,  817,  817,  817,  817,
      817,  819,  822,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  822,  819,  819,  819,  819,  819,  819,
      827,  832,  834,  832,  835,  836,  851,  852,  822,    0,

      851,  852,  835,  863,  879,  863,  827,  836,  884,  834,
      819,  819,  819,  819,  819,  819,  827,  832,  834,  832,
      835,  836,  851,  852,    0,  861,  851,  852,  835,  863,
      879,  863,  827,  836,  884,  834,  842,    0,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  861,  842,
      842,  842,  842,  842,  842,  843,  885,  843,  843,  843,
      843,  843,  843,  843,  843,  843,    0,  889,    0,    0,
        0,  862,    0,    0,  861,  842,  842,  842,  842,  842,
      842,  844,  885,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  889,  857,  844,  844,  844,  844,  844,  844,

      845,  862,  845,  845,  845,  845,  845,  845,  845,  845,
      845,    0,    0,  857,    0,    0,    0,    0,  889,  857,
      844,  844,  844,  844,  844,  844,  846,  862,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  848,  857,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
        0,  848,  848,  848,  848,  848,  848,  850,  858,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  866,  860,
      864,  853,  860,  865,  858,  880,  866,  848,  848,  848,
      848,  848,  848,  853,  858,  886,  864,  886,  892,  865,
      853,  853,  880,  888,  866,  894,  864,  853,  860,  865,

      858,  880,  866,    0,    0,    0,    0,    0,    0,  853,
      910,  886,  864,  886,  892,  865,  853,  853,  880,    0,
      888,  894,    0,  872,  860,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  874,  910,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  888,  909,  874,  874,
      874,  874,  874,  874,  875,  909,  875,  875,  875,  875,
      875,  875,  875,  875,  875,    0,    0,    0,    0,    0,
        0,    0,    0,  909,  874,  874,  874,  874,  874,  874,
      876,  909,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  881,  876,  876,  876,  876,  876,  876,  877,

      890,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      881,  882,  887,  891,  893,    0,    0,  893,  881,  876,
      876,  876,  876,  876,  876,  895,  883,  890,  905,  908,
      887,  882,  883,  914,  908,  905,  881,  882,  887,    0,
      893,  895,  891,  893,  883,    0,  915,    0,    0,    0,
        0,  895,  883,  890,  905,  908,  887,  882,  883,  914,
      908,  905,    0,    0,    0,  906,    0,  895,  891,    0,
      883,  900,  915,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  916,  906,  900,  900,  900,  900,  900,  900,
      901,  906,  901,  901,  901,  901,  901,  901,  901,  901,

      901,    0,  907,  917,  912,  907,  912,    0,  916,  906,
      900,  900,  900,  900,  900,  900,  902,  918,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  907,  917,
      912,  907,  912,  913,  913,  919,  913,  913,  913,  913,
      913,  913,  929,  918,  913,  927,  930,    0,  933,  933,
        0,    0,    0,    0,  913,  913,  928,  931,  945,  941,
      924,  919,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  927,  928,  931,  933,  933,  929,  941,  935,  935,
      930,    0,  928,  931,  945,  941,  934,  934,    0,  934,
      934,  934,  934,  934,  934,  935,  940,  934,  928,  931,

      946,  940,  929,  941,  935,  935,  930,  934,  934,  942,
      943,  944,  944,  948,  942,    0,  943,  947,  947,  954,
      954,  935,  940,  949,  957,  955,  946,  940,  958,  959,
      949,  955,  960,  948,  947,  942,  943,  944,  944,  948,
      942,  956,  943,  947,  947,  954,  954,  956,  962,  949,
      957,  955,  964,  964,  958,  959,  949,  955,  960,  948,
      947,  965,  963,  969,  970,  972,  972,  956,  962,  963,
      973,  970,  971,  956,  962,  971,  975,  977,  964,  964,
      976,  976,  984,  984,  978,  985,  983,  965,  963,  969,
      970,  972,  972,  983,  962,  963,  973,  970,  971,  986,

      988,  971,  975,  977,  978,  989,  976,  976,  984,  984,
      978,  985,  983,  993,  994,  993,  996, 1001,    0,  983,
      988,    0,    0,    0,    0,  986,  988,    0,    0,    0,
      978,  989,    0,    0,    0,    0,    0,    0,    0,  993,
      994,  993,  996, 1001,    0,    0,  988, 1012, 1012, 1012,
     1012, 1013, 1013, 1013, 1013, 1014, 1014, 1014, 1014, 1015,
        0, 1015, 1015, 1016, 1016, 1016, 1016, 1017,    0, 1017,
     1017, 1018, 1018, 1020, 1020, 1021, 1021, 1022, 1022, 1023,
     1023, 1024, 1024, 1025, 1025, 1026, 1026, 1027, 1027, 1028,
     1028, 1029, 1029, 1030,    0, 1030, 1030, 1031, 1031, 1032,

     1032, 1033, 1033, 1034, 1034, 1035, 1035, 1036, 1036, 1037,
     1037, 1038, 1038, 1039, 1039, 1040, 1040, 1041, 1041, 1042,
     1042, 1043, 1043, 1044, 1044, 1045, 1045, 1046, 1046, 1047,
     1047, 1048, 1048, 1049, 1049, 1050, 1050, 1051, 1051, 1052,
     1052, 1053, 1053, 1054, 1054, 1055, 1055, 1056, 1056, 1058,
     1058, 1059, 1059, 1060, 1060, 1062, 1062, 1063, 1063, 1064,
     1064, 1067, 1067, 1068, 1068, 1069, 1069, 1071,    0, 1071,
     1071, 1072,    0, 1072, 1072, 1073, 1073, 1074, 1074, 1077,
        0, 1077, 1077, 1078,    0, 1078, 1078, 1079, 1079, 1080,
     1080, 1081, 1081, 1082, 1082, 1083, 1083, 1085, 1085, 1086,

     1086, 1087, 1087, 1088, 1088, 1089, 1089, 1091, 1091, 1092,
     1092, 1093, 1093, 1095, 1095, 1097, 1097, 1098, 1098, 1099,
     1099, 1101, 1101, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[123] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2119 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2229 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1012 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5824 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::LINK_LOCAL_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 169 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 170 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 108:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 186 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 195 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 213 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 222 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 231 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 243 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 250 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 271 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 303 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 331 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 341 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 350 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 353 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3093 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1012 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1012 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1011);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 353 "SrvLexer.l"



